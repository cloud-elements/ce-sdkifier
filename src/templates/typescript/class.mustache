{{#imports}}
/// <reference path="{{&.}}" />
{{/imports}}

import * as request from "superagent";

type integer = number;

/**
* {{&description}}
* @class {{&className}}
* Methods return a superagent compatible instance that fully supports the superagent API
*/
export class {{&className}} {

domain: string = "{{&domain}}";
authorizationHeader: string = null;

/**
* Create an instance of the SDK
* @param {string} baseUrl - The URL of the host environment (e.g., https://staging.cloud-elements.com)
* @param {string} authorizationHeader - A valid auth header for Cloud Elements (User and Org tokens)
*/
constructor(baseUrl?: string, authorizationHeader?: string) {
if(baseUrl) {
this.domain = `${baseUrl}/elements/api-v2`;
}
if (authorizationHeader) {
this.authorizationHeader = authorizationHeader;
}
}

getDomain() {
return this.domain;
}

/**
* Perform a POST to the given path
* @method
* @name platformSDK#post
* @param {string} path
*/
post(path: string): {{&className}}MethodParameters<request.Response>  {
  return new {{&className}}MethodParameters<request.Response>(this, 'post', path)
}

/**
* Perform a PUT to the given path
* @method
* @name platformSDK#put
* @param {string} path
*/
put(path: string): {{&className}}MethodParameters<request.Response>  {
  return new {{&className}}MethodParameters<request.Response>(this, 'put', path)
}

/**
* Perform a PATCH to the given path
* @method
* @name platformSDK#patch
* @param {string} path
*/
patch(path: string): {{&className}}MethodParameters<request.Response>  {
  return new {{&className}}MethodParameters<request.Response>(this, 'patch', path)
}

/**
* Perform a DELETE to the given path
* @method
* @name platformSDK#delete
* @param {string} path
*/
delete(path: string): {{&className}}MethodParameters<request.Response>  {
  return new {{&className}}MethodParameters<request.Response>(this, 'delete', path)
}

/**
* Perform a GET to the given path
* @method
* @name platformSDK#get
* @param {string} path
*/
get(path: string): {{&className}}MethodParameters<request.Response>  {
  return new {{&className}}MethodParameters<request.Response>(this, 'get', path)
}

{{#methods}}
{{> method}}
{{/methods}}
}

{{#definitions}}
  type {{#dedashify}}{{&name}}{{/dedashify}} = {{#tsType}}{{> type}}{{/tsType}};
{{/definitions}}

class {{&className}}MethodParameters<T> extends request.Request implements Promise<T>{
constructor(public superThis: {{&className}}, protected method: string, protected _path: string) {
  super(method, superThis.getDomain() + _path);
                      if (superThis.authorizationHeader) {
                      this.set('Authorization', superThis.authorizationHeader);
                      }
}
  then(a: (r: T) => any, b):any {return super.then(r => {
                      if (r.type === 'application/octet-stream' && !r.buffered && !r.text) {
                      return a(r)
                      } else {
                      return a(r.body)
                      }
                      },b)};
  catch = super.catch;
}

{{#methods}}
  class {{#cleanMethodName}}{{&methodName}}{{/cleanMethodName}}Parameters extends {{&className}}MethodParameters<{{#tsType}}{{> type}}{{/tsType}}> {
  constructor(superThis: {{&className}}, method: string, _path: string
  {{#parameters}}
    {{#excludeAuthorizationParameter}}
      {{#required}}
        , {{&camelCaseName}}: {{> type}}
      {{/required}}
    {{/excludeAuthorizationParameter}}
  {{/parameters}}
  ) {super(superThis, method, _path
  {{#parameters}}
    {{#isPathParameter}}
      .replace('{{=<% %>=}}{<%&name%>}', `${<%&camelCaseName%><%={{ }}=%>}`)
    {{/isPathParameter}}
  {{/parameters}}
  );
  {{#parameters}}
    {{#excludeAuthorizationParameter}}
      {{#required}}
  {{#isQueryParameter}}
    {{#isSingleton}}
      return this.query({ '{{&name}}': '{{&singleton}}'} );
    {{/isSingleton}}
    {{^isSingleton}}
      {{#isPatternType}}
        Object.keys(parameters).forEach(function(parameterName) {
        if(new RegExp('{{&pattern}}').test(parameterName)){
        return this.query({ [parameterName]: parameters[parameterName]} );
        }
        });
      {{/isPatternType}}
      {{^isPatternType}}
        return this.query({ '{{&name}}': {{&camelCaseName}} } );
      {{/isPatternType}}
    {{/isSingleton}}
  {{/isQueryParameter}}
  {{#isHeaderParameter}}
    {{#isSingleton}}
      this.set('{{&name}}', '{{&singleton}}');
    {{/isSingleton}}
    {{^isSingleton}}
      this.set('{{&name}}', '{{&camelCaseName}}');
    {{/isSingleton}}
  {{/isHeaderParameter}}
  {{#isBodyParameter}}
    this.send({{&camelCaseName}});
  {{/isBodyParameter}}
  {{#isFormParameter}}
    {{#isSingleton}}
      this.field('{{&name}}', '{{&singleton}}');
    {{/isSingleton}}
    {{^isSingleton}}
      this.field('{{&name}}', '{{&camelCaseName}}');
    {{/isSingleton}}
  {{/isFormParameter}}
  {{#isFileParameter}}
        this.attach('{{&name}}', file.body, {filename: 'file', contentType: file.type});
  {{/isFileParameter}}
      {{/required}}
    {{/excludeAuthorizationParameter}}
  {{/parameters}}
  }
  {{#parameters}}
    {{#excludeAuthorizationParameter}}
      {{^required}}
        /**
      * Set the '{{&camelCaseName}}' optional parameter
      * @method
      * @name {{#cleanMethodName}}{{&methodName}}{{/cleanMethodName}}Parameters#{{&camelCaseName}}
      */
        {{&camelCaseName}}({{&camelCaseName}}: {{> type}}): {{#cleanMethodName}}{{&methodName}}{{/cleanMethodName}}Parameters
        {
        {{#isQueryParameter}}
          {{#isSingleton}}
            return this.query({ '{{&name}}': '{{&singleton}}'} );
          {{/isSingleton}}
          {{^isSingleton}}
            {{#isPatternType}}
              Object.keys(parameters).forEach(function(parameterName) {
              if(new RegExp('{{&pattern}}').test(parameterName)){
              return this.query({ [parameterName]: parameters[parameterName]} );
              }
              });
            {{/isPatternType}}
            {{^isPatternType}}
              return this.query({ '{{&name}}': {{&camelCaseName}} } );
            {{/isPatternType}}
          {{/isSingleton}}
        {{/isQueryParameter}}
        {{#isPathParameter}}
          _path = _path.replace('{{=<% %>=}}{<%&name%>}<%={{ }}=%>', `${parameters['{{&camelCaseName}}']}`);
        {{/isPathParameter}}
        {{#isHeaderParameter}}
          {{#isSingleton}}
            return this.set('{{&name}}', '{{&singleton}}');
          {{/isSingleton}}
          {{^isSingleton}}
            return this.set('{{&name}}', '{{&camelCaseName}}');
          {{/isSingleton}}
        {{/isHeaderParameter}}
        {{#isBodyParameter}}
          if(this.queryParameters['{{&camelCaseName}}'] !== undefined) {
          this._body = this.queryParameters['{{&camelCaseName}}'];
          }
        {{/isBodyParameter}}
        {{#isFormParameter}}
          {{#isSingleton}}
            return this.field('{{&name}}', '{{&singleton}}');
          {{/isSingleton}}
          {{^isSingleton}}
            return this.field('{{&name}}', '{{&camelCaseName}}');
          {{/isSingleton}}
        {{/isFormParameter}}
        {{#isFileParameter}}
          return this.attach('{{&name}}', file.body, {filename: 'file', contentType: file.type});
        {{/isFileParameter}}
        }
      {{/required}}
    {{/excludeAuthorizationParameter}}
  {{/parameters}}
  }
{{/methods}}



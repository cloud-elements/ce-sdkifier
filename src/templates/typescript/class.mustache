{{#imports}}
/// <reference path="{{&.}}" />
{{/imports}}

import * as request from "superagent";
import {SuperAgentStatic} from "superagent";

type CallbackHandler = (err: any, res?: request.Response) => void;
{{#definitions}}
type {{#dedashify}}{{&name}}{{/dedashify}} = {{#tsType}}{{> type}}{{/tsType}};
{{/definitions}}

type Logger = { log: (line: string) => any };

class {{&className}}MethodParameters {
protected _body: any;
protected headers: any;
protected queryParameters: any;
protected form: any;
constructor(public superThis: {{&className}}, protected method: string, protected path: string) {
this.queryParameters = {};
this.headers = {};
this.form = {};
}
}

{{#methods}}
  class {{#cleanMethodName}}{{&methodName}}{{/cleanMethodName}}Parameters extends {{&className}}MethodParameters {
  constructor(superThis: {{&className}}, method: string, path: string
  {{#parameters}}
    {{#excludeAuthorizationParameter}}
      {{#required}}
        , {{&camelCaseName}}: {{> type}}
      {{/required}}
    {{/excludeAuthorizationParameter}}
  {{/parameters}}
  ) {super(superThis, method, path);
  {{#parameters}}
    {{#excludeAuthorizationParameter}}
      {{#required}}
  {{#isQueryParameter}}
    {{#isSingleton}}
      this.queryParameters['{{&name}}'] = '{{&singleton}}';
    {{/isSingleton}}
    {{^isSingleton}}
      {{#isPatternType}}
        Object.keys(parameters).forEach(function(parameterName) {
        if(new RegExp('{{&pattern}}').test(parameterName)){
        this.queryParameters[parameterName] = parameters[parameterName];
        }
        });
      {{/isPatternType}}
      {{^isPatternType}}
        this.queryParameters['{{&name}}'] = {{&camelCaseName}};
      {{/isPatternType}}
    {{/isSingleton}}
  {{/isQueryParameter}}
  {{#isPathParameter}}
    this.path = this.path.replace('{{=<% %>=}}{<%&name%>}', `${<%&camelCaseName%><%={{ }}=%>}`);
  {{/isPathParameter}}
  {{#isHeaderParameter}}
    {{#isSingleton}}
      this.headers['{{&name}}'] = '{{&singleton}}';
    {{/isSingleton}}
    {{^isSingleton}}
      this.headers['{{&name}}'] = {{&camelCaseName}};
    {{/isSingleton}}
  {{/isHeaderParameter}}
  {{#isBodyParameter}}
    this._body = {{&camelCaseName}};
  {{/isBodyParameter}}
  {{#isFormParameter}}
    {{#isSingleton}}
      this.form['{{&name}}'] = '{{&singleton}}';
    {{/isSingleton}}
    {{^isSingleton}}
      this.form['{{&name}}'] = {{&camelCaseName}};
    {{/isSingleton}}
  {{/isFormParameter}}
      {{/required}}
    {{/excludeAuthorizationParameter}}
  {{/parameters}}
  }
  {{#parameters}}
    {{#excludeAuthorizationParameter}}
      {{^required}}
        {{&camelCaseName}}({{&camelCaseName}}: {{> type}}): {{#cleanMethodName}}{{&methodName}}{{/cleanMethodName}}Parameters
        {
        {{#isQueryParameter}}
          {{#isSingleton}}
            this.queryParameters['{{&name}}'] = '{{&singleton}}';
          {{/isSingleton}}
          {{^isSingleton}}
            {{#isPatternType}}
              Object.keys(parameters).forEach(function(parameterName) {
              if(new RegExp('{{&pattern}}').test(parameterName)){
              this.queryParameters[parameterName] = parameters[parameterName];
              }
              });
            {{/isPatternType}}
            {{^isPatternType}}
              this.queryParameters['{{&name}}'] = {{&camelCaseName}};
            {{/isPatternType}}
          {{/isSingleton}}
        {{/isQueryParameter}}
        {{#isPathParameter}}
          path = path.replace('{{=<% %>=}}{<%&name%>}<%={{ }}=%>', `${parameters['{{&camelCaseName}}']}`);
        {{/isPathParameter}}
        {{#isHeaderParameter}}
          {{#isSingleton}}
            this.headers['{{&name}}'] = '{{&singleton}}';
          {{/isSingleton}}
          {{^isSingleton}}
            this.headers['{{&name}}'] = {{&camelCaseName}};
          {{/isSingleton}}
        {{/isHeaderParameter}}
        {{#isBodyParameter}}
          if(this.queryParameters['{{&camelCaseName}}'] !== undefined) {
          this._body = this.queryParameters['{{&camelCaseName}}'];
          }
        {{/isBodyParameter}}
        {{#isFormParameter}}
          {{#isSingleton}}
            this.form['{{&name}}'] = '{{&singleton}}';
          {{/isSingleton}}
          {{^isSingleton}}
            this.form['{{&name}}'] = {{&camelCaseName}};
          {{/isSingleton}}
        {{/isFormParameter}}
        return this;
        }
      {{/required}}
    {{/excludeAuthorizationParameter}}
  {{/parameters}}
  run(): Promise < {{#tsType}}{{> type}}{{/tsType}} > {
  return this.superThis.request(this.method, this.path, this._body, this.headers, this.queryParameters, this.form)
  .then(r => r.body)
  }
  };
{{/methods}}

/**
 * {{&description}}
 * @class {{&className}}
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export class {{&className}} {

    private domain: string = "{{&domain}}";
    private logger: Logger = {log: msg => console.log(msg)};
    private errorHandlers: CallbackHandler[] = [];
    private authorizationHeader: string = null;

    constructor(baseUrl?: string, authorizationHeader?: string, logger?: Logger) {
        if(baseUrl) {
            this.domain = `${baseUrl}/elements/api-v2`;
        }
        if(logger) {
          this.logger = logger;
        }
        if (authorizationHeader) {
          this.authorizationHeader = authorizationHeader;
        }
    }

    getDomain() {
        return this.domain;
    }

    addErrorHandler(handler: CallbackHandler) {
        this.errorHandlers.push(handler);
    }

    public post(path: string, body?: any, headers?: any, queryParameters?: any, form?: any): Promise <request.Response> {
      return this.request('POST', path, body, headers, queryParameters, form)
    }

    public put(path: string, body?: any, headers?: any, queryParameters?: any, form?: any): Promise <request.Response> {
      return this.request('PUT', path, body, headers, queryParameters, form)
    }

    public patch(path: string, body?: any, headers?: any, queryParameters?: any, form?: any): Promise <request.Response> {
      return this.request('PATCH', path, body, headers, queryParameters, form)
     }

    public delete(path: string, body?: any, headers?: any, queryParameters?: any, form?: any): Promise <request.Response> {
      return this.request('DELETE', path, body, headers, queryParameters, form)
    }

    public get(path: string, body?: any, headers?: any, queryParameters?: any, form?: any): Promise <request.Response> {
      return this.request('GET', path, body, headers, queryParameters, form)
    }

    public request(method: string, path: string, body?: any, headers?: any, queryParameters?: any, form?: any):
  Promise < request.Response > {
return new Promise((resolve, reject) => {
        if (!body) {body = {}}
        if (!headers) {headers = {}}
        if (!queryParameters) {queryParameters = {}}
        if (!form) {form = {}}
        if (this.authorizationHeader && this.authorizationHeader.length > 0) {
          headers.authorization = this.authorizationHeader
        }
        let url: string = this.domain + path;
        if(this.logger) {
          this.logger.log(`Call ${method} ${url}`);
        }

        let req = (request as SuperAgentStatic)(method, url).query(queryParameters);

        Object.keys(headers).forEach(key => {
            req.set(key, headers[key]);
        });

        if(body) {
            req.send(body);
        }
        
        if(typeof(body) === 'object' && !(body.constructor.name === 'Buffer')) {
            req.set('Content-Type', 'application/json');
        }

        if(Object.keys(form).length > 0) {
            req.type('form');
            req.send(form);
        }

        req.end((error, response) => {
            if(error || !response.ok) {
                reject(error);
                this.errorHandlers.forEach(handler => handler(error));
            } else {
                resolve(response);
            }
        });
});
    }

{{#methods}}
    {{> method}}

{{/methods}}
}

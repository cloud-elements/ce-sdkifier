{
  "basePath": "/elements/api-v2/hubs/ecommerce",
  "paths": {
    "/abandoned-checkouts": {
      "get": {
        "operationId": "getAbandonedCheckouts",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The page number. When this parameter is omitted, 1 is implied.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned.",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "$ref": "#/definitions/AbandonedCheckout"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve abandoned checkouts from Shopify.",
        "tags": [
          "abandoned-checkouts"
        ]
      }
    },
    "/bulk/query": {
      "post": {
        "operationId": "createBulkQuery",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Notification URL. We will post data to this URL with the status of the Job",
            "in": "header",
            "name": "Elements-Async-Callback-Url",
            "required": false,
            "type": "string"
          },
          {
            "description": "The CEQL query. When this parameter is omitted, all objects of the given type are returned via the bulk job. Endpoint limiters may still apply.",
            "in": "query",
            "name": "q",
            "required": true,
            "type": "string"
          },
          {
            "description": "The last time this query was run. This is optional. You can also have this parameter in the query and leave this blank - optional eg. '2014-10-06T13:22:17-08:00'",
            "in": "query",
            "name": "lastRunDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "string"
          },
          {
            "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
            "in": "query",
            "name": "to",
            "required": false,
            "type": "string"
          },
          {
            "description": "If this id is supplied the previous job will be continued from where it left off and continue to get all records to the time the new job was started. If this value is passed in - the query parameter is ignored",
            "in": "query",
            "name": "continueFromJobId",
            "required": false,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkQuery"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Create an asynchronous bulk query job.",
        "tags": [
          "bulk"
        ]
      }
    },
    "/bulk/{id}/cancel": {
      "put": {
        "operationId": "replaceBulkCancel",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job to cancel.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkStatus"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "<span class='betaAPI'>beta</span> Cancel an asynchronous bulk query job.",
        "tags": [
          "bulk"
        ]
      }
    },
    "/bulk/{id}/errors": {
      "get": {
        "operationId": "getBulkErrors",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job to retrieve its errors.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The start page for pagination, which defaults to 1 if not supplied",
            "format": "int64",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The page size for pagination, which defaults to 200 if not supplied",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The Next page to get from set of bulk results",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "<span class='betaAPI'>beta</span> Retrieve the errors of a bulk job.",
        "tags": [
          "bulk"
        ]
      }
    },
    "/bulk/{id}/status": {
      "get": {
        "operationId": "getBulkStatus",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job to retrieve its status.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkStatus"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve the status of a bulk job.",
        "tags": [
          "bulk"
        ]
      }
    },
    "/bulk/{id}/{objectName}": {
      "get": {
        "operationId": "getBulkByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve the results of an asynchronous bulk query.",
        "tags": [
          "bulk"
        ]
      }
    },
    "/bulk/{objectName}": {
      "post": {
        "operationId": "createBulkByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Url to send the notification to when the Job is completed",
            "in": "header",
            "name": "Elements-Async-Callback-Url",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the object for which data needs to be uploaded.",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Optional JSON MetaData that contains path or format, ex: {\"path\" : <path for the sub resource>, \"format\": <json/csv>}. path - is passed to the endpoint for bulk loading the data into a nested object. Optional JSON Metadata that contains identifierFieldName, action, listId or campaignId. The identifierField name is used for upserts and the optional fields like listId or campaignId. Example: {\"listId\":\"1014\",\"action\":\"upsert\"}. If the Upload format is JSON pass metadata as {\"format\":\"json\"}.",
            "in": "formData",
            "name": "metaData",
            "required": false,
            "type": "string"
          },
          {
            "description": "The file of objects to bulk load. If the JSON file upload, each JSON record should be in a single line",
            "in": "formData",
            "name": "file",
            "type": "file"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "<span class='betaAPI'>beta</span> Upload a file of objects to be bulk uploaded to the provider.",
        "tags": [
          "bulk"
        ]
      }
    },
    "/collects": {
      "post": {
        "summary": "Add a product to a collection",
        "operationId": "createCollect",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/collects"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/collectsPOST"
            },
            "in": "body",
            "name": "collects",
            "description": "The body of the collect",
            "required": true
          }
        ],
        "tags": [
          "collects"
        ]
      },
      "get": {
        "summary": "List all collects or only those for specific products or collections",
        "operationId": "getCollects",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/collects"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for objects where name equals foo, the search expression will be <i>name='foo'</i>. When this parameter is omitted, all objects are returned in a paginated fashion.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "The page number of resources to retrieve",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "collects"
        ]
      }
    },
    "/collects-count": {
      "get": {
        "summary": "Receive a count of all Collects",
        "operationId": "getCollectsCount",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/collectsCount"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "collects-count"
        ]
      }
    },
    "/collects/{collectId}": {
      "get": {
        "summary": "Get the collect with a certain id, or for a given product and collection",
        "operationId": "getCollectByCollectId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/collects"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "collectId",
            "description": "ID of the collect",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for objects where name equals foo, the search expression will be <i>name='foo'</i>. When this parameter is omitted, all objects are returned in a paginated fashion.",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "collects"
        ]
      },
      "delete": {
        "summary": "Remove a product from a collection",
        "operationId": "deleteCollectByCollectId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "collectId",
            "description": "ID of the collect",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "collects"
        ]
      }
    },
    "/countries": {
      "get": {
        "summary": "List all countries",
        "operationId": "getCountries",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/countries"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "description": "The page number of resources to retrieve",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "since_id",
            "description": "Restrict results to after the specified ID",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "countries"
        ]
      }
    },
    "/countries/{countryId}": {
      "get": {
        "summary": "List all countries",
        "operationId": "getCountryByCountryId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/countries"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "countryId",
            "description": "ID of the country",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "The page number of resources to retrieve",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "countries"
        ]
      }
    },
    "/custom-collections": {
      "post": {
        "summary": "Create a new custom collection",
        "operationId": "createCustomCollection",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/customCollections"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/customCollectionsPOST"
            },
            "in": "body",
            "name": "custom-collections",
            "description": "The custom-collections object",
            "required": true
          }
        ],
        "tags": [
          "custom-collections"
        ]
      },
      "get": {
        "summary": "Get a list of all custom collections that contain a given product",
        "operationId": "getCustomCollections",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customCollections"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "The page number of resources to retrieve",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "custom-collections"
        ]
      }
    },
    "/custom-collections-count": {
      "get": {
        "summary": "Get a count of all custom collections that contain a given product",
        "operationId": "getCustomCollectionsCount",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/customCollectionsCount"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression.",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "custom-collections-count"
        ]
      }
    },
    "/custom-collections/{customCollectionId}": {
      "patch": {
        "summary": "Update an existing custom collection",
        "operationId": "updateCustomCollectionByCustomCollectionId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/customCollections"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "customCollectionId",
            "description": "ID of the custom-collections that needs to be updated",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/customCollectionsPATCH"
            },
            "in": "body",
            "name": "custom-collections",
            "description": "The custom-collections object that needs to be updated",
            "required": true
          }
        ],
        "tags": [
          "custom-collections"
        ]
      },
      "get": {
        "summary": "Get a single custom collection",
        "operationId": "getCustomCollectionByCustomCollectionId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customCollections"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "customCollectionId",
            "description": "ID of the custom collection",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "The page number of resources to retrieve",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "custom-collections"
        ]
      },
      "delete": {
        "summary": "Remove a custom collection from the database",
        "operationId": "deleteCustomCollectionByCustomCollectionId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "customCollectionId",
            "description": "ID of the custom-collections",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "custom-collections"
        ]
      }
    },
    "/customers": {
      "get": {
        "operationId": "getCustomers",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for customers with an address in the United States, the where parameter will be <i>country='United States'</i>. When this parameter is omitted, all customers are returned in a paginated fashion. Supported fields are those that are non-metadata. For instance, first_name is supported, but  last_order_id is not supported. It is possible to search by Customer ID as well, for example with <i>id='1234'</i>.",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The page number. When this parameter is omitted, 1 is implied.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned.",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Optionally return orders in a particular order. Current supported values are 'updated_at' and 'last_order_date'. By default this returns in ascending order, for descending order use 'updated_at desc'.",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optionally return the total count of customers. Returned in response headers.",
            "in": "query",
            "name": "returnTotalCount",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "$ref": "#/definitions/Customer"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Find customers in Shopify, using the provided CEQL search expression.",
        "tags": [
          "customers"
        ]
      },
      "post": {
        "operationId": "createCustomer",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Customer object to be created.",
            "in": "body",
            "name": "customer",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerPOST"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Create a new customer in Shopify.",
        "tags": [
          "customers"
        ]
      }
    },
    "/customers/{customerId}/addresses": {
      "post": {
        "summary": "Creates a new address for a customer",
        "operationId": "createCustomerAddresse",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/customersAddress"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "customerId",
            "description": "ID of the customer for which address is to be added",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/customersAddressPOST"
            },
            "in": "body",
            "name": "address",
            "description": "Body of the address",
            "required": true
          }
        ],
        "tags": [
          "customers"
        ]
      },
      "get": {
        "summary": "Get all variants for a given product",
        "operationId": "getCustomersAddresses",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customersAddress"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "customerId",
            "description": "The ID of the customer to get the address",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "The size of the page to return (Maximum: 250)",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "The page of results to return",
            "type": "integer",
            "required": false
          }
        ],
        "tags": [
          "customers"
        ]
      }
    },
    "/customers/{customerId}/addresses/{addressId}": {
      "patch": {
        "summary": "Creates a new address for a customer",
        "operationId": "updateCustomersAddresseByAddressId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/customersAddress"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "customerId",
            "description": "ID of the customer for which address is to be added",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "addressId",
            "description": "ID of the address",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/customersAddressPATCH"
            },
            "in": "body",
            "name": "address",
            "description": "Body of the address",
            "required": true
          }
        ],
        "tags": [
          "customers"
        ]
      },
      "get": {
        "summary": "Get all variants for a given product",
        "operationId": "getCustomersAddresseByAddressId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/customersAddress"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "customerId",
            "description": "ID of the customer",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "addressId",
            "description": "The ID of the address for a customer",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "customers"
        ]
      },
      "delete": {
        "summary": "Removes an address from the customers address list",
        "operationId": "deleteCustomersAddresseByAddressId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "customerId",
            "description": "ID of the customer",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "addressId",
            "description": "The ID of the address for a customer",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "customers"
        ]
      }
    },
    "/customers/{id}": {
      "delete": {
        "operationId": "deleteCustomerById",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the customer to delete from Shopify.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Delete a customer associated with a given ID from Shopify. Specifying a customer ID that does not exist will result in an error message.",
        "tags": [
          "customers"
        ]
      },
      "get": {
        "operationId": "getCustomerById",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the customer to retrieve from Shopify.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve a customer associated with a given ID from Shopify. Specifying an ID that does not exist will result in an error response.",
        "tags": [
          "customers"
        ]
      },
      "patch": {
        "operationId": "updateCustomerById",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the customer to update in Shopify.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The customer object, with those fields that are to be updated.",
            "in": "body",
            "name": "customer",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerPATCH"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update a customer associated with a given ID in Shopify. The update API uses the PATCH HTTP verb, so only those fields provided in the customer object will be updated, and those fields not provided will be left alone. Providing an ID that does not exist will result in an error response.",
        "tags": [
          "customers"
        ]
      }
    },
    "/customers/{id}/abandoned-checkouts": {
      "get": {
        "operationId": "getCustomersAbandonedCheckouts",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the customer to get abandoned checkouts from in Shopify.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The page number. When this parameter is omitted, 1 is implied.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned.",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/AbandonedCheckout"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Find abandoned checkouts for the customer associated with a given ID. If the customer does not exist, an error response will be returned. If no abandoned checkouts are found in the given customer then an empty array will be returned.",
        "tags": [
          "customers"
        ]
      }
    },
    "/customers/{id}/orders": {
      "get": {
        "operationId": "getCustomersOrders",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the customer to get orders from in Shopify.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The page number. When this parameter is omitted, 1 is implied.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned.",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "$ref": "#/definitions/Order"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Find orders associated with a given customer ID. If the customer does not exist, an error response will be returned. If no orders are found in the given customer then an empty array will be returned.",
        "tags": [
          "customers"
        ]
      }
    },
    "/discount-codes/{code}": {
      "get": {
        "summary": "Retrieve a discount code by name ",
        "operationId": "getDiscountCodeByCode",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/discountCode"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "code",
            "description": "Name of the discount code",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "discount-codes"
        ]
      }
    },
    "/metafields": {
      "post": {
        "summary": "Create a new metafield for a store",
        "operationId": "createMetafield",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/metafields"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/metafieldsPOST"
            },
            "in": "body",
            "name": "body",
            "description": "The metafields object",
            "required": true
          }
        ],
        "tags": [
          "metafields"
        ]
      },
      "get": {
        "summary": "Get metafields that belong to a store",
        "operationId": "getMetafields",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/metafields"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for objects where name equals foo, the search expression will be <i>name='foo'</i>. When this parameter is omitted, all objects are returned in a paginated fashion",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "The page number of resources to retrieve",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "metafields"
        ]
      }
    },
    "/metafields-count": {
      "get": {
        "summary": "Get a count of metafields that belong to a store",
        "operationId": "getMetafieldsCount",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/metafieldsCount"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "metafields-count"
        ]
      }
    },
    "/metafields/{id}": {
      "patch": {
        "summary": "Update a store metafield",
        "operationId": "updateMetafieldById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/metafields"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the metafield",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/metafieldsPATCH"
            },
            "in": "body",
            "name": "body",
            "description": "The metafields object",
            "required": true
          }
        ],
        "tags": [
          "metafields"
        ]
      },
      "get": {
        "summary": "Get a single store metafield by its ID",
        "operationId": "getMetafieldById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/metafields"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The ID of metafields",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "metafields"
        ]
      },
      "delete": {
        "summary": "Delete a store metafield",
        "operationId": "deleteMetafieldById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the metafield",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "metafields"
        ]
      }
    },
    "/objects": {
      "get": {
        "operationId": "getObjects",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Get a list of all the available objects.",
        "tags": [
          "objects"
        ]
      }
    },
    "/objects/{objectName}/metadata": {
      "get": {
        "operationId": "getObjectsObjectNameMetadata",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/objectsMetadata"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Get a list of all the field for an object.",
        "tags": [
          "objects"
        ]
      }
    },
    "/orders": {
      "get": {
        "operationId": "getOrders",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for orders that have been fulfilled, the where parameter would be <i>fulfillment_status='shipped'</i>. When this parameter is omitted, all orders are returned in a paginated fashion.",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The page number. When this parameter is omitted, 1 is implied.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned.",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Optionally return orders in a particular order. Current supported values are 'created_at' and 'updated_at'. By default this returns in ascending order, for descending order use 'updated_at desc'.",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optionally return the total count of orders. Returned in response headers.",
            "in": "query",
            "name": "returnTotalCount",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "$ref": "#/definitions/Order"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Find orders in Shopify, using the provided CEQL search expression.",
        "tags": [
          "orders"
        ]
      },
      "post": {
        "operationId": "createOrder",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Order object to be created.",
            "in": "body",
            "name": "order",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderPOST"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Create a new order in Shopify.",
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/{id}": {
      "delete": {
        "operationId": "deleteOrderById",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the order to delete from Shopify.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Delete an order associated with a given ID from Shopify. Specifying an order ID that does not exist will result in an error message.",
        "tags": [
          "orders"
        ]
      },
      "get": {
        "operationId": "getOrderById",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the order to retrieve from Shopify.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve an order associated with a given ID from Shopify. Specifying an order ID that does not exist will result in an error response.",
        "tags": [
          "orders"
        ]
      },
      "patch": {
        "operationId": "updateOrderById",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the order to update in Shopify.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The order object, with those fields that are to be updated.",
            "in": "body",
            "name": "order",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderPATCH"
            }
          },
          {
            "description": "An action to perform on the order: cancel, reopen or close. If left blank then the order is updated but no action is taken.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an order associated with a given ID in Shopify. Change an order's attributes such as note, email, buyer-accepts-marketing, or remove the customer association. The update API uses the PATCH HTTP verb, so only those fields provided in the order object will be updated, and those fields not provided will be left alone. Updating an order with an ID that does not exist will result in an error response. NOTE: To remove the customer association, set the 'customer' value to null.",
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/{orderId}/fulfillments": {
      "post": {
        "summary": "Creates a fulfillment for the specified order and line items",
        "operationId": "createOrderFulfillment",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/ordersFulfillments"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "orderId",
            "description": "ID of the order",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/ordersFulfillmentsPOST"
            },
            "in": "body",
            "name": "fulfillment",
            "description": "Body of the fulfillment",
            "required": true
          }
        ],
        "tags": [
          "orders"
        ]
      },
      "get": {
        "summary": "Get a list of all fulfillments for an order",
        "operationId": "getOrdersFulfillments",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ordersFulfillments"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "orderId",
            "description": "ID of the order",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for objects where name equals foo, the search expression will be <i>name='foo'</i>. When this parameter is omitted, all objects are returned in a paginated fashion.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "The page number of resources to retrieve",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/{orderId}/fulfillments-count": {
      "get": {
        "summary": "Count all the total number of fulfillments for an order",
        "operationId": "getOrdersFulfillmentsCount",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/ordersFulfillmentsCount"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "orderId",
            "description": "ID of the order",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for objects where name equals foo, the search expression will be <i>name='foo'</i>. When this parameter is omitted, all objects are returned in a paginated fashion.",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/{orderId}/fulfillments/{fulfillmentId}": {
      "patch": {
        "summary": "Update tracking number for a fulfillment",
        "operationId": "updateOrdersFulfillmentByFulfillmentId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/ordersFulfillments"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "orderId",
            "description": "ID of the order",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "fulfillmentId",
            "description": "ID of the fulfillment",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/ordersFulfillmentsPATCH"
            },
            "in": "body",
            "name": "body",
            "description": "Body of the fulfillment to be updated",
            "required": true
          }
        ],
        "tags": [
          "orders"
        ]
      },
      "get": {
        "summary": "Get the representation of a specific fulfillment",
        "operationId": "getOrdersFulfillmentByFulfillmentId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/ordersFulfillments"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "orderId",
            "description": "ID of the order",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "fulfillmentId",
            "description": "ID of the fulfillment",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for objects where name equals foo, the search expression will be <i>name='foo'</i>. When this parameter is omitted, all objects are returned in a paginated fashion.",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/{orderId}/fulfillments/{fulfillmentId}/fulfillment-events": {
      "post": {
        "summary": "Create a fulfillment event",
        "operationId": "createOrderFulfillmentFulfillmentEvent",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/fulfillmentEvents"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "orderId",
            "description": "ID of the order",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "fulfillmentId",
            "description": "ID of the fulfillment",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/fulfillmentEventsPOST"
            },
            "in": "body",
            "name": "body",
            "description": "Body of the fulfillment event",
            "required": true
          }
        ],
        "tags": [
          "orders"
        ]
      },
      "get": {
        "summary": "Get a list of all fulfillment events for a fulfillment",
        "operationId": "getOrdersFulfillmentsFulfillmentEvents",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/fulfillmentEvents"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "orderId",
            "description": "ID of the order",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "fulfillmentId",
            "description": "ID of the fulfillment",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/{orderId}/fulfillments/{fulfillmentId}/fulfillment-events/{eventId}": {
      "get": {
        "summary": "Get a fulfillment event",
        "operationId": "getOrdersFulfillmentsFulfillmentEventByEventId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/fulfillmentEvents"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "orderId",
            "description": "ID of the order",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "fulfillmentId",
            "description": "ID of the fulfillment",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "description": "ID of the event",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "orders"
        ]
      },
      "delete": {
        "summary": "Delete a fulfillment event",
        "operationId": "deleteOrdersFulfillmentsFulfillmentEventByEventId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "orderId",
            "description": "ID of the order",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "fulfillmentId",
            "description": "ID of the fulfillment",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "description": "ID of the event",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/{orderId}/fulfillments/{fulfillmentId}/status-cancel": {
      "patch": {
        "summary": "Cancel a pending fulfillment",
        "operationId": "updateOrdersFulfillmentsStatusCancel",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/ordersFulfillmentsStatusCancel"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "orderId",
            "description": "ID of the order",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "fulfillmentId",
            "description": "ID of the fulfillment",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/{orderId}/fulfillments/{fulfillmentId}/status-complete": {
      "patch": {
        "summary": "Complete a pending fulfillment",
        "operationId": "updateOrdersFulfillmentsStatusComplete",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/ordersFulfillments"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "orderId",
            "description": "ID of the order",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "fulfillmentId",
            "description": "ID of the fulfillment",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/{orderId}/payments": {
      "get": {
        "operationId": "getOrdersPayments",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the order to retrieve payments from in Shopify.",
            "in": "path",
            "name": "orderId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for payments since a particular ID, the where parameter would be <i>since_id=1234</i>. The since_id field is the only supported search field.",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The page number. When this parameter is omitted, 1 is implied.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned.",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "$ref": "#/definitions/Transaction"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Find payments in Shopify, using the provided CEQL search expression.",
        "tags": [
          "orders"
        ]
      },
      "post": {
        "summary": "Create a new transaction",
        "operationId": "createOrderPayment",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/ordersPayments"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "orderId",
            "description": "ID of the order",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/ordersPaymentsPOST"
            },
            "in": "body",
            "name": "body",
            "description": "ID of the order",
            "required": true
          }
        ],
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/{orderId}/payments-count": {
      "get": {
        "summary": "Count all a given order’s money transfers",
        "operationId": "getOrdersPaymentsCount",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/ordersPaymentsCount"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "orderId",
            "description": "ID of the order",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/{orderId}/payments/{paymentId}": {
      "get": {
        "operationId": "getOrdersPaymentByPaymentId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the order to retrieve the payment from in Shopify.",
            "in": "path",
            "name": "orderId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the payment to retrieve the from Shopify.",
            "in": "path",
            "name": "paymentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve a payment associated with a given ID from Shopify. Specifying a payment ID that does not exist will result in an error response.",
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/{orderId}/refunds": {
      "get": {
        "operationId": "getOrdersRefunds",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the order to retrieve refunds from in Shopify.",
            "in": "path",
            "name": "orderId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for refunds since a particular ID, the where parameter would be <i>since_id=1234</i>. The since_id field is the only supported search field.",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The page number. When this parameter is omitted, 1 is implied.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned.",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "$ref": "#/definitions/OrderRefund"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Find refunds in Shopify, using the provided CEQL search expression.",
        "tags": [
          "orders"
        ]
      },
      "post": {
        "summary": "Create a refund for an existing order",
        "operationId": "createOrderRefund",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/ordersRefunds"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "orderId",
            "description": "ID of the order for which order risk is to created",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/ordersRefundsPOST"
            },
            "in": "body",
            "name": "refund",
            "description": "The body of the refund to be created",
            "required": true
          }
        ],
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/{orderId}/refunds-calculate": {
      "post": {
        "summary": "Calculate refund transactions based on line-items and shipping. The returned response can be used to create a refund",
        "operationId": "createOrderRefundsCalculate",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/ordersRefundsCalculate"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "orderId",
            "description": "ID of the order for which order risk is to created",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/ordersRefundsCalculatePOST"
            },
            "in": "body",
            "name": "refund-calculate",
            "description": "The body of the refund-calculate",
            "required": true
          }
        ],
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/{orderId}/refunds/{refundId}": {
      "get": {
        "summary": "Retrieve a specific refund",
        "operationId": "getOrdersRefundByRefundId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/ordersRefunds"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "orderId",
            "description": "ID of the order for which order risk is to created",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "refundId",
            "description": "ID of the refund",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/{orderId}/risks": {
      "post": {
        "summary": "Create a new Order Risk for an Order",
        "operationId": "createOrderRisk",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/ordersRisks"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "orderId",
            "description": "ID of the order for which order risk is to created",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/ordersRisksPOST"
            },
            "in": "body",
            "name": "risk",
            "description": "The fraud risk to be created",
            "required": true
          }
        ],
        "tags": [
          "orders"
        ]
      },
      "get": {
        "summary": "Get a list of all Order Risks",
        "operationId": "getOrdersRisks",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ordersRisks"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "orderId",
            "description": "Id of the order",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/{orderId}/risks/{riskId}": {
      "patch": {
        "summary": "Update an Order Risk entry",
        "operationId": "updateOrdersRiskByRiskId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/ordersRisks"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "orderId",
            "description": "The ID of the order",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "riskId",
            "description": "ID of the risk",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/ordersRisksPATCH"
            },
            "in": "body",
            "name": "risk",
            "description": "The fraud risk body to be updated",
            "required": true
          }
        ],
        "tags": [
          "orders"
        ]
      },
      "get": {
        "summary": "Get a single Order Risk by its ID",
        "operationId": "getOrdersRiskByRiskId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/ordersRisks"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "orderId",
            "description": "ID of the order",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "riskId",
            "description": "ID of the risk",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "orders"
        ]
      },
      "delete": {
        "summary": "Delete an order risk entry",
        "operationId": "deleteOrdersRiskByRiskId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "orderId",
            "description": "ID of the order",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "riskId",
            "description": "ID of the risk",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "orders"
        ]
      }
    },
    "/ping": {
      "get": {
        "operationId": "getPing",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Pong"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Ping the Element to confirm that the Hub Element has a heartbeat.  If the Element does not have a heartbeat, an error message will be returned.",
        "tags": [
          "ping"
        ]
      }
    },
    "/price-rules": {
      "post": {
        "summary": "Add a price rule",
        "operationId": "createPriceRule",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/priceRules"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/priceRulesPOST"
            },
            "in": "body",
            "name": "price-rule",
            "description": "The body of the price rule",
            "required": true
          }
        ],
        "tags": [
          "price-rules"
        ]
      },
      "get": {
        "summary": "List all price rules",
        "operationId": "getPriceRules",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/priceRules"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "description": "The page number. When this parameter is omitted, 1 is implied.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for objects where id equals foo, the search expression will be <i>id='foo'</i>. When this parameter is omitted, all objects are returned in a paginated fashion.",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "price-rules"
        ]
      }
    },
    "/price-rules/{priceRuleId}": {
      "get": {
        "summary": "Get a price rule with a certain id",
        "operationId": "getPriceRuleByPriceRuleId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/priceRules"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "priceRuleId",
            "description": "ID of the price rule",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "price-rules"
        ]
      },
      "delete": {
        "summary": "Remove a price rule",
        "operationId": "deletePriceRuleByPriceRuleId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "priceRuleId",
            "description": "ID of the price rule",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "price-rules"
        ]
      }
    },
    "/price-rules/{priceRuleId}/discount-codes": {
      "post": {
        "summary": "Create a discount code for a given price rule",
        "operationId": "createPriceRuleDiscountCode",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/discountCode"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "priceRuleId",
            "description": "The ID of price rule to receive discount codes for",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/discountCodePOST"
            },
            "in": "body",
            "name": "discount-code",
            "description": "Discount code to be created",
            "required": true
          }
        ],
        "tags": [
          "price-rules"
        ]
      },
      "get": {
        "summary": "Get all discount codes for a given price rule",
        "operationId": "getPriceRulesDiscountCodes",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/discountCode"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "priceRuleId",
            "description": "ID of the price rule to receive discount codes for",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "price-rules"
        ]
      }
    },
    "/price-rules/{priceRuleId}/discount-codes/{discountCodeId}": {
      "get": {
        "summary": "Get all discount code for a given price rule",
        "operationId": "getPriceRulesDiscountCodeByDiscountCodeId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/discountCode"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "priceRuleId",
            "description": "The ID of price rule to receive discount codes for",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "discountCodeId",
            "description": "discountCodeId",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "price-rules"
        ]
      },
      "delete": {
        "summary": "Create a discount code for a given price rule",
        "operationId": "deletePriceRulesDiscountCodeByDiscountCodeId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "priceRuleId",
            "description": "The ID of price rule to receive discount codes for",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "discountCodeId",
            "description": "discount-code ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "price-rules"
        ]
      }
    },
    "/products": {
      "get": {
        "operationId": "getProducts",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for a product from a certain vendor, the where condition would be <i>vendor='My Vendor'</i>. When this parameter is omitted, all products are returned in a paginated fashion. Valid criteria are: since_id, vendor, handle, product_type, collection_id, created_at_min, created_at_max, updated_at_min, updated_at_max, published_at_min, published_at_max, published_status.",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The page number. When this parameter is omitted, 1 is implied.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned.",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Optionally return orders in a particular order. Current supported values are 'created_at' and 'updated_at'. By default this returns in ascending order, for descending order use 'updated_at desc'.",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optionally return the total count of products. Returned in response headers.",
            "in": "query",
            "name": "returnTotalCount",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "$ref": "#/definitions/Product"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Find products in Shopify, using the provided CEQL search expression.",
        "tags": [
          "products"
        ]
      },
      "post": {
        "operationId": "createProduct",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Product object to be created.",
            "in": "body",
            "name": "product",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductPOST"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Create a new product in Shopify.",
        "tags": [
          "products"
        ]
      }
    },
    "/products/{id}": {
      "delete": {
        "operationId": "deleteProductById",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the product to delete from Shopify.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Delete a product associated with a given ID from Shopify. Specifying a product ID that does not exist will result in an error message.",
        "tags": [
          "products"
        ]
      },
      "get": {
        "operationId": "getProductById",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the product to retrieve from Shopify.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve a product associated with a given ID from Shopify. Specifying a product ID that does not exist will result in an error response.",
        "tags": [
          "products"
        ]
      },
      "patch": {
        "operationId": "updateProductById",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the product to update in Shopify.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The product object, with those fields that are to be updated.",
            "in": "body",
            "name": "product",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductPATCH"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update a product associated with a given ID in Shopify. The update API uses the PATCH HTTP verb, so only those fields provided in the product object will be updated, and those fields not provided will be left alone. Providing a product ID that does not exist will result in an error response.",
        "tags": [
          "products"
        ]
      }
    },
    "/products/{id}/variants": {
      "post": {
        "summary": "Create a varient ",
        "operationId": "createProductVariant",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/productsVariants"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The product ID to create a variant for",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/productsVariantsPOST"
            },
            "in": "body",
            "name": "variant",
            "description": "The variant to be created. See model for an example",
            "required": true
          }
        ],
        "tags": [
          "products"
        ]
      },
      "get": {
        "summary": "Get all variants for a given product",
        "operationId": "getProductsVariants",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/productsVariants"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the product to retrieve variants for",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "The size of the page to return (Maximum: 250)",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "The page of results to return",
            "type": "integer",
            "required": false
          }
        ],
        "tags": [
          "products"
        ]
      }
    },
    "/products/{productId}/images": {
      "post": {
        "summary": "Create a new product image and attach it to product variants",
        "operationId": "createProductImage",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/productsImages"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "productId",
            "description": "The ID of the product to create an image for",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/productsImagesPOST"
            },
            "in": "body",
            "name": "image",
            "description": "The image to be uploaded",
            "required": true
          }
        ],
        "tags": [
          "products"
        ]
      },
      "get": {
        "summary": "Get a list of all images for a product",
        "operationId": "getProductsImages",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/productsImages"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "productId",
            "description": "The ID of the product to return images for",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "products"
        ]
      }
    },
    "/products/{productId}/images/{id}": {
      "patch": {
        "summary": "Modify an existing product image",
        "operationId": "updateProductsImageById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/productsImages"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "productId",
            "description": "The ID of the product",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the variant to update",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/productsImagesPATCH"
            },
            "in": "body",
            "name": "image",
            "description": "The variant body to update",
            "required": true
          }
        ],
        "tags": [
          "products"
        ]
      },
      "get": {
        "summary": "Get a single product image by id",
        "operationId": "getProductsImageById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/productsImages"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "productId",
            "description": "The ID of the product",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the image to retrieve",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "products"
        ]
      },
      "delete": {
        "summary": "Delete a product image",
        "operationId": "deleteProductsImageById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "productId",
            "description": "The ID of the product",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the image to delete",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "products"
        ]
      }
    },
    "/products/{productId}/variants/{id}": {
      "delete": {
        "summary": "Delete a variant",
        "operationId": "deleteProductsVariantById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "productId",
            "description": "The ID of the product for delete a variant for",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the variant to delete",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "products"
        ]
      }
    },
    "/query": {
      "get": {
        "operationId": "getQuery",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The search query (i.e. select id, name from contact where name = 'foo')",
            "in": "query",
            "name": "q",
            "required": true,
            "type": "string"
          },
          {
            "description": "The page number. Defaults to 1 if not provided",
            "format": "int64",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The page size. Defaults to 200 if not provided. Maximum of 5000",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Optionally return the total row count of queried data. Returned in response headers.",
            "in": "query",
            "name": "returnTotalCount",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "type": "object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Returns a list of objects based on a set of search parameters.  Here is an example query:  select id, name\t\t\t(Fields of that Object)\nfrom contactX\t\t\t(Name of Object)\nwhere name like '%foo%' \t(Search Expression)\nor name like '%bar%;\t\t(Search Expression continued)\norder by createdDate \t\t(Order of Search)\nlimit 10 \t\t\t(How Many Results to Display)\noffset 0 \t\t\t(Where to start in the list of objects)\nIn this example, I am querying a list of objects from contactX containing the fields id and name where the name contains foo or bar.  The results will be in a list of 10 organized by the date they were created, starting with the earliest.",
        "tags": [
          "query"
        ]
      }
    },
    "/shipping-zones": {
      "get": {
        "summary": "List all shipping zones",
        "operationId": "getShippingZones",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/shippingZonesListObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "The page number of resources to retrieve",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "shipping-zones"
        ]
      }
    },
    "/shops": {
      "get": {
        "operationId": "getShops",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "$ref": "#/definitions/Shop"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve metadata for the current shop",
        "tags": [
          "shops"
        ]
      }
    },
    "/smart-collections": {
      "post": {
        "summary": "Create a new  smart-collections",
        "operationId": "createSmartCollection",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/smartCollections"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/smartCollectionsPOST"
            },
            "in": "body",
            "name": "smart-collections",
            "description": "The smart-collections object",
            "required": true
          }
        ],
        "tags": [
          "smart-collections"
        ]
      },
      "get": {
        "summary": "Get a list of all smart collections",
        "operationId": "getSmartCollections",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/smartCollections"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "The page number of resources to retrieve",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "smart-collections"
        ]
      }
    },
    "/smart-collections/{id}": {
      "patch": {
        "summary": "Update an existing smart-collection",
        "operationId": "updateSmartCollectionById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/smartCollections"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The smart-collections ID",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/smartCollectionsPATCH"
            },
            "in": "body",
            "name": "smart-collections",
            "description": "The smart-collections object",
            "required": true
          }
        ],
        "tags": [
          "smart-collections"
        ]
      },
      "get": {
        "summary": "Retrieve a single smart collection",
        "operationId": "getSmartCollectionById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/smartCollections"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The smart-collections ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "smart-collections"
        ]
      },
      "delete": {
        "summary": "Remove a smart collection from the database",
        "operationId": "deleteSmartCollectionById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The smart-collection ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "smart-collections"
        ]
      }
    },
    "/variants/{id}": {
      "patch": {
        "summary": "Update an existing product variant",
        "operationId": "updateVariantById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/variants"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the variant to update",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/variantsPATCH"
            },
            "in": "body",
            "name": "variant",
            "description": "The variant body to update",
            "required": true
          }
        ],
        "tags": [
          "variants"
        ]
      },
      "get": {
        "summary": "Retrieve a specific variant by ID",
        "operationId": "getVariantById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/variants"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the variant to retrieve",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "variants"
        ]
      }
    },
    "/{objectName}": {
      "get": {
        "operationId": "getByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The object name",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The page number. Defaults to 1 if not provided",
            "format": "int64",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The page size. Defaults to 200 if not provided. Maximum of 5000",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "type": "object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Search for objects",
        "tags": [
          "objectName"
        ]
      },
      "post": {
        "operationId": "createByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The object name",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Create an object",
        "tags": [
          "objectName"
        ]
      }
    },
    "/{objectName}/{id}": {
      "delete": {
        "operationId": "deleteObjectNameById",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The object name",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The object ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Delete an object",
        "tags": [
          "objectName"
        ]
      },
      "get": {
        "operationId": "getObjectNameById",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The object name",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The object ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve an object",
        "tags": [
          "objectName"
        ]
      },
      "patch": {
        "operationId": "updateObjectNameById",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The object name",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The object ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an object",
        "tags": [
          "objectName"
        ]
      }
    },
    "/{objectName}/{id}/metafields": {
      "post": {
        "summary": "Create a new metafield for a resource",
        "operationId": "createObjectNameMetafield",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/metafields"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "objectName",
            "description": "Name of the resource. Metafields are only supported for custom-collections, customers, orders, products, shops and smart-collections resources.",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/metafields"
            },
            "in": "body",
            "name": "body",
            "description": "The body of the metafield for a resource",
            "required": true
          }
        ],
        "tags": [
          "objectName"
        ]
      },
      "get": {
        "summary": "Get a list of all the field for an object",
        "operationId": "getObjectNameMetafields",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/objectmetafields"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "objectName",
            "description": "Name of the resource. Metafields are only supported for custom-collections, customers, orders, products, shops and smart-collections resources.",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "objectName"
        ]
      }
    },
    "/{objectName}/{id}/metafields-count": {
      "get": {
        "summary": "Get a count of metafields that belong to a resource",
        "operationId": "getObjectNameMetafieldsCount",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/metafieldsCount"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "objectName",
            "description": "Name of the resource. Metafields are only supported for custom-collections, customers, orders, products, shops and smart-collections resources.",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of the resource",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "objectName"
        ]
      }
    },
    "/{objectName}/{id}/metafields/{metafieldId}": {
      "patch": {
        "summary": "Update a resource metafield",
        "operationId": "updateObjectNameMetafieldByMetafieldId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/metafields"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "objectName",
            "description": "Name of the resource. Metafields are only supported for custom-collections, customers, orders, products, shops and smart-collections resources.",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of a resource",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "metafieldId",
            "description": "ID of the metafield belonging to a resource",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/metafields"
            },
            "in": "body",
            "name": "body",
            "description": "The body of the metafield for a resource",
            "required": true
          }
        ],
        "tags": [
          "objectName"
        ]
      },
      "get": {
        "summary": "Get a single resource metafield by its ID",
        "operationId": "getObjectNameMetafieldByMetafieldId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/metafields"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "objectName",
            "description": "Name of the resource. Metafields are only supported for custom-collections, customers, orders, products, shops and smart-collections resources.",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of a resource",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "metafieldId",
            "description": "ID of the metafield belonging to a resource",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "objectName"
        ]
      },
      "delete": {
        "summary": "Delete a resource metafield",
        "operationId": "deleteObjectNameMetafieldByMetafieldId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "objectName",
            "description": "Name of the resource. Metafields are only supported for custom-collections, customers, orders, products, shops and smart-collections resources.",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of a resource",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "metafieldId",
            "description": "ID of the metafield belonging to a resource",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "objectName"
        ]
      }
    },
    "/{objectName}/{objectId}": {
      "delete": {
        "operationId": "deleteObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Delete an {objectName}",
        "tags": [
          "objectName"
        ]
      },
      "get": {
        "operationId": "getObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/pdf"
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve an {objectName}",
        "tags": [
          "objectName"
        ]
      },
      "patch": {
        "operationId": "updateObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {objectName}",
        "tags": [
          "objectName"
        ]
      },
      "put": {
        "operationId": "replaceObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {objectName}",
        "tags": [
          "objectName"
        ]
      }
    },
    "/{objectName}/{objectId}/{childObjectName}": {
      "get": {
        "operationId": "getObjectNameByChildObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression.",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The page number. Defaults to 1 if not provided.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The page size. Defaults to 200 if not provided. Maximum of 5000.",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "$ref": "#/definitions/Object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Search for {childObjectName}",
        "tags": [
          "objectName"
        ]
      },
      "post": {
        "operationId": "createObjectNameByChildObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Create an {childObjectName}",
        "tags": [
          "objectName"
        ]
      }
    },
    "/{objectName}/{objectId}/{childObjectName}/{childObjectId}": {
      "delete": {
        "operationId": "deleteObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Delete an {childObjectName}",
        "tags": [
          "objectName"
        ]
      },
      "get": {
        "operationId": "getObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve an {childObjectName}",
        "tags": [
          "objectName"
        ]
      },
      "patch": {
        "operationId": "updateObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {childObjectName}",
        "tags": [
          "objectName"
        ]
      },
      "put": {
        "operationId": "replaceObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {childObjectName}",
        "tags": [
          "objectName"
        ]
      }
    }
  },
  "host": "staging.cloud-elements.com",
  "schemes": [
    "https"
  ],
  "definitions": {
    "lineItemTaxLine": {
      "properties": {
        "compare_at": {
          "type": "string"
        },
        "position": {
          "description": "The rate of tax to be applied",
          "format": "int32",
          "type": "integer"
        },
        "price": {
          "description": " The amount of tax to be charged",
          "type": "string",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "rate": {
          "description": "The rate of tax to be applied",
          "format": "float",
          "type": "number"
        },
        "source": {
          "type": "string"
        },
        "title": {
          "description": "The name of the tax",
          "type": "string",
          "x-name": true
        },
        "zone": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Address": {
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "addresses",
      "description": "A customer address resource instance represents one of the many addresses a customer may have",
      "properties": {
        "address1": {
          "type": "string",
          "x-sub-format": "Street Number",
          "description": "The customer's mailing address"
        },
        "address2": {
          "type": "string",
          "x-sub-format": "Street Name",
          "description": "An additional field for the customer's mailing address"
        },
        "city": {
          "type": "string",
          "description": " The customer's city",
          "x-sub-format": "City"
        },
        "name": {
          "type": "string",
          "description": "The customer's name",
          "x-sub-format": "Full Name"
        },
        "company": {
          "type": "string",
          "description": "The customer's company",
          "x-sub-format": "Company Name"
        },
        "country": {
          "type": "string",
          "description": "The customer's country",
          "x-sub-format": "Country",
          "x-conditionally-required-description": "If province or province_code is present then either country or country_code must be present"
        },
        "country_code": {
          "type": "string",
          "description": "The two-letter country code corresponding to the customer's country",
          "x-sub-format": "Country Code",
          "enum": [
            "AD",
            "AE",
            "AF",
            "AG",
            "AI",
            "AL",
            "AM",
            "AO",
            "AQ",
            "AR",
            "AS",
            "AT",
            "AU",
            "AW",
            "AX",
            "AZ",
            "BA",
            "BB",
            "BD",
            "BE",
            "BF",
            "BG",
            "BH",
            "BI",
            "BJ",
            "BL",
            "BM",
            "BN",
            "BO",
            "BQ",
            "BR",
            "BS",
            "BT",
            "BV",
            "BW",
            "BY",
            "BZ",
            "CA",
            "CC",
            "CD",
            "CF",
            "CG",
            "CH",
            "CI",
            "CK",
            "CL",
            "CM",
            "CN",
            "CO",
            "CR",
            "CU",
            "CV",
            "CW",
            "CX",
            "CY",
            "CZ",
            "DE",
            "DJ",
            "DK",
            "DM",
            "DO",
            "DZ",
            "EC",
            "EE",
            "EG",
            "EH",
            "ER",
            "ES",
            "ET",
            "FI",
            "FJ",
            "FK",
            "FM",
            "FO",
            "FR",
            "GA",
            "GB",
            "GD",
            "GE",
            "GF",
            "GG",
            "GH",
            "GI",
            "GL",
            "GM",
            "GN",
            "GP",
            "GQ",
            "GR",
            "GS",
            "GT",
            "GU",
            "GW",
            "GY",
            "HK",
            "HM",
            "HN",
            "HR",
            "HT",
            "HU",
            "ID",
            "IE",
            "IL",
            "IM",
            "IN",
            "IO",
            "IQ",
            "IR",
            "IS",
            "IT",
            "JE",
            "JM",
            "JO",
            "JP",
            "KE",
            "KG",
            "KH",
            "KI",
            "KM",
            "KN",
            "KP",
            "KR",
            "KW",
            "KY",
            "KZ",
            "LA",
            "LB",
            "LC",
            "LI",
            "LK",
            "LR",
            "LS",
            "LT",
            "LU",
            "LV",
            "LY",
            "MA",
            "MC",
            "MD",
            "ME",
            "MF",
            "MG",
            "MH",
            "MK",
            "ML",
            "MM",
            "MN",
            "MO",
            "MP",
            "MQ",
            "MR",
            "MS",
            "MT",
            "MU",
            "MV",
            "MW",
            "MX",
            "MY",
            "MZ",
            "NA",
            "NC",
            "NE",
            "NF",
            "NG",
            "NI",
            "NL",
            "NO",
            "NP",
            "NR",
            "NU",
            "NZ",
            "OM",
            "PA",
            "PE",
            "PF",
            "PG",
            "PH",
            "PK",
            "PL",
            "PM",
            "PN",
            "PR",
            "PS",
            "PT",
            "PW",
            "PY",
            "QA",
            "RE",
            "RO",
            "RS",
            "RU",
            "RW",
            "SA",
            "SB",
            "SC",
            "SD",
            "SE",
            "SG",
            "SH",
            "SI",
            "SJ",
            "SK",
            "SL",
            "SM",
            "SN",
            "SO",
            "SR",
            "SS",
            "ST",
            "SV",
            "SX",
            "SY",
            "SZ",
            "TC",
            "TD",
            "TF",
            "TG",
            "TH",
            "TJ",
            "TK",
            "TL",
            "TM",
            "TN",
            "TO",
            "TR",
            "TT",
            "TV",
            "TW",
            "TZ",
            "UA",
            "UG",
            "UM",
            "US",
            "UY",
            "UZ",
            "VA",
            "VC",
            "VE",
            "VG",
            "VI",
            "VN",
            "VU",
            "WF",
            "WS",
            "YE",
            "YT",
            "ZA",
            "ZM",
            "ZW"
          ],
          "x-conditionally-required-description": "If province or province_code is present then either country or country_code must be present"
        },
        "first_name": {
          "type": "string",
          "description": "The customer's first name",
          "x-sub-format": "First Name"
        },
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "A unique numeric identifier for the address"
        },
        "last_name": {
          "type": "string",
          "description": "The customer's last name",
          "x-sub-format": "Last Name"
        },
        "phone": {
          "type": "string",
          "description": "The customer's phone number for this mailing address",
          "x-sub-format": "Phone"
        },
        "province": {
          "type": "string",
          "description": "The customer's province or state name",
          "x-sub-format": "State"
        },
        "province_code": {
          "type": "string",
          "description": "The two-letter pcode for the customer's province or state",
          "x-sub-format": "State (abbrev)"
        },
        "zip": {
          "type": "string",
          "description": "The customer's zip or postal code",
          "x-sub-format": "Postal Code"
        },
        "default": {
          "type": "boolean"
        },
        "country_name": {
          "type": "string",
          "x-sub-format": "Country"
        },
        "customer_id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "A unique numeric identifier for the customer",
          "x-reference-objectname": "customer"
        },
        "latitude": {
          "format": "double",
          "type": "number",
          "x-sub-format": "Latitude",
          "description": "The latitude of the billing address"
        },
        "longitude": {
          "format": "double",
          "type": "number",
          "x-sub-format": "Longitude",
          "description": "The longitude of the billing address"
        }
      },
      "type": "object"
    },
    "productsImages": {
      "description": "Products are easier to sell if customers can see pictures of them, which is why there are product images.Any product may  have up to 250 images, and images can be in .png, .gif or .jpg format",
      "properties": {
        "created_at": {
          "description": "Date and time when the image was created",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "height": {
          "description": "Height dimension of the image which is determined on upload",
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "description": "A unique numeric identifier for the product image",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "position": {
          "description": "The order of the product image in the list. The first product image is at position 1 and is the 'main' image for the product",
          "format": "int32",
          "type": "integer"
        },
        "product_id": {
          "description": "The id of the product associated with the image",
          "format": "int64",
          "type": "integer",
          "x-readonly": true,
          "x-reference-objectname": "product"
        },
        "src": {
          "description": "Specifies the location of the product image",
          "type": "string",
          "x-sub-format": "URL"
        },
        "updated_at": {
          "description": "The date and time when the product image was last modified",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "variant_ids": {
          "description": "An array of variant ids associated with the image",
          "items": {
            "format": "int64",
            "type": "integer",
            "x-reference-objectname": "variants"
          },
          "type": "array",
          "x-readonly": true
        },
        "width": {
          "description": "Width dimension of the image which is determined on upload",
          "format": "int32",
          "type": "integer"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "images",
      "type": "object"
    },
    "Customer": {
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "customer",
      "description": "A customer resource instance represents a customer account with the shop.",
      "x-searchable": true,
      "properties": {
        "accepts_marketing": {
          "type": "boolean",
          "description": "Indicates whether the customer has consented to be sent marketing material via email. Valid values are true or false",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "addresses": {
          "items": {
            "$ref": "#/definitions/Address",
            "x-reference-objectname": "addresses"
          },
          "type": "array",
          "description": "A list of the ten most recently updated addresses for the customer"
        },
        "created_at": {
          "format": "date-time",
          "x-readonly": true,
          "type": "string",
          "x-sub-format": "Date Time - ISO 8601",
          "description": "The date and time when the customer was created.The API returns this value in ISO 8601 format"
        },
        "default_address": {
          "$ref": "#/definitions/Address",
          "description": "The default address for the customer",
          "x-reference-objectname": "addresses"
        },
        "email": {
          "type": "string",
          "description": "The unique email address of the customer. Attempting to assign the same email address to multiple customers will return an error",
          "x-sub-format": "Email",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "metafields": {
          "items": {
            "$ref": "#/definitions/MetaField",
            "x-reference-objectname": "metafields"
          },
          "type": "array",
          "description": "Attaches additional metadata to a shop's resources"
        },
        "first_name": {
          "type": "string",
          "x-name": true,
          "description": "The customer's first name",
          "x-sub-format": "First Name",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "A unique numeric identifier for the customer",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "last_name": {
          "type": "string",
          "description": "The customer's last name",
          "x-sub-format": "Last Name",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "last_order_id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "The id of the customer's last order"
        },
        "last_order_name": {
          "x-readOnly": true,
          "type": "string",
          "description": "The name of the customer's last order. This is directly related to the Order's name field"
        },
        "note": {
          "type": "string",
          "description": "A note about the customer"
        },
        "orders_count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of orders associated with this customer",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "multipass_identifier": {
          "type": "string",
          "description": "The customer's identifier used with Multipass login"
        },
        "phone": {
          "type": "string",
          "description": "The unique phone number for this customer. Attempting to assign the same phone number to multiple customers will return an error",
          "x-sub-format": "Phone",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "tax_exempt": {
          "type": "boolean",
          "description": "Indicates whether the customer should be charged taxes when placing orders. Valid values are true or false"
        },
        "state": {
          "type": "string",
          "description": "The state of the customer's account in a shop. The state can be changed in the shop admin or by the customer, but not through the API",
          "enum": [
            "disabled",
            "invited",
            "enabled",
            "declined"
          ],
          "x-sub-format": "Enum",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "tags": {
          "type": "string",
          "description": "Tags are additional short descriptors formatted as a string of comma-separated values. For example, if an article has three tags: tag1, tag2, tag3."
        },
        "total_spent": {
          "type": "string",
          "description": "The total amount of money that the customer has spent at the shop",
          "x-sub-format": "Money",
          "x-precision": 2,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "updated_at": {
          "x-readOnly": true,
          "format": "date-time",
          "type": "string",
          "x-sub-format": "Date Time - ISO 8601",
          "description": "The date and time when the customer information was updated. The API returns this value in ISO 8601 format",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "verified_email": {
          "type": "boolean",
          "description": "States whether or not the email address has been verified"
        }
      },
      "type": "object"
    },
    "CustomerPATCH": {
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "customer",
      "description": "A customer resource instance represents a customer account with the shop.",
      "properties": {
        "accepts_marketing": {
          "type": "boolean",
          "description": "Indicates whether the customer has consented to be sent marketing material via email. Valid values are true or false",
          "x-conditionally-required-description": "At least one of the accepts_marketing,addresses,default_address,email,first_name,last_name,note,phone,tax_exempt,tags fields must be provided for successful PATCH request"
        },
        "addresses": {
          "items": {
            "$ref": "#/definitions/Address",
            "x-reference-objectname": "addresses"
          },
          "type": "array",
          "description": "A list of the ten most recently updated addresses for the customer",
          "x-conditionally-required-description": "At least one of the accepts_marketing,addresses,default_address,email,first_name,last_name,note,phone,tax_exempt,tags fields must be provided for successful PATCH request"
        },
        "default_address": {
          "$ref": "#/definitions/Address",
          "description": "The default address for the customer",
          "x-reference-objectname": "addresses",
          "x-conditionally-required-description": "At least one of the accepts_marketing,addresses,default_address,email,first_name,last_name,note,phone,tax_exempt,tags fields must be provided for successful PATCH request"
        },
        "email": {
          "type": "string",
          "description": "The unique email address of the customer. Attempting to assign the same email address to multiple customers will return an error",
          "x-sub-format": "Email",
          "x-conditionally-required-description": "At least one of the accepts_marketing,addresses,default_address,email,first_name,last_name,note,phone,tax_exempt,tags fields must be provided for successful PATCH request"
        },
        "metafields": {
          "items": {
            "$ref": "#/definitions/MetaFieldPOST",
            "x-reference-objectname": "metafields"
          },
          "type": "array",
          "description": "Attaches additional metadata to a shop's resources"
        },
        "first_name": {
          "type": "string",
          "description": "The customer's first name",
          "x-name": true,
          "x-sub-format": "First Name",
          "x-conditionally-required-description": "At least one of the accepts_marketing,addresses,default_address,email,first_name,last_name,note,phone,tax_exempt,tags fields must be provided for successful PATCH request"
        },
        "last_name": {
          "type": "string",
          "description": "The customer's last name",
          "x-sub-format": "Last Name",
          "x-conditionally-required-description": "At least one of the accepts_marketing,addresses,default_address,email,first_name,last_name,note,phone,tax_exempt,tags fields must be provided for successful PATCH request"
        },
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "A unique numeric identifier for the customer"
        },
        "note": {
          "type": "string",
          "description": "A note about the customer",
          "x-nullable": true,
          "x-conditionally-required-description": "At least one of the accepts_marketing,addresses,default_address,email,first_name,last_name,note,phone,tax_exempt,tags fields must be provided for successful PATCH request"
        },
        "phone": {
          "type": "string",
          "description": "The unique phone number for this customer. Attempting to assign the same phone number to multiple customers will return an error",
          "x-sub-format": "Phone",
          "x-conditionally-required-description": "At least one of the accepts_marketing,addresses,default_address,email,first_name,last_name,note,phone,tax_exempt,tags fields must be provided for successful PATCH request"
        },
        "tax_exempt": {
          "type": "boolean",
          "description": "Indicates whether the customer should be charged taxes when placing orders. Valid values are true or false",
          "x-conditionally-required-description": "At least one of the accepts_marketing,addresses,default_address,email,first_name,last_name,note,phone,tax_exempt,tags fields must be provided for successful PATCH request"
        },
        "tags": {
          "type": "string",
          "description": "Tags are additional short descriptors formatted as a string of comma-separated values. For example, if an article has three tags: tag1, tag2, tag3.",
          "x-nullable": true,
          "x-conditionally-required-description": "At least one of the accepts_marketing,addresses,default_address,email,first_name,last_name,note,phone,tax_exempt,tags fields must be provided for successful PATCH request"
        }
      },
      "type": "object"
    },
    "Product": {
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "product",
      "description": "The Product resource lets you update and create products in a merchant's store",
      "x-searchable": true,
      "properties": {
        "metafields": {
          "items": {
            "$ref": "#/definitions/MetaField"
          },
          "type": "array",
          "description": "Metafields allow you to attach metadata, which is additional information, to a store's resources"
        },
        "metafields_global_description_tag": {
          "type": "string",
          "description": "Description of the product used for SEO purposes"
        },
        "metafields_global_title_tag": {
          "type": "string",
          "description": "Name of the product used for SEO purposes"
        },
        "body_html": {
          "type": "string",
          "description": "Description of the product. Supports HTML formatting"
        },
        "created_at": {
          "description": "Date and time when the product was created.The API returns this value in ISO 8601 format",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "handle": {
          "type": "string",
          "description": "Human-friendly unique string for the product. Automatically generated from the product's title",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "Unique numeric identifier for the product"
        },
        "image": {
          "$ref": "#/definitions/Image"
        },
        "images": {
          "items": {
            "$ref": "#/definitions/Image"
          },
          "type": "array",
          "description": "List of image objects, each one representing an image associated with the product"
        },
        "options": {
          "items": {
            "$ref": "#/definitions/Option"
          },
          "type": "array",
          "description": "Custom product property names like Size, Color, and Material. Products are based on permutations of these options. (maximum: 3 options, 255 characters each)"
        },
        "product_type": {
          "type": "string",
          "description": "Categorization that a product can be tagged with, commonly used for filtering and searching",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "published": {
          "type": "boolean"
        },
        "published_at": {
          "description": "Date and time when the product was published to the Online Store channel. The API returns this value in ISO 8601 format",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601",
          "x-nullable": true
        },
        "published_scope": {
          "type": "string",
          "description": "Indicates whether the product is published to the Point of Sale channel",
          "enum": [
            "web",
            "global"
          ],
          "x-sub-format": "Enum"
        },
        "tags": {
          "type": "string",
          "description": "Categorization that a product can be tagged with. Commonly used for filtering and searching",
          "x-length": 255
        },
        "template_suffix": {
          "type": "string",
          "description": "Suffix of the Liquid template being used"
        },
        "title": {
          "type": "string",
          "description": "Name of the product",
          "x-name": true,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "updated_at": {
          "description": "Date and time when the product was last modified. The API returns this value in ISO 8601 format",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "variants": {
          "items": {
            "$ref": "#/definitions/Variant"
          },
          "type": "array",
          "description": "List of variant objects, each one representing a slightly different version of the product"
        },
        "vendor": {
          "type": "string",
          "description": "Name of the vendor of the product",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        }
      },
      "type": "object"
    },
    "variants": {
      "properties": {
        "barcode": {
          "type": "string"
        },
        "compare_at_price": {
          "type": "string"
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        },
        "fulfillment_service": {
          "type": "string"
        },
        "grams": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "image_id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "inventory_management": {
          "type": "string"
        },
        "inventory_policy": {
          "type": "string"
        },
        "inventory_quantity": {
          "format": "int32",
          "type": "integer"
        },
        "inventory_quantity_adjustment": {
          "type": "string"
        },
        "old_inventory_quantity": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true
        },
        "option1": {
          "type": "string"
        },
        "option2": {
          "type": "string"
        },
        "option3": {
          "type": "string"
        },
        "position": {
          "format": "int32",
          "type": "integer"
        },
        "price": {
          "type": "string"
        },
        "product_id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "requires_shipping": {
          "type": "boolean"
        },
        "sku": {
          "type": "string"
        },
        "taxable": {
          "type": "boolean"
        },
        "title": {
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        },
        "weight": {
          "format": "double",
          "type": "number"
        },
        "weight_unit": {
          "type": "string"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "variants",
      "type": "object"
    },
    "Image": {
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "images",
      "description": "Products are easier to sell if customers can see pictures of them, which is why there are product images.Any product may  have up to 250 images, and images can be in .png, .gif or .jpg format",
      "properties": {
        "created_at": {
          "description": "Date and time when the image was created",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "A unique numeric identifier for the product image"
        },
        "position": {
          "type": "integer",
          "format": "int32",
          "description": "The order of the product image in the list. The first product image is at position 1 and is the 'main' image for the product"
        },
        "product_id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "The id of the product associated with the image",
          "x-reference-objectname": "product"
        },
        "src": {
          "type": "string",
          "description": "Specifies the location of the product image",
          "x-sub-format": "URL"
        },
        "updated_at": {
          "x-readonly": true,
          "description": "The date and time when the product image was last modified",
          "format": "date-time",
          "type": "string",
          "x-sub-format": "Date Time - ISO 8601"
        },
        "variant_ids": {
          "x-readonly": true,
          "items": {
            "type": "integer",
            "format": "int64",
            "x-reference-objectname": "variants"
          },
          "type": "array",
          "description": "An array of variant ids associated with the image"
        },
        "width": {
          "type": "integer",
          "format": "int32",
          "description": "Width dimension of the image which is determined on upload"
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "Height dimension of the image which is determined on upload"
        }
      },
      "type": "object"
    },
    "paymentsReceipt": {
      "properties": {},
      "type": "object"
    },
    "productsImagesPOST": {
      "description": "Products are easier to sell if customers can see pictures of them, which is why there are product images.Any product may  have up to 250 images, and images can be in .png, .gif or .jpg format",
      "properties": {
        "attachment": {
          "description": "The base64 encoded image",
          "type": "string",
          "x-conditionally-required-description": "Either attachment or src must be present for a successful Post request",
          "x-sub-format": "Image URL (base 64)"
        },
        "id": {
          "description": "A unique numeric identifier for the product image",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "position": {
          "description": "The order of the product image in the list. The first product image is at position 1 and is the 'main' image for the product",
          "format": "int32",
          "type": "integer"
        },
        "src": {
          "description": "Specifies the location of the product image",
          "type": "string",
          "x-conditionally-required-description": "Either attachment or src must be present for a successful Post request",
          "x-sub-format": "URL"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "images",
      "type": "object"
    },
    "discountCodePOST": {
      "properties": {
        "code": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "usage_count": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true
        }
      },
      "required": [
        "code"
      ],
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "discount_codes",
      "type": "object"
    },
    "refundOrderAdjustments": {
      "properties": {
        "amount": {
          "type": "string",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "kind": {
          "type": "string"
        },
        "order_id": {
          "format": "int64",
          "type": "integer",
          "x-readonly": true,
          "x-reference-objectname": "order"
        },
        "reason": {
          "type": "string"
        },
        "refund_id": {
          "format": "int64",
          "type": "integer",
          "x-readonly": true,
          "x-reference-objectname": "refunds"
        },
        "tax_amount": {
          "type": "string",
          "x-precision": 2,
          "x-sub-format": "Money"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "type": "object"
    },
    "OrderClientDetails": {
      "description": "An object containing information about the client",
      "properties": {
        "accept_language": {
          "type": "string",
          "x-nullable": true
        },
        "browser_height": {
          "type": "string",
          "x-nullable": true,
          "description": "The browser screen height in pixels, if available"
        },
        "browser_ip": {
          "type": "string",
          "description": "The browser IP address",
          "x-sub-format": "IP Address v4"
        },
        "browser_width": {
          "type": "string",
          "x-nullable": true,
          "description": "The browser screen width in pixels, if available"
        },
        "session_hash": {
          "type": "string",
          "x-nullable": true,
          "description": "A hash of the session"
        },
        "user_agent": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "AbandonedCheckout": {
      "x-primary-key": [
        "id"
      ],
      "description": " A checkout is considered abandoned when a customer has entered their billing & shipping info, but has yet to complete the purchase",
      "x-vendor-objectname": "checkout",
      "properties": {
        "gateway": {
          "type": "string",
          "description": "The payment gateway used"
        },
        "note_attributes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "completed_at": {
          "format": "date-time",
          "type": "string",
          "x-sub-format": "Date Time - ISO 8601",
          "x-readonly": true
        },
        "cancel_reason": {
          "type": "boolean",
          "x-nullable": true,
          "description": "The reason why the order was cancelled. If the order was not cancelled, this value is null.If the order was cancelled, the value will be one of the customer,fraud,inventory,other",
          "enum": [
            "customer",
            "fraud",
            "inventory",
            "other",
            "null"
          ],
          "x-sub-format": "Enum"
        },
        "closed_at": {
          "format": "date-time",
          "type": "string",
          "x-sub-format": "Date Time - ISO 8601",
          "x-readonly": true,
          "description": "The date and time when the order was closed.If the order was not closed, this value is null",
          "x-nullable": true
        },
        "abandoned_checkout_url": {
          "type": "string",
          "x-sub-format": "Url",
          "description": "The full recovery URL to be sent to a customer to recover their abandoned checkout"
        },
        "billing_address": {
          "$ref": "#/definitions/Address",
          "x-reference-objectname": "addresses",
          "description": "The mailing address associated with the payment method"
        },
        "buyer_accepts_marketing": {
          "type": "boolean",
          "description": "Indicates whether or not the person who placed the order would like to receive email updates from the shop"
        },
        "cart_token": {
          "type": "string",
          "description": "Unique identifier for a particular cart that is attached to a particular order"
        },
        "created_at": {
          "description": "The date and time when the order was created. The API returns this value in ISO 8601 format",
          "format": "date-time",
          "type": "string",
          "x-sub-format": "Date Time - ISO 8601",
          "x-readonly": true
        },
        "currency": {
          "type": "string",
          "x-sub-format": "Currency Code",
          "description": "The three letter code (ISO 4217) for the currency used for the payment",
          "enum": [
            "AFA",
            "ALL",
            "DZD",
            "USD",
            "ESP",
            "AOA",
            "XCD",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZM",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYB",
            "BEF",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BAM",
            "BWP",
            "NOK",
            "BRL",
            "BND",
            "BGL,BGN",
            "BIF",
            "KHR",
            "XAF",
            "CAD",
            "CVE",
            "KYD",
            "CLP",
            "CLF",
            "CNY",
            "HKD",
            "MOP",
            "COP",
            "KMF",
            "CDF",
            "NZD",
            "CRC",
            "HRK",
            "CUP",
            "CYP",
            "CZK",
            "DKK",
            "DJF",
            "DOP",
            "TPE",
            "IDE",
            "ECS",
            "ECV",
            "EGP",
            "SVC",
            "ERN",
            "EEK",
            "ETB",
            "XEU",
            "EUR",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XPF",
            "GMD",
            "GEL",
            "DEM",
            "GHC",
            "GIP",
            "GRD",
            "GTQ",
            "GNF",
            "GWP",
            "GYD",
            "HTG",
            "ITL",
            "HNL",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "XDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KPW",
            "KRW",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LBP",
            "ZAR",
            "LSL",
            "LRD",
            "LYD",
            "CHF",
            "LTL",
            "LUF",
            "MKD",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MTL",
            "MRO",
            "MUR",
            "MXN",
            "MXV",
            "MDL",
            "MNT",
            "MAD",
            "MZM",
            "MMK",
            "NPR",
            "ANG",
            "NLG",
            "NIO",
            "NGN",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "QAR",
            "ROL",
            "RUR",
            "RWF",
            "SHP",
            "WST",
            "STD",
            "SAR",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "LKR",
            "SDP",
            "SRG",
            "SZL",
            "SEK",
            "SYP",
            "TWD",
            "TJR",
            "TZS",
            "THB",
            "TOP",
            "TTD",
            "TND",
            "TRL",
            "TMM",
            "UGX",
            "UAH",
            "AED",
            "GBP",
            "USS",
            "USN",
            "UYU",
            "UZS",
            "VUV",
            "VEB",
            "VND",
            "YER",
            "YUN",
            "ZRN",
            "ZMK",
            "ZWD",
            "ADP",
            "NAD",
            "RUB",
            "RYR",
            "BOV"
          ]
        },
        "customer": {
          "$ref": "#/definitions/Customer",
          "description": "An object containing information about the customer"
        },
        "discount_codes": {
          "items": {
            "$ref": "#/definitions/AbandonedChkoutDiscount_code",
            "description": "Applicable discount codes that can be applied to the order. If no codes exist the value will default to blank"
          },
          "type": "array"
        },
        "email": {
          "type": "string",
          "description": "The customer's email address",
          "x-sub-format": "Email"
        },
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int32",
          "description": "The unique numeric identifier for the order. This one is used for API purposes. This is different from the order_number property, which is also a unique numeric identifier for the order, but used by the shop owner and customer"
        },
        "landing_site": {
          "type": "string",
          "x-sub-format": "Url",
          "description": "The URL for the page where the buyer landed when entering the shop"
        },
        "line_items": {
          "items": {
            "$ref": "#/definitions/AbandonedChkoutLineItem"
          },
          "type": "array",
          "description": "A list of line item objects, each one containing information about an item in the order"
        },
        "name": {
          "type": "string"
        },
        "note": {
          "type": "string",
          "description": "The text of an optional note that a shop owner can attach to the order"
        },
        "referring_site": {
          "type": "string",
          "x-sub-format": "Url",
          "description": "The website that the customer clicked on to come to the shop"
        },
        "shipping_address": {
          "$ref": "#/definitions/Address",
          "x-reference-objectname": "addresses",
          "description": "The mailing address to where the order will be shipped"
        },
        "shipping_lines": {
          "items": {
            "$ref": "#/definitions/AbandonedChkoutShippingLine"
          },
          "type": "array",
          "description": "An array of shipping_line objects, each of which details the shipping methods used"
        },
        "source_name": {
          "type": "string",
          "description": "Where the checkout originated",
          "enum": [
            "web",
            "pos",
            "iphone",
            "android"
          ],
          "x-sub-format": "Enum"
        },
        "subtotal_price": {
          "type": "string",
          "description": "Price of the order before shipping and taxes",
          "x-sub-format": "Money",
          "x-precision": 2
        },
        "tax_lines": {
          "items": {
            "$ref": "#/definitions/LineItemTaxLine"
          },
          "type": "array",
          "description": "An array of tax_line objects, each of which details the taxes applicable to the order"
        },
        "taxes_included": {
          "type": "boolean"
        },
        "token": {
          "type": "string",
          "description": "Unique identifier for a particular order"
        },
        "total_discounts": {
          "type": "string",
          "x-sub-format": "Money",
          "description": "The total amount of the discounts to be applied to the price of the order",
          "x-precision": 2
        },
        "total_line_items_price": {
          "type": "string",
          "x-sub-format": "Money",
          "description": "The sum of all the prices of all the items in the order",
          "x-precision": 2
        },
        "total_price": {
          "type": "string",
          "x-sub-format": "Money",
          "description": "The sum of all the prices of all the items in the order, taxes and discounts included",
          "x-precision": 2
        },
        "total_tax": {
          "type": "string",
          "description": "The sum of all the taxes applied to the line items in the order",
          "x-precision": 2
        },
        "total_weight": {
          "type": "integer",
          "format": "int32",
          "description": "The sum of all the weights of the line items in the order, in grams"
        },
        "updated_at": {
          "description": "Date and time when the checkout was updated. ISO 8601 format (ex: 2008-01-10T11:00:00-05:00).",
          "format": "date-time",
          "type": "string",
          "x-sub-format": "Date Time - ISO 8601",
          "x-readonly": true
        }
      },
      "type": "object"
    },
    "ordersPaymentsCount": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer",
          "x-readonly": true
        }
      },
      "x-vendor-objectname": "transaction",
      "type": "object"
    },
    "TransactionPATCH": {
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "transaction",
      "description": " An object containing information about the payment",
      "properties": {
        "amount": {
          "type": "string",
          "description": "The amount of money that the transaction was for",
          "x-sub-format": "Money",
          "x-precision": 2,
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "authorization": {
          "type": "string",
          "description": "The authorization code associated with the transaction",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "currency": {
          "type": "string",
          "description": "The three letter code (ISO 4217) for the currency used for the payment",
          "x-sub-format": "Currency Code",
          "enum": [
            "AFA",
            "ALL",
            "DZD",
            "USD",
            "ESP",
            "AOA",
            "XCD",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZM",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYB",
            "BEF",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BAM",
            "BWP",
            "NOK",
            "BRL",
            "BND",
            "BGL,BGN",
            "BIF",
            "KHR",
            "XAF",
            "CAD",
            "CVE",
            "KYD",
            "CLP",
            "CLF",
            "CNY",
            "HKD",
            "MOP",
            "COP",
            "KMF",
            "CDF",
            "NZD",
            "CRC",
            "HRK",
            "CUP",
            "CYP",
            "CZK",
            "DKK",
            "DJF",
            "DOP",
            "TPE",
            "IDE",
            "ECS",
            "ECV",
            "EGP",
            "SVC",
            "ERN",
            "EEK",
            "ETB",
            "XEU",
            "EUR",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XPF",
            "GMD",
            "GEL",
            "DEM",
            "GHC",
            "GIP",
            "GRD",
            "GTQ",
            "GNF",
            "GWP",
            "GYD",
            "HTG",
            "ITL",
            "HNL",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "XDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KPW",
            "KRW",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LBP",
            "ZAR",
            "LSL",
            "LRD",
            "LYD",
            "CHF",
            "LTL",
            "LUF",
            "MKD",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MTL",
            "MRO",
            "MUR",
            "MXN",
            "MXV",
            "MDL",
            "MNT",
            "MAD",
            "MZM",
            "MMK",
            "NPR",
            "ANG",
            "NLG",
            "NIO",
            "NGN",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "QAR",
            "ROL",
            "RUR",
            "RWF",
            "SHP",
            "WST",
            "STD",
            "SAR",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "LKR",
            "SDP",
            "SRG",
            "SZL",
            "SEK",
            "SYP",
            "TWD",
            "TJR",
            "TZS",
            "THB",
            "TOP",
            "TTD",
            "TND",
            "TRL",
            "TMM",
            "UGX",
            "UAH",
            "AED",
            "GBP",
            "USS",
            "USN",
            "UYU",
            "UZS",
            "VUV",
            "VEB",
            "VND",
            "YER",
            "YUN",
            "ZRN",
            "ZMK",
            "ZWD",
            "ADP",
            "NAD",
            "RUB",
            "RYR",
            "BOV"
          ],
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "error_code": {
          "type": "string",
          "description": "A standardized error code, independent of the payment provider",
          "enum": [
            "null",
            "incorrect_number",
            "invalid_number",
            "invalid_expiry_date",
            "invalid_cvc",
            "expired_card",
            "incorrect_cvc",
            "incorrect_zip",
            "incorrect_address",
            "card_declined",
            "processing_error",
            "call_issuer",
            "pick_up_card"
          ],
          "x-nullable": true,
          "x-sub-format": "Enum",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "gateway": {
          "type": "string",
          "description": "The name of the gateway the transaction was issued through",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "A unique numeric identifier for the transaction"
        },
        "kind": {
          "type": "string",
          "description": "The kind of transaction ;'authorization': Money that the customer has agreed to pay. Authorization period lasts for up to 7 to 30 days (depending on your payment service) while a store awaits for a customer's capture;'capture': Transfer of money that was reserved during the authorization of a shop;'sale': The combination of authorization and capture, performed in one single step;'void': The cancellation of a pending authorization or capture;'refund': The partial or full return of the captured money to the customer",
          "enum": [
            "authorization",
            "capture",
            "sale",
            "void",
            "refund"
          ],
          "x-sub-format": "Enum",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "payment_details": {
          "$ref": "#/definitions/TransactionPaymentDetails",
          "description": "An object containing information about the credit card used for this transaction"
        },
        "receipt": {
          "$ref": "#/definitions/TransactionReceipt",
          "description": "A transaction receipt attached to the transaction by the gateway. The value of this field will vary depending on   which gateway the shop is using",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "status": {
          "type": "string",
          "description": "The status of the transaction",
          "enum": [
            "pending",
            "failure",
            "success",
            "error"
          ],
          "x-sub-format": "Enum",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "test": {
          "type": "boolean",
          "description": "The option to use the transaction for testing purposes",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "message": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        }
      },
      "type": "object"
    },
    "OptionPOST": {
      "x-primary-key": [
        "id"
      ],
      "required": [
        "name"
      ],
      "description": "Custom product property names like Size, Color, and Material. Products are based on permutations of these options",
      "properties": {
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64"
        },
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "provinces-countries": {
      "properties": {
        "code": {
          "type": "string"
        },
        "country_id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "name": {
          "type": "string"
        },
        "shipping_zone_id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "tax": {
          "format": "int32",
          "type": "integer"
        },
        "tax_name": {
          "type": "string"
        },
        "tax_percentage": {
          "format": "double",
          "type": "number"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "type": "object"
    },
    "ordersFulfillmentsPOST": {
      "description": "A fulfillment represents a shipment of one or more items in an order",
      "properties": {
        "id": {
          "description": "The unique numeric identifier for the fulfillment",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "line_items": {
          "description": " A historical record of each item in the fulfillment",
          "items": {
            "$ref": "#/definitions/fulfillmentsLineItems"
          },
          "type": "array",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call"
        },
        "notify_customer": {
          "default": true,
          "description": "A flag indicating whether the customer should be notified",
          "type": "boolean",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call"
        },
        "receipt": {
          "description": "Text field that provides information about the receipt",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "$ref": "#/definitions/ordersFulfillmentsReceipt"
        },
        "service": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call"
        },
        "status": {
          "description": "The status of the fulfillment",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call"
        },
        "tracking_company": {
          "description": " The name of the shipping company",
          "enum": [
            "4PX",
            "APC",
            "Amazon Logistics UK",
            "Amazon Logistics US",
            "Australia Post",
            "Bluedart",
            "Canada Post",
            "China  Post",
            "Correios",
            "DHL Express",
            "DHL eCommerce",
            "DHL eCommerce Asia",
            "Delhivery",
            "Eagle",
            "FSC",
            "FedEx",
            "FedEx UK",
            "GLS",
            "Globegistics",
            "Japan Post",
            "New Zealand Post",
            "PostNord",
            "Purolator",
            "Royal Mail",
            "Sagawa (EN)",
            "Sagawa (JA)",
            "TNT",
            "TNT Post",
            "UPS",
            "USPS",
            "Yamato (EN)",
            "Yamato (JA)"
          ],
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "x-nullable": true,
          "x-sub-format": "Enum"
        },
        "tracking_number": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call"
        },
        "tracking_numbers": {
          "description": "The shipping number, provided by the shipping company",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call"
        },
        "tracking_url": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "x-sub-format": "Url"
        },
        "tracking_urls": {
          "description": "The URLs to track the fulfillment",
          "items": {
            "type": "string",
            "x-sub-format": "Url"
          },
          "type": "array",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call"
        },
        "variant_inventory_management": {
          "description": "States the name of the inventory management service",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "fulfillments",
      "type": "object"
    },
    "provinces": {
      "properties": {
        "code": {
          "type": "string"
        },
        "country_id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "name": {
          "type": "string"
        },
        "shipping_zone_id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "tax": {
          "format": "double",
          "type": "number"
        },
        "tax_name": {
          "type": "string"
        },
        "tax_percentage": {
          "format": "double",
          "type": "number"
        },
        "tax_type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ordersRefundsCalculateShipping": {
      "description": "Object to specify how much shipping to refund",
      "properties": {
        "amount": {
          "description": " Set specific amount of shipping to refund. Takes precedence over full_refund",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "full_refund": {
          "description": "set to true to refund all remaining shipping",
          "type": "boolean",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call"
        }
      },
      "type": "object"
    },
    "AbandonedChkoutDiscount_code": {
      "x-vendor-objectname": "discount_codes",
      "description": "Applicable discount codes that can be applied to the order. If no codes exist the value will default to blank",
      "properties": {
        "amount": {
          "type": "string",
          "description": "The value of the discount deducted from the order total. The type field determines how this value is calculated",
          "x-sub-format": "Money",
          "x-precision": 2
        },
        "code": {
          "type": "string",
          "description": "The discount code"
        },
        "type": {
          "type": "string",
          "default": "fixed_amount",
          "description": "The type of discount. Can be one of: percentage, shipping, fixed_amount (default)",
          "enum": [
            "fixed_amount",
            "percentage",
            "shipping"
          ],
          "x-sub-format": "Enum"
        }
      },
      "type": "object"
    },
    "ImagePATCH": {
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "images",
      "required": [
        "position"
      ],
      "description": "Products are easier to sell if customers can see pictures of them, which is why there are product images.Any product may  have up to 250 images, and images can be in .png, .gif or .jpg format",
      "properties": {
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "A unique numeric identifier for the product image"
        },
        "position": {
          "type": "integer",
          "format": "int32",
          "description": "The order of the product image in the list. The first product image is at position 1 and is the 'main' image for the product"
        }
      },
      "type": "object"
    },
    "countries": {
      "properties": {
        "code": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "name": {
          "type": "string"
        },
        "provinces": {
          "items": {
            "$ref": "#/definitions/provinces-countries"
          },
          "type": "array"
        },
        "tax": {
          "format": "int32",
          "type": "integer"
        },
        "tax_name": {
          "type": "string"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "countries",
      "type": "object"
    },
    "metaField": {
      "description": "Metafields allow you to attach metadata, which is additional information, to a store's resources",
      "properties": {
        "created_at": {
          "description": "The date and time when the metafield was created. The API returns this value in ISO 8601 format",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "description": {
          "description": "Additional information about the metafield. This property is optional",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "description": "Unique numeric identifier for the metafield",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "key": {
          "description": "The identifier for the metadata field.",
          "type": "string",
          "x-length": 30,
          "x-name": true
        },
        "namespace": {
          "description": "Container for a set of metafields. You need to define a custom namespace for your metafields to distinguish them from metafields used by other apps",
          "type": "string",
          "x-length": 20
        },
        "owner_id": {
          "description": "The unique ID of the resource that the metafield is attached to",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "owner_resource": {
          "description": "The type of resource that the metafield is attached to",
          "type": "string"
        },
        "updated_at": {
          "description": "The date and time when the metafield was published. The API returns this value in ISO 8601 format",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "value": {
          "description": "Information to be stored as metadata.",
          "type": "string"
        },
        "value_type": {
          "description": "States whether the information in the value is stored as a 'string' or 'integer.'",
          "enum": [
            "string",
            "integer"
          ],
          "type": "string",
          "x-sub-format": "Enum"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "metafields",
      "type": "object"
    },
    "variantsPATCH": {
      "properties": {
        "barcode": {
          "type": "string"
        },
        "compare_at_price": {
          "type": "string"
        },
        "fulfillment_service": {
          "type": "string"
        },
        "grams": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "image_id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "inventory_management": {
          "type": "string"
        },
        "inventory_policy": {
          "type": "string"
        },
        "inventory_quantity": {
          "format": "int32",
          "type": "integer"
        },
        "inventory_quantity_adjustment": {
          "type": "string"
        },
        "metafields": {
          "items": {
            "$ref": "#/definitions/metafieldsPOST"
          },
          "type": "array"
        },
        "old_inventory_quantity": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true
        },
        "option1": {
          "type": "string"
        },
        "option2": {
          "type": "string"
        },
        "option3": {
          "type": "string"
        },
        "position": {
          "format": "int32",
          "type": "integer"
        },
        "price": {
          "type": "string"
        },
        "product_id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "requires_shipping": {
          "type": "boolean"
        },
        "sku": {
          "type": "string"
        },
        "taxable": {
          "type": "boolean"
        },
        "title": {
          "type": "string"
        },
        "weight": {
          "format": "double",
          "type": "number"
        },
        "weight_unit": {
          "type": "string"
        }
      },
      "required": [
        "option1"
      ],
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "variants",
      "type": "object"
    },
    "metafieldsPOST": {
      "properties": {
        "description": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "value_type": {
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "key",
        "value",
        "value_type"
      ],
      "x-vendor-objectname": "metafields",
      "type": "object"
    },
    "Fulfillment": {
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "fulfillments",
      "properties": {
        "created_at": {
          "description": "Date and time when the fulfillment was created. ISO 8601 format (ex: 2008-01-10T11:00:00-05:00).",
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        },
        "id": {
          "x-readOnly": true,
          "type": "string"
        },
        "line_items": {
          "items": {
            "$ref": "#/definitions/LineItem"
          },
          "type": "array"
        },
        "order_id": {
          "x-readOnly": true,
          "type": "integer"
        },
        "receipt": {
          "$ref": "#/definitions/Receipt"
        },
        "status": {
          "type": "string"
        },
        "tracking_company": {
          "type": "string"
        },
        "tracking_numbers": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "updated_at": {
          "description": "Date and time when the fulfillment was updated. ISO 8601 format (ex: 2008-01-10T11:00:00-05:00).",
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        }
      },
      "type": "object"
    },
    "Variant": {
      "x-vendor-objectname": "variants",
      "x-primary-key": [
        "id"
      ],
      "description": "A product variant is a different version of a product, such as differing sizes or differing colors",
      "properties": {
        "barcode": {
          "description": "The barcode, UPC or ISBN number for the product",
          "type": "string"
        },
        "compare_at_price": {
          "type": "string",
          "description": "The competitors prices for the same item",
          "x-sub-format": "Money",
          "x-precision": 2,
          "x-nullable": true
        },
        "created_at": {
          "description": "The date and time when the product variant was created. The API returns this value in ISO 8601 format",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "fulfillment_service": {
          "description": "Service which is doing the fulfillment",
          "type": "string"
        },
        "grams": {
          "type": "integer",
          "format": "int32",
          "description": "The weight of the product variant in grams"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-readonly": true,
          "description": "The unique numeric identifier for the product variant"
        },
        "image_id": {
          "type": "integer",
          "format": "int64",
          "x-readonly": true,
          "description": "The unique numeric identifier for a product's image. Image must be associated to the same product as the variant",
          "x-reference-objectname": "images"
        },
        "inventory_management": {
          "description": "Specifies whether Shopify tracks the number of items in stock for this product variant",
          "type": "string"
        },
        "inventory_policy": {
          "type": "string",
          "description": "Specifies whether or not customers are allowed to place an order for a product variant when it's out of stock",
          "enum": [
            "deny",
            "continue"
          ],
          "x-sub-format": "Enum",
          "default": "deny"
        },
        "inventory_quantity": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items in stock for this product variant",
          "default": 1
        },
        "inventory_quantity_adjustment": {
          "type": "integer",
          "format": "int32",
          "description": "Instead of sending a new and old value for inventory an adjustment value can be sent. If an adjustment value is sent it will take priority"
        },
        "metafields": {
          "items": {
            "$ref": "#/definitions/MetaField"
          },
          "type": "array",
          "description": "Attaches additional information to a shop's resources"
        },
        "old_inventory_quantity": {
          "type": "integer",
          "format": "int32",
          "description": "The original stock level the client believes the product variant has"
        },
        "option1": {
          "type": "string",
          "description": "Custom properties that a shop owner can use to define product variants",
          "default": "Default Title"
        },
        "option2": {
          "type": "string",
          "description": "Custom properties that a shop owner can use to define product variants",
          "default": "Default Title"
        },
        "option3": {
          "type": "string",
          "description": "Custom properties that a shop owner can use to define product variants",
          "default": "Default Title"
        },
        "position": {
          "type": "integer",
          "format": "int32",
          "description": "The order of the product variant in the list of product variants. 1 is the first position"
        },
        "price": {
          "type": "string",
          "x-sub-format": "Money",
          "x-precision": 2,
          "description": "The price of the product variant"
        },
        "product_id": {
          "type": "integer",
          "format": "int64",
          "x-readonly": true,
          "x-reference-objectname": "product",
          "description": "The unique numeric identifier for the product"
        },
        "requires_shipping": {
          "type": "boolean",
          "description": "Specifies whether or not a customer needs to provide a shipping address when placing an order for this product variant"
        },
        "sku": {
          "type": "string",
          "description": "A unique identifier for the product in the shop"
        },
        "taxable": {
          "type": "boolean",
          "description": "Specifies whether or not a tax is charged when the product variant is sold"
        },
        "title": {
          "type": "string",
          "description": "The title of the product variant",
          "x-name": true
        },
        "updated_at": {
          "description": "The date and time when the product variant was last modified. The API returns this value in ISO 8601 format",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "weight": {
          "format": "double",
          "type": "number",
          "description": "The weight of the product variant in the unit system specified with weight_unit"
        },
        "weight_unit": {
          "type": "string",
          "description": "The unit of measurement that applies to the product variant's weight",
          "enum": [
            "g",
            "kg",
            "oz",
            "lb"
          ],
          "x-sub-format": "Enum"
        },
        "inventory_item_id": {
          "type": "integer",
          "format": "int64",
          "x-readonly": true
        }
      },
      "type": "object"
    },
    "Shop": {
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "shop",
      "properties": {
        "address1": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "country_code": {
          "type": "string"
        },
        "country_name": {
          "type": "string"
        },
        "county_taxes": {
          "type": "string"
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        },
        "currency": {
          "type": "string"
        },
        "customer_email": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "eligible_for_payments": {
          "type": "boolean"
        },
        "email": {
          "type": "string"
        },
        "google_apps_domain": {
          "type": "string"
        },
        "google_apps_login_enabled": {
          "type": "boolean"
        },
        "has_discounts": {
          "type": "boolean"
        },
        "has_gift_cards": {
          "type": "boolean"
        },
        "has_storefront": {
          "type": "boolean"
        },
        "iana_timezone": {
          "type": "string"
        },
        "id": {
          "x-readOnly": true,
          "type": "integer"
        },
        "latitude": {
          "format": "double",
          "type": "number"
        },
        "longitude": {
          "format": "double",
          "type": "number"
        },
        "money_format": {
          "type": "string"
        },
        "money_in_emails_format": {
          "type": "string"
        },
        "money_with_currency_format": {
          "type": "string"
        },
        "money_with_currency_in_emails_format": {
          "type": "string"
        },
        "myshopify_domain": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "password_enabled": {
          "type": "boolean"
        },
        "phone": {
          "type": "string"
        },
        "plan_display_name": {
          "type": "boolean"
        },
        "force_ssl": {
          "type": "string"
        },
        "weight_unit": {
          "type": "string"
        },
        "finances": {
          "type": "string"
        },
        "plan_name": {
          "type": "string"
        },
        "primary_locale": {
          "type": "string"
        },
        "primary_location_id": {
          "type": "string"
        },
        "province": {
          "type": "string"
        },
        "province_code": {
          "type": "string"
        },
        "requires_extra_payments_agreement": {
          "type": "boolean"
        },
        "setup_required": {
          "type": "boolean"
        },
        "shop_owner": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "tax_shipping": {
          "type": "string"
        },
        "taxes_included": {
          "type": "boolean"
        },
        "timezone": {
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        },
        "zip": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "OrderLineItemPATCH": {
      "x-primary-key": [
        "id"
      ],
      "description": "A line item object contains information about an item in the order",
      "properties": {
        "fulfillment_service": {
          "description": "Service provider who is doing the fulfilment,Valid values are either 'manual' or the name of the provider. eg: 'amazon', 'shipwire', etc",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "gift_card": {
          "type": "boolean",
          "description": "States whether or not the line_item is a gift card. If so, the item is not taxed or considered for shipping charges",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "grams": {
          "type": "integer",
          "format": "int32",
          "description": "The weight of the item in grams",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "name": {
          "type": "string",
          "x-name": true,
          "description": "The name of the product variant",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "price": {
          "type": "string",
          "x-sub-format": "Money",
          "x-precision": 2,
          "description": "The price of the item before discounts have been applied",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "The number of products that were purchased",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "requires_shipping": {
          "type": "boolean",
          "description": " States whether or not the fulfilment requires shipping",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "sku": {
          "type": "string",
          "description": "A unique identifier of the item in the fulfilment",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "tax_lines": {
          "items": {
            "$ref": "#/definitions/LineItemTaxLine"
          },
          "type": "array",
          "description": "An array of tax_line objects, each of which details the total taxes applicable to the order.When creating an order through the API, tax lines may be specified on the order or the line items but not both",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "taxable": {
          "type": "boolean",
          "description": "States whether or not the product was taxable",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "title": {
          "type": "string",
          "description": "The title of the product",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "variant_title": {
          "type": "string",
          "description": "The title of the product variant",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "variant_id": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the product variant",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "vendor": {
          "type": "string",
          "description": "The name of the supplier of the item",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the line item",
          "x-readonly": true
        },
        "properties": {
          "items": {
            "$ref": "#/definitions/LineItemProperties"
          },
          "type": "array",
          "description": "An array of custom information for an item that has been added to the cart. Often used to provide product customization options",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        }
      },
      "type": "object"
    },
    "customCollectionsPATCH": {
      "properties": {
        "body_html": {
          "type": "string"
        },
        "handle": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "image": {
          "$ref": "#/definitions/imagePOST"
        },
        "metafields": {
          "items": {
            "$ref": "#/definitions/metafields-POST"
          },
          "type": "array"
        },
        "products_count": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true
        },
        "published_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        },
        "published_scope": {
          "type": "string",
          "x-readOnly": true
        },
        "sort_order": {
          "type": "string"
        },
        "template_suffix": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "required": [
        "title",
        "handle",
        "sort_order"
      ],
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "custom_collections",
      "type": "object"
    },
    "ordersRisksPATCH": {
      "description": "The Order risk assessment is used to indicate to a merchant the fraud checks that have been done on an order",
      "properties": {
        "cause_cancel": {
          "description": "Use this flag when a fraud check is accompanied with a call to the Orders API to cancel the order. This will indicate to the merchant that this risk was severe enough to force cancellation of the order",
          "type": "boolean",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "display": {
          "description": "States whether or not the risk is displayed",
          "type": "boolean",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "id": {
          "description": "A unique numeric identifier for the order risk",
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "merchant_message": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "message": {
          "description": "A message that should be displayed to the merchant to indicate the results of the fraud check",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "order_id": {
          "format": "int64",
          "type": "integer",
          "x-readonly": true,
          "x-reference-objectname": "order"
        },
        "recommendation": {
          "description": "The recommended action given to the merchant",
          "enum": [
            "cancel",
            "investigate",
            "accept"
          ],
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call",
          "x-sub-format": "Enum"
        },
        "score": {
          "description": "A number between 0 and 1 indicating percentage likelihood of being fraud",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "source": {
          "description": "This indicates the source of the risk assessment",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "risks",
      "type": "object"
    },
    "ordersFulfillmentsReceipt": {
      "description": "Text field that provides information about the receipt",
      "properties": {
        "authorization": {
          "description": "The authorization code",
          "type": "string"
        },
        "testcase": {
          "description": " States whether or not the fulfillment was a testcase",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "LineItemProperties": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MetaFieldPOST": {
      "x-vendor-objectname": "metafields",
      "required": [
        "namespace",
        "key",
        "value",
        "value_type"
      ],
      "x-primary-key": [
        "id"
      ],
      "description": "Metafields allow you to attach metadata, which is additional information, to a store's resources",
      "properties": {
        "created_at": {
          "description": "The date and time when the metafield was created. The API returns this value in ISO 8601 format",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "description": {
          "type": "string",
          "description": "Additional information about the metafield. This property is optional",
          "x-nullable": true
        },
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "Unique numeric identifier for the metafield"
        },
        "key": {
          "description": "The identifier for the metadata field.",
          "x-length": 30,
          "type": "string",
          "x-name": true
        },
        "namespace": {
          "x-length": 20,
          "type": "string",
          "description": "Container for a set of metafields. You need to define a custom namespace for your metafields to distinguish them from metafields used by other apps"
        },
        "owner_id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "The unique ID of the resource that the metafield is attached to"
        },
        "owner_resource": {
          "description": "The type of resource that the metafield is attached to",
          "type": "string"
        },
        "value": {
          "description": "Information to be stored as metadata.",
          "type": "string"
        },
        "value_type": {
          "description": "States whether the information in the value is stored as a 'string' or 'integer.'",
          "type": "string",
          "enum": [
            "string",
            "integer"
          ],
          "x-sub-format": "Enum"
        }
      },
      "type": "object"
    },
    "Object": {
      "description": "Fields for the object. There will be fields associated with an Object, which are not all described here.",
      "properties": {
        "objectField": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "metaFieldPOST": {
      "description": "Metafields allow you to attach metadata, which is additional information, to a store's resources",
      "properties": {
        "created_at": {
          "description": "The date and time when the metafield was created. The API returns this value in ISO 8601 format",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "description": {
          "description": "Additional information about the metafield. This property is optional",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "description": "Unique numeric identifier for the metafield",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "key": {
          "description": "The identifier for the metadata field.",
          "type": "string",
          "x-length": 30,
          "x-name": true
        },
        "namespace": {
          "description": "Container for a set of metafields. You need to define a custom namespace for your metafields to distinguish them from metafields used by other apps",
          "type": "string",
          "x-length": 20
        },
        "owner_id": {
          "description": "The unique ID of the resource that the metafield is attached to",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "owner_resource": {
          "description": "The type of resource that the metafield is attached to",
          "type": "string"
        },
        "value": {
          "description": "Information to be stored as metadata.",
          "type": "string"
        },
        "value_type": {
          "description": "States whether the information in the value is stored as a 'string' or 'integer.'",
          "enum": [
            "string",
            "integer"
          ],
          "type": "string",
          "x-sub-format": "Enum"
        }
      },
      "required": [
        "namespace",
        "key",
        "value",
        "value_type"
      ],
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "metafields",
      "type": "object"
    },
    "priceRules": {
      "properties": {
        "allocation_method": {
          "type": "string"
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        },
        "customer_selection": {
          "type": "string"
        },
        "ends_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        },
        "entitled_collection_ids": {
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "entitled_country_ids": {
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "entitled_product_ids": {
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "entitled_variant_ids": {
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "once_per_customer": {
          "type": "boolean"
        },
        "prerequisite_saved_search_ids": {
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "prerequisite_shipping_price_range": {
          "$ref": "#/definitions/prerequisite_shipping_price_range"
        },
        "prerequisite_subtotal_range": {
          "$ref": "#/definitions/prerequisite_subtotal_range"
        },
        "starts_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        },
        "target_selection": {
          "type": "string"
        },
        "target_type": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        },
        "usage_limit": {
          "format": "int32",
          "type": "integer"
        },
        "value": {
          "format": "int32",
          "type": "integer"
        },
        "value_type": {
          "type": "string"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "price_rules",
      "type": "object"
    },
    "Pong": {
      "properties": {
        "dateTime": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        },
        "endpoint": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ordersRefundsCalculate": {
      "description": "Calculate refund transactions based on line items and shipping. The returned response can be used to create a Refund",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "refund_line_items": {
          "description": "Array of line item IDs and quantities to refund",
          "items": {
            "$ref": "#/definitions/refundCalculatelineitem"
          },
          "type": "array"
        },
        "shipping": {
          "description": "Object to specify how much shipping to refund",
          "$ref": "#/definitions/ordersRefundsCalculateShipping"
        },
        "transactions": {
          "items": {
            "$ref": "#/definitions/refundCalculatetransactions"
          },
          "type": "array"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "refunds",
      "type": "object"
    },
    "ImagePOST": {
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "images",
      "description": "Products are easier to sell if customers can see pictures of them, which is why there are product images.Any product may  have up to 250 images, and images can be in .png, .gif or .jpg format",
      "properties": {
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "A unique numeric identifier for the product image"
        },
        "attachment": {
          "description": "The base64 encoded image",
          "type": "string",
          "x-sub-format": "Image URL (base 64)",
          "x-conditionally-required-description": "Either attachment or src must be present for a successful Post request"
        },
        "src": {
          "type": "string",
          "description": "Specifies the location of the product image",
          "x-sub-format": "URL",
          "x-conditionally-required-description": "Either attachment or src must be present for a successful Post request"
        },
        "position": {
          "type": "integer",
          "format": "int32",
          "description": "The order of the product image in the list. The first product image is at position 1 and is the 'main' image for the product"
        }
      },
      "type": "object"
    },
    "OrderPATCH": {
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "order",
      "description": "An order is a customer's completed request to purchase one or more products from a shop. An order is created when a customer completes the checkout process, during which time they provide an email address or phone number, billing address and payment information",
      "properties": {
        "note_attributes": {
          "items": {
            "$ref": "#/definitions/OrderNoteAttribute"
          },
          "type": "array",
          "description": "Extra information that is added to the order. Each array entry must contain a hash with name and value keys",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "gateway": {
          "type": "string",
          "description": "The payment gateway used",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "buyer_accepts_marketing": {
          "type": "boolean",
          "description": "Indicates whether the person who placed the order would like to receive email updates from the shop. This is set when the customer selects the Submit to our newsletter checkbox during checkout. The store's settings about email marketing don't affect this value",
          "default": false,
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "currency": {
          "type": "string",
          "description": "The three letter code (ISO 4217) for the currency used for the payment.",
          "x-sub-format": "Currency Code",
          "enum": [
            "AFA",
            "ALL",
            "DZD",
            "USD",
            "ESP",
            "AOA",
            "XCD",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZM",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYB",
            "BEF",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BAM",
            "BWP",
            "NOK",
            "BRL",
            "BND",
            "BGL,BGN",
            "BIF",
            "KHR",
            "XAF",
            "CAD",
            "CVE",
            "KYD",
            "CLP",
            "CLF",
            "CNY",
            "HKD",
            "MOP",
            "COP",
            "KMF",
            "CDF",
            "NZD",
            "CRC",
            "HRK",
            "CUP",
            "CYP",
            "CZK",
            "DKK",
            "DJF",
            "DOP",
            "TPE",
            "IDE",
            "ECS",
            "ECV",
            "EGP",
            "SVC",
            "ERN",
            "EEK",
            "ETB",
            "XEU",
            "EUR",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XPF",
            "GMD",
            "GEL",
            "DEM",
            "GHC",
            "GIP",
            "GRD",
            "GTQ",
            "GNF",
            "GWP",
            "GYD",
            "HTG",
            "ITL",
            "HNL",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "XDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KPW",
            "KRW",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LBP",
            "ZAR",
            "LSL",
            "LRD",
            "LYD",
            "CHF",
            "LTL",
            "LUF",
            "MKD",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MTL",
            "MRO",
            "MUR",
            "MXN",
            "MXV",
            "MDL",
            "MNT",
            "MAD",
            "MZM",
            "MMK",
            "NPR",
            "ANG",
            "NLG",
            "NIO",
            "NGN",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "QAR",
            "ROL",
            "RUR",
            "RWF",
            "SHP",
            "WST",
            "STD",
            "SAR",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "LKR",
            "SDP",
            "SRG",
            "SZL",
            "SEK",
            "SYP",
            "TWD",
            "TJR",
            "TZS",
            "THB",
            "TOP",
            "TTD",
            "TND",
            "TRL",
            "TMM",
            "UGX",
            "UAH",
            "AED",
            "GBP",
            "USS",
            "USN",
            "UYU",
            "UZS",
            "VUV",
            "VEB",
            "VND",
            "YER",
            "YUN",
            "ZRN",
            "ZMK",
            "ZWD",
            "ADP",
            "NAD",
            "RUB",
            "RYR",
            "BOV"
          ],
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "customer": {
          "$ref": "#/definitions/OrderCustomerPATCH",
          "description": "An object containing information about the customer. It is important to note that the order may not have a customer and consumers should not depend on the existence of a customer object. This value may be null if the order was created through Shopify POS",
          "x-nullable": true,
          "x-reference-objectname": "customer",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "discount_codes": {
          "items": {
            "$ref": "#/definitions/AbandonedChkoutDiscount_code"
          },
          "type": "array",
          "description": "Applicable discount codes that can be applied to the order",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "email": {
          "type": "string",
          "x-sub-format:": "Email",
          "description": "The customer's email address",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "financial_status": {
          "type": "string",
          "enum": [
            "authorized",
            "pending",
            "paid",
            "partially_paid",
            "refunded",
            "voided",
            "partially_refunded"
          ],
          "x-sub-format": "Enum",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "fulfillment_status": {
          "type": "string",
          "enum": [
            "fulfilled",
            "null",
            "partial"
          ],
          "x-sub-format": "Enum",
          "x-nullable": true,
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "fulfillments": {
          "items": {
            "$ref": "#/definitions/OrderFulfillment"
          },
          "type": "array",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "The unique numeric identifier for the order. This one is used for API purposes.This is different from the order_number property"
        },
        "line_items": {
          "items": {
            "$ref": "#/definitions/OrderLineItemPATCH"
          },
          "type": "array",
          "description": "A list of line item objects, each one containing information about an item in the order",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "name": {
          "type": "string",
          "description": "The customer's order name as represented by a number.",
          "x-name": true,
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "shipping_lines": {
          "items": {
            "$ref": "#/definitions/OrderShippingLine"
          },
          "type": "array",
          "description": "An array of shipping_line objects, each of which details the shipping methods used.",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "tags": {
          "type": "string",
          "description": "Tags are additional short descriptors, commonly used for filtering and searching, formatted as a string of comma-separated values",
          "x-length": 40,
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "tax_lines": {
          "items": {
            "$ref": "#/definitions/LineItemTaxLine"
          },
          "type": "array",
          "description": "An array of tax_line objects, each of which details the total taxes applicable to the order.When creating an order through the API, tax lines may be specified on the order or the line items but not both",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "taxes_included": {
          "type": "boolean",
          "description": "States whether or not taxes are included in the order subtotal",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "total_discounts": {
          "type": "string",
          "description": "The total amount of the discounts to be applied to the price of the order",
          "x-precision": 2,
          "x-sub-format": "Money",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "total_tax": {
          "type": "string",
          "x-sub-format": "Money",
          "x-precision": 2,
          "description": "The sum of all the taxes applied to the order (must be positive)",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "total_weight": {
          "description": "The sum of all the weights of the line items in the order, in grams.",
          "type": "integer",
          "format": "int32",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "transactions": {
          "items": {
            "$ref": "#/definitions/TransactionPATCH"
          },
          "type": "array",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "note": {
          "type": "string",
          "description": "The text of an optional note that a shop owner can attach to the order",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "billing_address": {
          "$ref": "#/definitions/Address",
          "x-reference-objectname": "addresses",
          "description": "The mailing address associated with the payment method. This address is an optional field that will not be available on orders that do not require one",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "contact_email": {
          "type": "string",
          "x-sub-format": "Email",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "shipping_address": {
          "$ref": "#/definitions/Address",
          "x-reference-objectname": "addresses",
          "description": "The mailing address to where the order will be shipped. This address is optional and will not be available on orders that do not require one",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "send_receipt": {
          "type": "boolean",
          "description": "Determines whether an order confirmation will be sent to the customer",
          "default": false,
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "inventory_behaviour": {
          "description": "Determines which inventory updating behaviour is used",
          "type": "string",
          "enum": [
            "bypass",
            "decrement_ignoring_policy",
            "decrement_obeying_policy"
          ],
          "default": "bypass",
          "x-sub-format": "Enum",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        }
      },
      "type": "object"
    },
    "BulkQuery": {
      "description": "BulkLoad response of bulk download.",
      "properties": {
        "id": {
          "description": "Id of the bulk job",
          "type": "number"
        },
        "status": {
          "description": "Status of the bulk job",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AbandonedChkoutLineItem": {
      "properties": {
        "applied_discounts": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "key": {
          "type": "string"
        },
        "fulfillment_service": {
          "description": "Service provider who is doing the fulfilment,Valid values are either 'manual' or the name of the provider. eg: 'amazon', 'shipwire', etc",
          "type": "string"
        },
        "fulfillment_status": {
          "description": " How far along an order is in terms line items fulfilled",
          "type": "string",
          "enum": [
            "fulfilled",
            "null",
            "partial"
          ],
          "x-nullable": true,
          "x-sub-format": "Enum"
        },
        "gift_card": {
          "type": "boolean",
          "description": "States whether or not the line_item is a gift card. If so, the item is not taxed or considered for shipping charges"
        },
        "grams": {
          "type": "integer",
          "format": "int32",
          "description": "The weight of the item in grams"
        },
        "line_price": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "x-name": true,
          "description": "The name of the product variant"
        },
        "price": {
          "type": "string",
          "x-sub-format": "Money",
          "x-precision": 2,
          "description": "The price of the item before discounts have been applied"
        },
        "product_id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "The unique numeric identifier for the product in the fulfilment.Can be null if the original product associated with the order is deleted at a later date",
          "x-nullable": true,
          "x-reference-objectname": "product"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "The number of products that were purchased"
        },
        "requires_shipping": {
          "type": "boolean",
          "description": " States whether or not the fulfilment requires shipping"
        },
        "sku": {
          "type": "string",
          "description": "A unique identifier of the item in the fulfilment"
        },
        "tax_lines": {
          "items": {
            "$ref": "#/definitions/LineItemTaxLine"
          },
          "type": "array",
          "description": "An array of tax_line objects, each of which details the taxes applicable to the order"
        },
        "taxable": {
          "type": "boolean",
          "description": "States whether or not the product was taxable"
        },
        "title": {
          "type": "string",
          "description": "The title of the product"
        },
        "variant_id": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the product variant"
        },
        "variant_title": {
          "type": "string",
          "description": "The title of the product variant"
        },
        "vendor": {
          "type": "string",
          "description": "The name of the supplier of the item"
        },
        "origin_location_id": {
          "type": "integer",
          "format": "int64"
        },
        "destination_location_id": {
          "type": "integer",
          "format": "int64"
        },
        "fulfillable_quantity": {
          "type": "integer",
          "format": "int32",
          "description": "The amount available to fulfill. This is the quantity - max(refunded_quantity, fulfilled_quantity) - pending_fulfilled_quantity - open_fulfilled_quantity"
        },
        "total_discount": {
          "type": "string",
          "x-sub-format": "Money",
          "x-precision": 2,
          "description": "The total discount amount applied to this line item. This value is not subtracted in the line item price"
        },
        "product_exists": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the line item",
          "x-readonly": true
        },
        "properties": {
          "items": {
            "$ref": "#/definitions/LineItemProperties"
          },
          "type": "array",
          "description": "An array of custom information for an item that has been added to the cart. Often used to provide product customization options"
        },
        "variant_inventory_management": {
          "type": "string"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "type": "object"
    },
    "OrderRefund": {
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "refunds",
      "description": "A refund is a record of the money returned to the customer, and/or the return of any items on an order which may or may not have been restocked",
      "x-searchable": true,
      "properties": {
        "amount": {
          "type": "string",
          "x-sub-format": "Money",
          "x-precision": 2
        },
        "test": {
          "type": "boolean",
          "description": "The option to use the transaction for testing purposes"
        },
        "kind": {
          "type": "string"
        },
        "parent_id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64"
        },
        "currency": {
          "type": "string",
          "description": "The three letter code (ISO 4217) for the currency used for the payment",
          "x-sub-format": "Currency Code",
          "enum": [
            "AFA",
            "ALL",
            "DZD",
            "USD",
            "ESP",
            "AOA",
            "XCD",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZM",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYB",
            "BEF",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BAM",
            "BWP",
            "NOK",
            "BRL",
            "BND",
            "BGL,BGN",
            "BIF",
            "KHR",
            "XAF",
            "CAD",
            "CVE",
            "KYD",
            "CLP",
            "CLF",
            "CNY",
            "HKD",
            "MOP",
            "COP",
            "KMF",
            "CDF",
            "NZD",
            "CRC",
            "HRK",
            "CUP",
            "CYP",
            "CZK",
            "DKK",
            "DJF",
            "DOP",
            "TPE",
            "IDE",
            "ECS",
            "ECV",
            "EGP",
            "SVC",
            "ERN",
            "EEK",
            "ETB",
            "XEU",
            "EUR",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XPF",
            "GMD",
            "GEL",
            "DEM",
            "GHC",
            "GIP",
            "GRD",
            "GTQ",
            "GNF",
            "GWP",
            "GYD",
            "HTG",
            "ITL",
            "HNL",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "XDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KPW",
            "KRW",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LBP",
            "ZAR",
            "LSL",
            "LRD",
            "LYD",
            "CHF",
            "LTL",
            "LUF",
            "MKD",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MTL",
            "MRO",
            "MUR",
            "MXN",
            "MXV",
            "MDL",
            "MNT",
            "MAD",
            "MZM",
            "MMK",
            "NPR",
            "ANG",
            "NLG",
            "NIO",
            "NGN",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "QAR",
            "ROL",
            "RUR",
            "RWF",
            "SHP",
            "WST",
            "STD",
            "SAR",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "LKR",
            "SDP",
            "SRG",
            "SZL",
            "SEK",
            "SYP",
            "TWD",
            "TJR",
            "TZS",
            "THB",
            "TOP",
            "TTD",
            "TND",
            "TRL",
            "TMM",
            "UGX",
            "UAH",
            "AED",
            "GBP",
            "USS",
            "USN",
            "UYU",
            "UZS",
            "VUV",
            "VEB",
            "VND",
            "YER",
            "YUN",
            "ZRN",
            "ZMK",
            "ZWD",
            "ADP",
            "NAD",
            "RUB",
            "RYR",
            "BOV"
          ]
        },
        "message": {
          "type": "string"
        },
        "order_id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "x-reference-objectname": "order",
          "description": "A unique numeric identifier for the order"
        },
        "processed_at": {
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601",
          "description": "The date and time when the refund was imported, in ISO 8601 format. This value can be set to dates in the past when importing from other systems. If no value is provided, it will be auto-generated"
        },
        "created_at": {
          "description": "The date and time when the refund was created. The API returns this value in ISO 8601 format",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "The unique numeric identifier for the refund. This one is used for API purposes",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ],
          "x-searchable-name": [
            "since_id"
          ]
        },
        "note": {
          "type": "string",
          "description": "The optional note attached to a refund"
        },
        "refund_line_items": {
          "items": {
            "$ref": "#/definitions/OrderRefundLineItem"
          },
          "type": "array",
          "description": "Details about one returned/refunded item"
        },
        "restock": {
          "type": "boolean",
          "description": "Whether or not the line items were added back to the store inventory"
        },
        "transactions": {
          "items": {
            "$ref": "#/definitions/Transaction"
          },
          "type": "array"
        },
        "user_id": {
          "x-readOnly": true,
          "type": "integer",
          "format": "int64"
        },
        "gateway": {
          "type": "string",
          "description": "The name of the gateway the transaction was issued through"
        },
        "source_name": {
          "type": "string",
          "description": "The origin of the transaction. This is set by Shopify and cannot be overridden"
        },
        "status": {
          "type": "string",
          "description": "The status of the transaction",
          "enum": [
            "pending",
            "failure",
            "success",
            "error"
          ],
          "x-sub-format": "Enum"
        },
        "order_adjustments": {
          "items": {
            "$ref": "#/definitions/RefundOrderAdjustments"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "countries-custom": {
      "properties": {
        "code": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "name": {
          "type": "string"
        },
        "provinces": {
          "items": {
            "$ref": "#/definitions/provinces"
          },
          "type": "array"
        },
        "tax": {
          "format": "double",
          "type": "number"
        },
        "tax_name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "customCollectionsPOST": {
      "properties": {
        "body_html": {
          "type": "string"
        },
        "handle": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "image": {
          "$ref": "#/definitions/imagePOST"
        },
        "metafields": {
          "items": {
            "$ref": "#/definitions/metafields-POST"
          },
          "type": "array"
        },
        "products_count": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true
        },
        "published_scope": {
          "type": "string",
          "x-readOnly": true
        },
        "sort_order": {
          "type": "string"
        },
        "template_suffix": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "required": [
        "title"
      ],
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "custom_collections",
      "type": "object"
    },
    "productsImagesPATCH": {
      "description": "Products are easier to sell if customers can see pictures of them, which is why there are product images.Any product may  have up to 250 images, and images can be in .png, .gif or .jpg format",
      "properties": {
        "id": {
          "description": "A unique numeric identifier for the product image",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "position": {
          "description": "The order of the product image in the list. The first product image is at position 1 and is the 'main' image for the product",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "position"
      ],
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "images",
      "type": "object"
    },
    "LineItemTaxLine": {
      "properties": {
        "price": {
          "type": "string",
          "description": " The amount of tax to be charged",
          "x-sub-format": "Money",
          "x-precision": 2
        },
        "rate": {
          "format": "float",
          "type": "number",
          "description": "The rate of tax to be applied"
        },
        "title": {
          "type": "string",
          "description": "The name of the tax",
          "x-name": true
        },
        "compare_at": {
          "type": "string"
        },
        "zone": {
          "type": "string"
        },
        "position": {
          "format": "int32",
          "type": "integer",
          "description": "The rate of tax to be applied"
        },
        "source": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "refundsTransaction": {
      "description": " An object containing information about the payment",
      "properties": {
        "amount": {
          "description": "The amount of money that the transaction was for",
          "type": "string",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "authorization": {
          "description": "The authorization code associated with the transaction",
          "type": "string"
        },
        "created_at": {
          "description": "The date and time when the transaction was created. The API returns this value in ISO 8601 format",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "currency": {
          "description": "The three letter code (ISO 4217) for the currency used for the payment",
          "enum": [
            "AFA",
            "ALL",
            "DZD",
            "USD",
            "ESP",
            "AOA",
            "XCD",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZM",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYB",
            "BEF",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BAM",
            "BWP",
            "NOK",
            "BRL",
            "BND",
            "BGL,BGN",
            "BIF",
            "KHR",
            "XAF",
            "CAD",
            "CVE",
            "KYD",
            "CLP",
            "CLF",
            "CNY",
            "HKD",
            "MOP",
            "COP",
            "KMF",
            "CDF",
            "NZD",
            "CRC",
            "HRK",
            "CUP",
            "CYP",
            "CZK",
            "DKK",
            "DJF",
            "DOP",
            "TPE",
            "IDE",
            "ECS",
            "ECV",
            "EGP",
            "SVC",
            "ERN",
            "EEK",
            "ETB",
            "XEU",
            "EUR",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XPF",
            "GMD",
            "GEL",
            "DEM",
            "GHC",
            "GIP",
            "GRD",
            "GTQ",
            "GNF",
            "GWP",
            "GYD",
            "HTG",
            "ITL",
            "HNL",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "XDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KPW",
            "KRW",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LBP",
            "ZAR",
            "LSL",
            "LRD",
            "LYD",
            "CHF",
            "LTL",
            "LUF",
            "MKD",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MTL",
            "MRO",
            "MUR",
            "MXN",
            "MXV",
            "MDL",
            "MNT",
            "MAD",
            "MZM",
            "MMK",
            "NPR",
            "ANG",
            "NLG",
            "NIO",
            "NGN",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "QAR",
            "ROL",
            "RUR",
            "RWF",
            "SHP",
            "WST",
            "STD",
            "SAR",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "LKR",
            "SDP",
            "SRG",
            "SZL",
            "SEK",
            "SYP",
            "TWD",
            "TJR",
            "TZS",
            "THB",
            "TOP",
            "TTD",
            "TND",
            "TRL",
            "TMM",
            "UGX",
            "UAH",
            "AED",
            "GBP",
            "USS",
            "USN",
            "UYU",
            "UZS",
            "VUV",
            "VEB",
            "VND",
            "YER",
            "YUN",
            "ZRN",
            "ZMK",
            "ZWD",
            "ADP",
            "NAD",
            "RUB",
            "RYR",
            "BOV"
          ],
          "type": "string",
          "x-sub-format": "Currency Code"
        },
        "device_id": {
          "description": "The unique identifier for the device",
          "type": "string",
          "x-readonly": true
        },
        "error_code": {
          "description": "A standardized error code, independent of the payment provider",
          "enum": [
            "null",
            "incorrect_number",
            "invalid_number",
            "invalid_expiry_date",
            "invalid_cvc",
            "expired_card",
            "incorrect_cvc",
            "incorrect_zip",
            "incorrect_address",
            "card_declined",
            "processing_error",
            "call_issuer",
            "pick_up_card"
          ],
          "type": "string",
          "x-nullable": true,
          "x-sub-format": "Enum"
        },
        "gateway": {
          "description": "The name of the gateway the transaction was issued through",
          "type": "string"
        },
        "id": {
          "description": "A unique numeric identifier for the transaction",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "kind": {
          "description": "The kind of transaction ;'authorization': Money that the customer has agreed to pay. Authorization period lasts for up to 7 to 30 days (depending on your payment service) while a store awaits for a customer's capture;'capture': Transfer of money that was reserved during the authorization of a shop;'sale': The combination of authorization and capture, performed in one single step;'void': The cancellation of a pending authorization or capture;'refund': The partial or full return of the captured money to the customer",
          "enum": [
            "authorization",
            "capture",
            "sale",
            "void",
            "refund"
          ],
          "type": "string",
          "x-sub-format": "Enum"
        },
        "message": {
          "type": "string"
        },
        "order_id": {
          "description": "A unique numeric identifier for the order",
          "format": "int64",
          "type": "integer",
          "x-readOnly": true,
          "x-reference-objectname": "order"
        },
        "parent_id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "payment_details": {
          "description": "An object containing information about the credit card used for this transaction",
          "$ref": "#/definitions/refundsPaymentDetails"
        },
        "receipt": {
          "description": "A transaction receipt attached to the transaction by the gateway. The value of this field will vary depending on   which gateway the shop is using",
          "$ref": "#/definitions/refundsTransactionReceipt"
        },
        "source_name": {
          "description": "The origin of the transaction. This is set by Shopify and cannot be overridden",
          "type": "string"
        },
        "status": {
          "description": "The status of the transaction",
          "enum": [
            "pending",
            "failure",
            "success",
            "error"
          ],
          "type": "string",
          "x-sub-format": "Enum"
        },
        "test": {
          "description": "The option to use the transaction for testing purposes",
          "type": "boolean"
        },
        "user_id": {
          "description": "The unique identifier for the user",
          "type": "string",
          "x-readonly": true
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "transaction",
      "type": "object"
    },
    "price_based_shipping_rates": {
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "max_order_subtotal": {
          "type": "string"
        },
        "min_order_subtotal": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "price": {
          "type": "string"
        },
        "shipping_zone_id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        }
      },
      "type": "object"
    },
    "metafieldsCount": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "customersAddress": {
      "description": "A customer address resource instance represents one of the many addresses a customer may have",
      "properties": {
        "address1": {
          "description": "The customer's mailing address",
          "type": "string",
          "x-sub-format": "Street Number"
        },
        "address2": {
          "description": "An additional field for the customer's mailing address",
          "type": "string",
          "x-sub-format": "Street Name"
        },
        "city": {
          "description": " The customer's city",
          "type": "string",
          "x-sub-format": "City"
        },
        "company": {
          "description": "The customer's company",
          "type": "string",
          "x-sub-format": "Company Name"
        },
        "country": {
          "description": "The customer's country",
          "type": "string",
          "x-sub-format": "Country"
        },
        "country_code": {
          "description": "The two-letter country code corresponding to the customer's country",
          "enum": [
            "AD",
            "AE",
            "AF",
            "AG",
            "AI",
            "AL",
            "AM",
            "AO",
            "AQ",
            "AR",
            "AS",
            "AT",
            "AU",
            "AW",
            "AX",
            "AZ",
            "BA",
            "BB",
            "BD",
            "BE",
            "BF",
            "BG",
            "BH",
            "BI",
            "BJ",
            "BL",
            "BM",
            "BN",
            "BO",
            "BQ",
            "BR",
            "BS",
            "BT",
            "BV",
            "BW",
            "BY",
            "BZ",
            "CA",
            "CC",
            "CD",
            "CF",
            "CG",
            "CH",
            "CI",
            "CK",
            "CL",
            "CM",
            "CN",
            "CO",
            "CR",
            "CU",
            "CV",
            "CW",
            "CX",
            "CY",
            "CZ",
            "DE",
            "DJ",
            "DK",
            "DM",
            "DO",
            "DZ",
            "EC",
            "EE",
            "EG",
            "EH",
            "ER",
            "ES",
            "ET",
            "FI",
            "FJ",
            "FK",
            "FM",
            "FO",
            "FR",
            "GA",
            "GB",
            "GD",
            "GE",
            "GF",
            "GG",
            "GH",
            "GI",
            "GL",
            "GM",
            "GN",
            "GP",
            "GQ",
            "GR",
            "GS",
            "GT",
            "GU",
            "GW",
            "GY",
            "HK",
            "HM",
            "HN",
            "HR",
            "HT",
            "HU",
            "ID",
            "IE",
            "IL",
            "IM",
            "IN",
            "IO",
            "IQ",
            "IR",
            "IS",
            "IT",
            "JE",
            "JM",
            "JO",
            "JP",
            "KE",
            "KG",
            "KH",
            "KI",
            "KM",
            "KN",
            "KP",
            "KR",
            "KW",
            "KY",
            "KZ",
            "LA",
            "LB",
            "LC",
            "LI",
            "LK",
            "LR",
            "LS",
            "LT",
            "LU",
            "LV",
            "LY",
            "MA",
            "MC",
            "MD",
            "ME",
            "MF",
            "MG",
            "MH",
            "MK",
            "ML",
            "MM",
            "MN",
            "MO",
            "MP",
            "MQ",
            "MR",
            "MS",
            "MT",
            "MU",
            "MV",
            "MW",
            "MX",
            "MY",
            "MZ",
            "NA",
            "NC",
            "NE",
            "NF",
            "NG",
            "NI",
            "NL",
            "NO",
            "NP",
            "NR",
            "NU",
            "NZ",
            "OM",
            "PA",
            "PE",
            "PF",
            "PG",
            "PH",
            "PK",
            "PL",
            "PM",
            "PN",
            "PR",
            "PS",
            "PT",
            "PW",
            "PY",
            "QA",
            "RE",
            "RO",
            "RS",
            "RU",
            "RW",
            "SA",
            "SB",
            "SC",
            "SD",
            "SE",
            "SG",
            "SH",
            "SI",
            "SJ",
            "SK",
            "SL",
            "SM",
            "SN",
            "SO",
            "SR",
            "SS",
            "ST",
            "SV",
            "SX",
            "SY",
            "SZ",
            "TC",
            "TD",
            "TF",
            "TG",
            "TH",
            "TJ",
            "TK",
            "TL",
            "TM",
            "TN",
            "TO",
            "TR",
            "TT",
            "TV",
            "TW",
            "TZ",
            "UA",
            "UG",
            "UM",
            "US",
            "UY",
            "UZ",
            "VA",
            "VC",
            "VE",
            "VG",
            "VI",
            "VN",
            "VU",
            "WF",
            "WS",
            "YE",
            "YT",
            "ZA",
            "ZM",
            "ZW"
          ],
          "type": "string",
          "x-sub-format": "Country Code"
        },
        "country_name": {
          "type": "string",
          "x-sub-format": "Country"
        },
        "customer_id": {
          "description": "A unique numeric identifier for the customer",
          "format": "int64",
          "type": "integer",
          "x-readonly": true,
          "x-reference-objectname": "customer"
        },
        "default": {
          "type": "boolean"
        },
        "first_name": {
          "description": "The customer's first name",
          "type": "string",
          "x-sub-format": "First Name"
        },
        "id": {
          "description": "A unique numeric identifier for the address",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "last_name": {
          "description": "The customer's last name",
          "type": "string",
          "x-sub-format": "Last Name"
        },
        "latitude": {
          "description": "The latitude of the billing address",
          "format": "double",
          "type": "number",
          "x-sub-format": "Latitude"
        },
        "longitude": {
          "description": "The longitude of the billing address",
          "format": "double",
          "type": "number",
          "x-sub-format": "Longitude"
        },
        "name": {
          "description": "The customer's name",
          "type": "string",
          "x-sub-format": "Full Name"
        },
        "phone": {
          "description": "The customer's phone number for this mailing address",
          "type": "string",
          "x-sub-format": "Phone"
        },
        "province": {
          "description": "The customer's province or state name",
          "type": "string",
          "x-sub-format": "State"
        },
        "province_code": {
          "description": "The two-letter pcode for the customer's province or state",
          "type": "string",
          "x-sub-format": "State (abbrev)"
        },
        "zip": {
          "description": "The customer's zip or postal code",
          "type": "string",
          "x-sub-format": "Postal Code"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "addresses",
      "type": "object"
    },
    "productsVariantsPOST": {
      "description": "A product variant is a different version of a product, such as differing sizes or differing colors",
      "properties": {
        "barcode": {
          "description": "The barcode, UPC or ISBN number for the product",
          "type": "string"
        },
        "compare_at_price": {
          "description": "The competitors prices for the same item",
          "type": "string",
          "x-nullable": true,
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "fulfillment_service": {
          "description": "Service which is doing the fulfillment",
          "type": "string"
        },
        "grams": {
          "description": "The weight of the product variant in grams",
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "description": "The unique numeric identifier for the product variant",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "image_id": {
          "description": "The unique numeric identifier for a product's image. Image must be associated to the same product as the variant",
          "format": "int64",
          "type": "integer",
          "x-readonly": true,
          "x-reference-objectname": "images"
        },
        "inventory_management": {
          "description": "Specifies whether Shopify tracks the number of items in stock for this product variant",
          "type": "string"
        },
        "inventory_policy": {
          "default": "deny",
          "description": "Specifies whether or not customers are allowed to place an order for a product variant when it's out of stock",
          "enum": [
            "deny",
            "continue"
          ],
          "type": "string",
          "x-sub-format": "Enum"
        },
        "inventory_quantity": {
          "default": 1,
          "description": "The number of items in stock for this product variant",
          "format": "int32",
          "type": "integer"
        },
        "inventory_quantity_adjustment": {
          "description": "Instead of sending a new and old value for inventory an adjustment value can be sent. If an adjustment value is sent it will take priority",
          "format": "int32",
          "type": "integer"
        },
        "metafields": {
          "description": "Attaches additional information to a shop's resources",
          "items": {
            "$ref": "#/definitions/metaFieldPOST"
          },
          "type": "array"
        },
        "old_inventory_quantity": {
          "description": "The original stock level the client believes the product variant has",
          "format": "int32",
          "type": "integer"
        },
        "option1": {
          "default": "Default Title",
          "description": "Custom properties that a shop owner can use to define product variants",
          "type": "string"
        },
        "option2": {
          "default": "Default Title",
          "description": "Custom properties that a shop owner can use to define product variants",
          "type": "string"
        },
        "option3": {
          "default": "Default Title",
          "description": "Custom properties that a shop owner can use to define product variants",
          "type": "string"
        },
        "position": {
          "description": "The order of the product variant in the list of product variants. 1 is the first position",
          "format": "int32",
          "type": "integer"
        },
        "price": {
          "description": "The price of the product variant",
          "type": "string",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "requires_shipping": {
          "description": "Specifies whether or not a customer needs to provide a shipping address when placing an order for this product variant",
          "type": "boolean"
        },
        "sku": {
          "description": "A unique identifier for the product in the shop",
          "type": "string"
        },
        "taxable": {
          "description": "Specifies whether or not a tax is charged when the product variant is sold",
          "type": "boolean"
        },
        "title": {
          "description": "The title of the product variant",
          "type": "string",
          "x-name": true
        },
        "weight": {
          "description": "The weight of the product variant in the unit system specified with weight_unit",
          "format": "double",
          "type": "number"
        },
        "weight_unit": {
          "description": "The unit of measurement that applies to the product variant's weight",
          "enum": [
            "g",
            "kg",
            "oz",
            "lb"
          ],
          "type": "string",
          "x-sub-format": "Enum"
        }
      },
      "required": [
        "option1"
      ],
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "variants",
      "type": "object"
    },
    "metafieldsPATCH": {
      "properties": {
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        },
        "description": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "key": {
          "type": "string",
          "x-readOnly": true
        },
        "namespace": {
          "type": "string",
          "x-readOnly": true
        },
        "owner_id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "owner_resource": {
          "type": "string",
          "x-readOnly": true
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        },
        "value": {
          "format": "int32",
          "type": "integer"
        },
        "value_type": {
          "type": "string"
        }
      },
      "required": [
        "value",
        "value_type"
      ],
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "metafields",
      "type": "object"
    },
    "OrderCustomer": {
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "customer",
      "description": "A customer resource instance represents a customer account with the shop.",
      "properties": {
        "accepts_marketing": {
          "type": "boolean",
          "description": "Indicates whether the customer has consented to be sent marketing material via email. Valid values are true or false"
        },
        "created_at": {
          "format": "date-time",
          "x-readonly": true,
          "type": "string",
          "x-sub-format": "Date Time - ISO 8601",
          "description": "The date and time when the customer was created.The API returns this value in ISO 8601 format"
        },
        "default_address": {
          "$ref": "#/definitions/Address",
          "description": "The default address for the customer",
          "x-reference-objectname": "addresses"
        },
        "email": {
          "type": "string",
          "description": "The unique email address of the customer. Attempting to assign the same email address to multiple customers will return an error",
          "x-sub-format": "Email"
        },
        "first_name": {
          "type": "string",
          "x-name": true,
          "description": "The customer's first name",
          "x-sub-format": "First Name"
        },
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "A unique numeric identifier for the customer"
        },
        "last_name": {
          "type": "string",
          "description": "The customer's last name",
          "x-sub-format": "Last Name"
        },
        "last_order_id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "The id of the customer's last order",
          "x-reference-objectname": "order"
        },
        "last_order_name": {
          "x-readonly": true,
          "type": "string",
          "description": "The name of the customer's last order. This is directly related to the Order's name field"
        },
        "note": {
          "type": "string",
          "description": "A note about the customer"
        },
        "orders_count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of orders associated with this customer"
        },
        "phone": {
          "type": "string",
          "description": "The unique phone number for this customer. Attempting to assign the same phone number to multiple customers will return an error",
          "x-sub-format": "Phone"
        },
        "tax_exempt": {
          "type": "boolean",
          "description": "Indicates whether the customer should be charged taxes when placing orders. Valid values are true or false"
        },
        "state": {
          "type": "string",
          "description": "The state of the customer's account in a shop. The state can be changed in the shop admin or by the customer, but not through the API",
          "enum": [
            "disabled",
            "invited",
            "enabled",
            "declined"
          ],
          "x-sub-format": "Enum"
        },
        "tags": {
          "type": "string",
          "description": "Tags are additional short descriptors formatted as a string of comma-separated values. For example, if an article has three tags: tag1, tag2, tag3."
        },
        "total_spent": {
          "type": "string",
          "description": "The total amount of money that the customer has spent at the shop",
          "x-sub-format": "Money",
          "x-precision": 2
        },
        "updated_at": {
          "x-readonly": true,
          "format": "date-time",
          "type": "string",
          "x-sub-format": "Date Time - ISO 8601",
          "description": "The date and time when the customer information was updated. The API returns this value in ISO 8601 format"
        },
        "verified_email": {
          "type": "boolean",
          "description": "States whether or not the email address has been verified"
        }
      },
      "type": "object"
    },
    "BulkStatus": {
      "description": "Status of the bulk upload.",
      "type": "object",
      "properties": {
        "batchId": {
          "description": "Contact/Leads loaded",
          "type": "number"
        },
        "message": {
          "type": "string"
        },
        "numOfLeadsProcessed": {
          "description": "Contact/Leads loaded",
          "type": "number"
        },
        "numOfRowsFailed": {
          "description": "Failed count",
          "type": "number"
        },
        "numOfRowsWithWarning": {
          "description": "Contact/Leads that had warnings",
          "type": "number"
        },
        "status": {
          "description": "Status of the bulk job",
          "type": "string"
        }
      }
    },
    "OrderFulfillment": {
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "fulfillments",
      "description": "A fulfillment represents a shipment of one or more items in an order",
      "properties": {
        "created_at": {
          "description": "The date and time when the fulfillment was created. The API returns this value in ISO 8601 format",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "The unique numeric identifier for the fulfillment"
        },
        "line_items": {
          "items": {
            "$ref": "#/definitions/FulfillmentLineItem"
          },
          "type": "array",
          "description": " A historical record of each item in the fulfillment"
        },
        "notify_customer": {
          "type": "boolean",
          "description": "A flag indicating whether the customer should be notified",
          "default": true
        },
        "order_id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "The unique numeric identifier for the order",
          "x-reference-objectname": "order"
        },
        "receipt": {
          "$ref": "#/definitions/Receipt",
          "description": "Text field that provides information about the receipt"
        },
        "status": {
          "type": "string",
          "description": "The status of the fulfillment"
        },
        "tracking_company": {
          "type": "string",
          "description": " The name of the shipping company",
          "enum": [
            "4PX",
            "APC",
            "Amazon Logistics UK",
            "Amazon Logistics US",
            "Australia Post",
            "Bluedart",
            "Canada Post",
            "China  Post",
            "Correios",
            "DHL Express",
            "DHL eCommerce",
            "DHL eCommerce Asia",
            "Delhivery",
            "Eagle",
            "FSC",
            "FedEx",
            "FedEx UK",
            "GLS",
            "Globegistics",
            "Japan Post",
            "New Zealand Post",
            "PostNord",
            "Purolator",
            "Royal Mail",
            "Sagawa (EN)",
            "Sagawa (JA)",
            "TNT",
            "TNT Post",
            "UPS",
            "USPS",
            "Yamato (EN)",
            "Yamato (JA)"
          ],
          "x-nullable": true,
          "x-sub-format": "Enum"
        },
        "tracking_numbers": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The shipping number, provided by the shipping company"
        },
        "updated_at": {
          "description": "The date and time when the fulfillment was last modified. The API returns this value in ISO 8601 format",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "service": {
          "type": "string"
        },
        "tracking_url": {
          "type": "string",
          "x-sub-format": "Url"
        },
        "tracking_urls": {
          "items": {
            "type": "string",
            "x-sub-format": "Url"
          },
          "type": "array",
          "description": "The URLs to track the fulfillment"
        },
        "variant_inventory_management": {
          "type": "string",
          "description": "States the name of the inventory management service"
        }
      },
      "type": "object"
    },
    "customersAddressPOST": {
      "description": "A customer address resource instance represents one of the many addresses a customer may have",
      "properties": {
        "address1": {
          "description": "The customer's mailing address",
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the  address1,address2,city,company,country,country_code,first_name,last_name,name,phone,zip,province,province_code fields is required for successful POST request.",
          "x-nullable": true,
          "x-sub-format": "Street Number"
        },
        "address2": {
          "description": "An additional field for the customer's mailing address",
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the  address1,address2,city,company,country,country_code,first_name,last_name,name,phone,zip,province,province_code fields is required for successful POST request.",
          "x-nullable": true,
          "x-sub-format": "Street Name"
        },
        "city": {
          "description": " The customer's city",
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the  address1,address2,city,company,country,country_code,first_name,last_name,name,phone,zip,province,province_code fields is required for successful POST request.",
          "x-nullable": true,
          "x-sub-format": "City"
        },
        "company": {
          "description": "The customer's company",
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the  address1,address2,city,company,country,country_code,first_name,last_name,name,phone,zip,province,province_code fields is required for successful POST request.",
          "x-nullable": true,
          "x-sub-format": "Company Name"
        },
        "country": {
          "description": "The customer's country",
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the  address1,address2,city,company,country,country_code,first_name,last_name,name,phone,zip,province,province_code fields is required for successful POST request.Additionally if province or province_code is posted then either valid country or country_code must be posted along with it",
          "x-nullable": true,
          "x-sub-format": "Country"
        },
        "country_code": {
          "description": "The two-letter country code corresponding to the customer's country",
          "enum": [
            "AD",
            "AE",
            "AF",
            "AG",
            "AI",
            "AL",
            "AM",
            "AO",
            "AQ",
            "AR",
            "AS",
            "AT",
            "AU",
            "AW",
            "AX",
            "AZ",
            "BA",
            "BB",
            "BD",
            "BE",
            "BF",
            "BG",
            "BH",
            "BI",
            "BJ",
            "BL",
            "BM",
            "BN",
            "BO",
            "BQ",
            "BR",
            "BS",
            "BT",
            "BV",
            "BW",
            "BY",
            "BZ",
            "CA",
            "CC",
            "CD",
            "CF",
            "CG",
            "CH",
            "CI",
            "CK",
            "CL",
            "CM",
            "CN",
            "CO",
            "CR",
            "CU",
            "CV",
            "CW",
            "CX",
            "CY",
            "CZ",
            "DE",
            "DJ",
            "DK",
            "DM",
            "DO",
            "DZ",
            "EC",
            "EE",
            "EG",
            "EH",
            "ER",
            "ES",
            "ET",
            "FI",
            "FJ",
            "FK",
            "FM",
            "FO",
            "FR",
            "GA",
            "GB",
            "GD",
            "GE",
            "GF",
            "GG",
            "GH",
            "GI",
            "GL",
            "GM",
            "GN",
            "GP",
            "GQ",
            "GR",
            "GS",
            "GT",
            "GU",
            "GW",
            "GY",
            "HK",
            "HM",
            "HN",
            "HR",
            "HT",
            "HU",
            "ID",
            "IE",
            "IL",
            "IM",
            "IN",
            "IO",
            "IQ",
            "IR",
            "IS",
            "IT",
            "JE",
            "JM",
            "JO",
            "JP",
            "KE",
            "KG",
            "KH",
            "KI",
            "KM",
            "KN",
            "KP",
            "KR",
            "KW",
            "KY",
            "KZ",
            "LA",
            "LB",
            "LC",
            "LI",
            "LK",
            "LR",
            "LS",
            "LT",
            "LU",
            "LV",
            "LY",
            "MA",
            "MC",
            "MD",
            "ME",
            "MF",
            "MG",
            "MH",
            "MK",
            "ML",
            "MM",
            "MN",
            "MO",
            "MP",
            "MQ",
            "MR",
            "MS",
            "MT",
            "MU",
            "MV",
            "MW",
            "MX",
            "MY",
            "MZ",
            "NA",
            "NC",
            "NE",
            "NF",
            "NG",
            "NI",
            "NL",
            "NO",
            "NP",
            "NR",
            "NU",
            "NZ",
            "OM",
            "PA",
            "PE",
            "PF",
            "PG",
            "PH",
            "PK",
            "PL",
            "PM",
            "PN",
            "PR",
            "PS",
            "PT",
            "PW",
            "PY",
            "QA",
            "RE",
            "RO",
            "RS",
            "RU",
            "RW",
            "SA",
            "SB",
            "SC",
            "SD",
            "SE",
            "SG",
            "SH",
            "SI",
            "SJ",
            "SK",
            "SL",
            "SM",
            "SN",
            "SO",
            "SR",
            "SS",
            "ST",
            "SV",
            "SX",
            "SY",
            "SZ",
            "TC",
            "TD",
            "TF",
            "TG",
            "TH",
            "TJ",
            "TK",
            "TL",
            "TM",
            "TN",
            "TO",
            "TR",
            "TT",
            "TV",
            "TW",
            "TZ",
            "UA",
            "UG",
            "UM",
            "US",
            "UY",
            "UZ",
            "VA",
            "VC",
            "VE",
            "VG",
            "VI",
            "VN",
            "VU",
            "WF",
            "WS",
            "YE",
            "YT",
            "ZA",
            "ZM",
            "ZW"
          ],
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the  address1,address2,city,company,country,country_code,first_name,last_name,name,phone,zip,province,province_code fields is required for successful POST request.Additionally if province or province_code is posted then either valid country or country_code must be posted along with it",
          "x-nullable": true,
          "x-sub-format": "Country Code"
        },
        "country_name": {
          "type": "string",
          "x-nullable": true,
          "x-sub-format": "Country"
        },
        "default": {
          "type": "boolean"
        },
        "first_name": {
          "description": "The customer's first name",
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the  address1,address2,city,company,country,country_code,first_name,last_name,name,phone,zip,province,province_code fields is required for successful POST request.",
          "x-nullable": true,
          "x-sub-format": "First Name"
        },
        "id": {
          "description": "A unique numeric identifier for the address",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "last_name": {
          "description": "The customer's last name",
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the  address1,address2,city,company,country,country_code,first_name,last_name,name,phone,zip,province,province_code fields is required for successful POST request.",
          "x-nullable": true,
          "x-sub-format": "Last Name"
        },
        "name": {
          "description": "The customer's name",
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the  address1,address2,city,company,country,country_code,first_name,last_name,name,phone,zip,province,province_code fields is required for successful POST request.",
          "x-nullable": true,
          "x-sub-format": "Full Name"
        },
        "phone": {
          "description": "The customer's phone number for this mailing address",
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the  address1,address2,city,company,country,country_code,first_name,last_name,name,phone,zip,province,province_code fields is required for successful POST request.",
          "x-nullable": true,
          "x-sub-format": "Phone"
        },
        "province": {
          "description": "The customer's province or state name",
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the  address1,address2,city,company,country,country_code,first_name,last_name,name,phone,zip,province,province_code fields is required for successful POST request.",
          "x-nullable": true,
          "x-sub-format": "State"
        },
        "province_code": {
          "description": "The two-letter pcode for the customer's province or state",
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the  address1,address2,city,company,country,country_code,first_name,last_name,name,phone,zip,province,province_code fields is required for successful POST request.",
          "x-nullable": true,
          "x-sub-format": "State (abbrev)"
        },
        "zip": {
          "description": "The customer's zip or postal code",
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the  address1,address2,city,company,country,country_code,first_name,last_name,name,phone,zip,province,province_code fields is required for successful POST request.",
          "x-nullable": true,
          "x-sub-format": "State (abbrev)"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "addresses",
      "type": "object"
    },
    "TransactionReceipt": {
      "properties": {}
    },
    "objectsMetadataFields": {
      "properties": {
        "mask": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "vendorDisplayName": {
          "type": "string"
        },
        "vendorPath": {
          "type": "string"
        },
        "vendorReadOnly": {
          "type": "boolean"
        },
        "vendorRequired": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "metafields": {
      "properties": {
        "created_at": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "key": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "owner_id": {
          "format": "int32",
          "type": "integer"
        },
        "owner_resource": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "value": {
          "format": "int32",
          "type": "integer"
        },
        "value_type": {
          "type": "string"
        }
      },
      "required": [
        "value_type"
      ],
      "x-primary-key": [
        "id"
      ],
      "type": "object"
    },
    "VariantPOST": {
      "x-vendor-objectname": "variants",
      "x-primary-key": [
        "id"
      ],
      "required": [
        "option1"
      ],
      "description": "A product variant is a different version of a product, such as differing sizes or differing colors",
      "properties": {
        "barcode": {
          "description": "The barcode, UPC or ISBN number for the product",
          "type": "string"
        },
        "compare_at_price": {
          "type": "string",
          "description": "The competitors prices for the same item",
          "x-sub-format": "Money",
          "x-precision": 2,
          "x-nullable": true
        },
        "fulfillment_service": {
          "description": "Service which is doing the fulfillment",
          "type": "string"
        },
        "grams": {
          "type": "integer",
          "format": "int32",
          "description": "The weight of the product variant in grams"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-readonly": true,
          "description": "The unique numeric identifier for the product variant"
        },
        "image_id": {
          "type": "integer",
          "format": "int64",
          "x-readonly": true,
          "description": "The unique numeric identifier for a product's image. Image must be associated to the same product as the variant",
          "x-reference-objectname": "images"
        },
        "inventory_management": {
          "description": "Specifies whether Shopify tracks the number of items in stock for this product variant",
          "type": "string"
        },
        "inventory_policy": {
          "type": "string",
          "description": "Specifies whether or not customers are allowed to place an order for a product variant when it's out of stock",
          "enum": [
            "deny",
            "continue"
          ],
          "x-sub-format": "Enum",
          "default": "deny"
        },
        "inventory_quantity": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items in stock for this product variant",
          "default": 1
        },
        "inventory_quantity_adjustment": {
          "type": "integer",
          "format": "int32",
          "description": "Instead of sending a new and old value for inventory an adjustment value can be sent. If an adjustment value is sent it will take priority"
        },
        "metafields": {
          "items": {
            "$ref": "#/definitions/MetaFieldPOST"
          },
          "type": "array",
          "description": "Attaches additional information to a shop's resources"
        },
        "old_inventory_quantity": {
          "type": "integer",
          "format": "int32",
          "description": "The original stock level the client believes the product variant has"
        },
        "option1": {
          "type": "string",
          "description": "Custom properties that a shop owner can use to define product variants",
          "default": "Default Title"
        },
        "option2": {
          "type": "string",
          "description": "Custom properties that a shop owner can use to define product variants",
          "default": "Default Title"
        },
        "option3": {
          "type": "string",
          "description": "Custom properties that a shop owner can use to define product variants",
          "default": "Default Title"
        },
        "position": {
          "type": "integer",
          "format": "int32",
          "description": "The order of the product variant in the list of product variants. 1 is the first position"
        },
        "price": {
          "type": "string",
          "x-sub-format": "Money",
          "x-precision": 2,
          "description": "The price of the product variant"
        },
        "requires_shipping": {
          "type": "boolean",
          "description": "Specifies whether or not a customer needs to provide a shipping address when placing an order for this product variant"
        },
        "sku": {
          "type": "string",
          "description": "A unique identifier for the product in the shop"
        },
        "taxable": {
          "type": "boolean",
          "description": "Specifies whether or not a tax is charged when the product variant is sold"
        },
        "title": {
          "type": "string",
          "description": "The title of the product variant",
          "x-name": true
        },
        "weight": {
          "format": "double",
          "type": "number",
          "description": "The weight of the product variant in the unit system specified with weight_unit"
        },
        "weight_unit": {
          "type": "string",
          "description": "The unit of measurement that applies to the product variant's weight",
          "enum": [
            "g",
            "kg",
            "oz",
            "lb"
          ],
          "x-sub-format": "Enum"
        }
      },
      "type": "object"
    },
    "discountCode": {
      "properties": {
        "code": {
          "type": "string"
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "price_rule_id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        },
        "usage_count": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "discount_codes",
      "type": "object"
    },
    "TransactionPaymentDetails": {
      "properties": {
        "avs_result_code": {
          "type": "string",
          "description": "The Response code from AVS the address verification system. The code is a single letter"
        },
        "credit_card_bin": {
          "type": "string",
          "description": "The issuer identification number (IIN), formerly known as bank identification number (BIN) ] of the customer's credit card. This is made up of the first few digits of the credit card number"
        },
        "credit_card_company": {
          "type": "string",
          "description": "The name of the company who issued the customer's credit card"
        },
        "credit_card_number": {
          "type": "string",
          "description": "The customer's credit card number, with most of the leading digits redacted with Xs"
        },
        "cvv_result_code": {
          "type": "string",
          "description": " The Response code from the credit card company indicating whether the customer entered the card security code, a.k.a. card verification value, correctly. The code is a single letter or empty string"
        }
      },
      "type": "object"
    },
    "customCollectionsList": {
      "items": {
        "$ref": "#/definitions/customCollections"
      },
      "type": "array"
    },
    "ordersRisks": {
      "description": "The Order risk assessment is used to indicate to a merchant the fraud checks that have been done on an order",
      "properties": {
        "cause_cancel": {
          "description": "Use this flag when a fraud check is accompanied with a call to the Orders API to cancel the order. This will indicate to the merchant that this risk was severe enough to force cancellation of the order",
          "type": "boolean"
        },
        "display": {
          "description": "States whether or not the risk is displayed",
          "type": "boolean"
        },
        "id": {
          "description": "A unique numeric identifier for the order risk",
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "merchant_message": {
          "type": "string"
        },
        "message": {
          "description": "A message that should be displayed to the merchant to indicate the results of the fraud check",
          "type": "string"
        },
        "order_id": {
          "format": "int64",
          "type": "integer",
          "x-readonly": true,
          "x-reference-objectname": "order"
        },
        "recommendation": {
          "description": "The recommended action given to the merchant",
          "enum": [
            "cancel",
            "investigate",
            "accept"
          ],
          "type": "string",
          "x-sub-format": "Enum"
        },
        "score": {
          "description": "A number between 0 and 1 indicating percentage likelihood of being fraud",
          "type": "string"
        },
        "source": {
          "description": "This indicates the source of the risk assessment",
          "type": "string"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "risks",
      "type": "object"
    },
    "OrderLineItem": {
      "description": "A list of line item objects, each one containing information about an item in the order",
      "properties": {
        "fulfillment_service": {
          "description": "Service provider who is doing the fulfilment,Valid values are either 'manual' or the name of the provider. eg: 'amazon', 'shipwire', etc",
          "type": "string"
        },
        "fulfillment_status": {
          "description": " How far along an order is in terms line items fulfilled",
          "type": "string",
          "enum": [
            "fulfilled",
            "null",
            "partial"
          ],
          "x-nullable": true,
          "x-sub-format": "Enum"
        },
        "gift_card": {
          "type": "boolean",
          "description": "States whether or not the line_item is a gift card. If so, the item is not taxed or considered for shipping charges"
        },
        "grams": {
          "type": "integer",
          "format": "int32",
          "description": "The weight of the item in grams"
        },
        "name": {
          "type": "string",
          "x-name": true,
          "description": "The name of the product variant"
        },
        "price": {
          "type": "string",
          "x-sub-format": "Money",
          "x-precision": 2,
          "description": "The price of the item before discounts have been applied"
        },
        "product_id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "The unique numeric identifier for the product in the fulfilment.Can be null if the original product associated with the order is deleted at a later date",
          "x-nullable": true,
          "x-reference-objectname": "product"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "The number of products that were purchased"
        },
        "requires_shipping": {
          "type": "boolean",
          "description": " States whether or not the fulfilment requires shipping"
        },
        "sku": {
          "type": "string",
          "description": "A unique identifier of the item in the fulfilment"
        },
        "tax_lines": {
          "items": {
            "$ref": "#/definitions/LineItemTaxLine"
          },
          "type": "array",
          "description": "An array of tax_line objects, each of which details the total taxes applicable to the order.When creating an order through the API, tax lines may be specified on the order or the line items but not both"
        },
        "taxable": {
          "type": "boolean",
          "description": "States whether or not the product was taxable"
        },
        "title": {
          "type": "string",
          "description": "The title of the product"
        },
        "variant_id": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the product variant"
        },
        "variant_title": {
          "type": "string",
          "description": "The title of the product variant"
        },
        "vendor": {
          "type": "string",
          "description": "The name of the supplier of the item"
        },
        "fulfillable_quantity": {
          "type": "integer",
          "format": "int32",
          "description": "The amount available to fulfill. This is the quantity - max(refunded_quantity, fulfilled_quantity) - pending_fulfilled_quantity - open_fulfilled_quantity"
        },
        "total_discount": {
          "type": "string",
          "x-sub-format": "Money",
          "x-precision": 2,
          "description": "The total discount amount applied to this line item. This value is not subtracted in the line item price"
        },
        "product_exists": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the line item",
          "x-readonly": true
        },
        "properties": {
          "items": {
            "$ref": "#/definitions/LineItemProperties"
          },
          "type": "array",
          "description": "An array of custom information for an item that has been added to the cart. Often used to provide product customization options"
        },
        "variant_inventory_management": {
          "type": "string"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "type": "object"
    },
    "ordersRisksPOST": {
      "description": "The Order risk assessment is used to indicate to a merchant the fraud checks that have been done on an order",
      "properties": {
        "cause_cancel": {
          "description": "Use this flag when a fraud check is accompanied with a call to the Orders API to cancel the order. This will indicate to the merchant that this risk was severe enough to force cancellation of the order",
          "type": "boolean"
        },
        "display": {
          "description": "States whether or not the risk is displayed",
          "type": "boolean"
        },
        "id": {
          "description": "A unique numeric identifier for the order risk",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "merchant_message": {
          "type": "string"
        },
        "message": {
          "description": "A message that should be displayed to the merchant to indicate the results of the fraud check",
          "type": "string"
        },
        "recommendation": {
          "description": "The recommended action given to the merchant",
          "enum": [
            "cancel",
            "investigate",
            "accept"
          ],
          "type": "string",
          "x-sub-format": "Enum"
        },
        "score": {
          "description": "A number between 0 and 1 indicating percentage likelihood of being fraud",
          "type": "string"
        },
        "source": {
          "description": "This indicates the source of the risk assessment",
          "type": "string"
        }
      },
      "required": [
        "recommendation",
        "source"
      ],
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "risks",
      "type": "object"
    },
    "RefundOrderAdjustments": {
      "x-primary-key": [
        "id"
      ],
      "properties": {
        "tax_amount": {
          "type": "string",
          "x-sub-format": "Money",
          "x-precision": 2
        },
        "reason": {
          "type": "string"
        },
        "amount": {
          "type": "string",
          "x-sub-format": "Money",
          "x-precision": 2
        },
        "kind": {
          "type": "string"
        },
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64"
        },
        "order_id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "x-reference-objectname": "order"
        },
        "refund_id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "x-reference-objectname": "refunds"
        }
      },
      "type": "object"
    },
    "refundCalculatelineitem": {
      "properties": {
        "discounted_price": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "discounted_total_price": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "line_item_id": {
          "format": "int64",
          "type": "integer",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "x-readonly": true
        },
        "price": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "quantity": {
          "format": "int32",
          "type": "integer",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call"
        },
        "subtotal": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "total_cart_discount_amount": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "total_tax": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "x-precision": 2,
          "x-sub-format": "Money"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "type": "object"
    },
    "MetaField": {
      "x-vendor-objectname": "metafields",
      "description": "Metafields allow you to attach metadata, which is additional information, to a store's resources",
      "x-primary-key": [
        "id"
      ],
      "properties": {
        "created_at": {
          "description": "The date and time when the metafield was created. The API returns this value in ISO 8601 format",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "description": {
          "type": "string",
          "description": "Additional information about the metafield. This property is optional",
          "x-nullable": true
        },
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "Unique numeric identifier for the metafield"
        },
        "key": {
          "description": "The identifier for the metadata field.",
          "x-length": 30,
          "type": "string",
          "x-name": true
        },
        "namespace": {
          "x-length": 20,
          "type": "string",
          "description": "Container for a set of metafields. You need to define a custom namespace for your metafields to distinguish them from metafields used by other apps"
        },
        "owner_id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "The unique ID of the resource that the metafield is attached to"
        },
        "owner_resource": {
          "description": "The type of resource that the metafield is attached to",
          "type": "string"
        },
        "value": {
          "description": "Information to be stored as metadata.",
          "type": "string"
        },
        "value_type": {
          "description": "States whether the information in the value is stored as a 'string' or 'integer.'",
          "type": "string",
          "enum": [
            "string",
            "integer"
          ],
          "x-sub-format": "Enum"
        },
        "updated_at": {
          "description": "The date and time when the metafield was published. The API returns this value in ISO 8601 format",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        }
      },
      "type": "object"
    },
    "TransactionPOST": {
      "x-primary-key": [
        "id"
      ],
      "required": [
        "amount"
      ],
      "x-vendor-objectname": "transaction",
      "description": " An object containing information about the payment",
      "properties": {
        "amount": {
          "type": "string",
          "description": "The amount of money that the transaction was for",
          "x-sub-format": "Money",
          "x-precision": 2
        },
        "authorization": {
          "type": "string",
          "description": "The authorization code associated with the transaction"
        },
        "currency": {
          "type": "string",
          "description": "The three letter code (ISO 4217) for the currency used for the payment",
          "x-sub-format": "Currency Code",
          "enum": [
            "AFA",
            "ALL",
            "DZD",
            "USD",
            "ESP",
            "AOA",
            "XCD",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZM",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYB",
            "BEF",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BAM",
            "BWP",
            "NOK",
            "BRL",
            "BND",
            "BGL,BGN",
            "BIF",
            "KHR",
            "XAF",
            "CAD",
            "CVE",
            "KYD",
            "CLP",
            "CLF",
            "CNY",
            "HKD",
            "MOP",
            "COP",
            "KMF",
            "CDF",
            "NZD",
            "CRC",
            "HRK",
            "CUP",
            "CYP",
            "CZK",
            "DKK",
            "DJF",
            "DOP",
            "TPE",
            "IDE",
            "ECS",
            "ECV",
            "EGP",
            "SVC",
            "ERN",
            "EEK",
            "ETB",
            "XEU",
            "EUR",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XPF",
            "GMD",
            "GEL",
            "DEM",
            "GHC",
            "GIP",
            "GRD",
            "GTQ",
            "GNF",
            "GWP",
            "GYD",
            "HTG",
            "ITL",
            "HNL",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "XDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KPW",
            "KRW",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LBP",
            "ZAR",
            "LSL",
            "LRD",
            "LYD",
            "CHF",
            "LTL",
            "LUF",
            "MKD",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MTL",
            "MRO",
            "MUR",
            "MXN",
            "MXV",
            "MDL",
            "MNT",
            "MAD",
            "MZM",
            "MMK",
            "NPR",
            "ANG",
            "NLG",
            "NIO",
            "NGN",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "QAR",
            "ROL",
            "RUR",
            "RWF",
            "SHP",
            "WST",
            "STD",
            "SAR",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "LKR",
            "SDP",
            "SRG",
            "SZL",
            "SEK",
            "SYP",
            "TWD",
            "TJR",
            "TZS",
            "THB",
            "TOP",
            "TTD",
            "TND",
            "TRL",
            "TMM",
            "UGX",
            "UAH",
            "AED",
            "GBP",
            "USS",
            "USN",
            "UYU",
            "UZS",
            "VUV",
            "VEB",
            "VND",
            "YER",
            "YUN",
            "ZRN",
            "ZMK",
            "ZWD",
            "ADP",
            "NAD",
            "RUB",
            "RYR",
            "BOV"
          ]
        },
        "error_code": {
          "type": "string",
          "description": "A standardized error code, independent of the payment provider",
          "enum": [
            "null",
            "incorrect_number",
            "invalid_number",
            "invalid_expiry_date",
            "invalid_cvc",
            "expired_card",
            "incorrect_cvc",
            "incorrect_zip",
            "incorrect_address",
            "card_declined",
            "processing_error",
            "call_issuer",
            "pick_up_card"
          ],
          "x-nullable": true
        },
        "gateway": {
          "type": "string",
          "description": "The name of the gateway the transaction was issued through"
        },
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "A unique numeric identifier for the transaction"
        },
        "kind": {
          "type": "string",
          "description": "The kind of transaction ;'authorization': Money that the customer has agreed to pay. Authorization period lasts for up to 7 to 30 days (depending on your payment service) while a store awaits for a customer's capture;'capture': Transfer of money that was reserved during the authorization of a shop;'sale': The combination of authorization and capture, performed in one single step;'void': The cancellation of a pending authorization or capture;'refund': The partial or full return of the captured money to the customer",
          "enum": [
            "authorization",
            "capture",
            "sale",
            "void",
            "refund"
          ]
        },
        "payment_details": {
          "$ref": "#/definitions/TransactionPaymentDetails",
          "description": "An object containing information about the credit card used for this transaction"
        },
        "receipt": {
          "$ref": "#/definitions/TransactionReceipt",
          "description": "A transaction receipt attached to the transaction by the gateway. The value of this field will vary depending on   which gateway the shop is using"
        },
        "status": {
          "type": "string",
          "description": "The status of the transaction",
          "enum": [
            "pending",
            "failure",
            "success",
            "error"
          ]
        },
        "test": {
          "type": "boolean",
          "description": "The option to use the transaction for testing purposes"
        },
        "message": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "rules": {
      "properties": {
        "column": {
          "type": "string"
        },
        "condition": {
          "type": "string"
        },
        "relation": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProductPOST": {
      "x-primary-key": [
        "id"
      ],
      "required": [
        "title",
        "product_type"
      ],
      "x-vendor-objectname": "product",
      "description": "The Product resource lets you update and create products in a merchant's store",
      "properties": {
        "metafields": {
          "items": {
            "$ref": "#/definitions/MetaFieldPOST"
          },
          "type": "array",
          "description": "Metafields allow you to attach metadata, which is additional information, to a store's resources"
        },
        "metafields_global_description_tag": {
          "type": "string",
          "description": "Description of the product used for SEO purposes"
        },
        "metafields_global_title_tag": {
          "type": "string",
          "description": "Name of the product used for SEO purposes"
        },
        "body_html": {
          "type": "string",
          "description": "Description of the product. Supports HTML formatting"
        },
        "handle": {
          "type": "string",
          "description": "Human-friendly unique string for the product. Automatically generated from the product's title"
        },
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "Unique numeric identifier for the product"
        },
        "image": {
          "$ref": "#/definitions/ImagePOST"
        },
        "images": {
          "items": {
            "$ref": "#/definitions/ImagePOST"
          },
          "type": "array",
          "description": "List of image objects, each one representing an image associated with the product"
        },
        "options": {
          "items": {
            "$ref": "#/definitions/OptionPOST"
          },
          "type": "array",
          "description": "Custom product property names like Size, Color, and Material. Products are based on permutations of these options. (maximum: 3 options, 255 characters each)"
        },
        "product_type": {
          "type": "string",
          "description": "Categorization that a product can be tagged with, commonly used for filtering and searching"
        },
        "published": {
          "type": "boolean"
        },
        "published_scope": {
          "type": "string",
          "description": "Indicates whether the product is published to the Point of Sale channel",
          "enum": [
            "web",
            "global"
          ],
          "x-sub-format": "Enum"
        },
        "tags": {
          "type": "string",
          "description": "Categorization that a product can be tagged with. Commonly used for filtering and searching",
          "x-length": 255
        },
        "template_suffix": {
          "type": "string",
          "description": "Suffix of the Liquid template being used"
        },
        "title": {
          "type": "string",
          "description": "Name of the product",
          "x-name": true
        },
        "variants": {
          "items": {
            "$ref": "#/definitions/VariantPOST"
          },
          "type": "array",
          "description": "List of variant objects, each one representing a slightly different version of the product"
        },
        "vendor": {
          "type": "string",
          "description": "Name of the vendor of the product"
        }
      },
      "type": "object"
    },
    "lineItemProperties": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "OptionPATCH": {
      "x-primary-key": [
        "id"
      ],
      "required": [
        "name"
      ],
      "description": "Custom product property names like Size, Color, and Material. Products are based on permutations of these options",
      "properties": {
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ordersPaymentsPOST": {
      "description": " An object containing information about the payment",
      "properties": {
        "amount": {
          "description": "The amount of money that the transaction was for",
          "type": "string",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "authorization": {
          "description": "The authorization code associated with the transaction",
          "type": "string"
        },
        "currency": {
          "description": "The three letter code (ISO 4217) for the currency used for the payment",
          "enum": [
            "AFA",
            "ALL",
            "DZD",
            "USD",
            "ESP",
            "AOA",
            "XCD",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZM",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYB",
            "BEF",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BAM",
            "BWP",
            "NOK",
            "BRL",
            "BND",
            "BGL,BGN",
            "BIF",
            "KHR",
            "XAF",
            "CAD",
            "CVE",
            "KYD",
            "CLP",
            "CLF",
            "CNY",
            "HKD",
            "MOP",
            "COP",
            "KMF",
            "CDF",
            "NZD",
            "CRC",
            "HRK",
            "CUP",
            "CYP",
            "CZK",
            "DKK",
            "DJF",
            "DOP",
            "TPE",
            "IDE",
            "ECS",
            "ECV",
            "EGP",
            "SVC",
            "ERN",
            "EEK",
            "ETB",
            "XEU",
            "EUR",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XPF",
            "GMD",
            "GEL",
            "DEM",
            "GHC",
            "GIP",
            "GRD",
            "GTQ",
            "GNF",
            "GWP",
            "GYD",
            "HTG",
            "ITL",
            "HNL",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "XDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KPW",
            "KRW",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LBP",
            "ZAR",
            "LSL",
            "LRD",
            "LYD",
            "CHF",
            "LTL",
            "LUF",
            "MKD",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MTL",
            "MRO",
            "MUR",
            "MXN",
            "MXV",
            "MDL",
            "MNT",
            "MAD",
            "MZM",
            "MMK",
            "NPR",
            "ANG",
            "NLG",
            "NIO",
            "NGN",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "QAR",
            "ROL",
            "RUR",
            "RWF",
            "SHP",
            "WST",
            "STD",
            "SAR",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "LKR",
            "SDP",
            "SRG",
            "SZL",
            "SEK",
            "SYP",
            "TWD",
            "TJR",
            "TZS",
            "THB",
            "TOP",
            "TTD",
            "TND",
            "TRL",
            "TMM",
            "UGX",
            "UAH",
            "AED",
            "GBP",
            "USS",
            "USN",
            "UYU",
            "UZS",
            "VUV",
            "VEB",
            "VND",
            "YER",
            "YUN",
            "ZRN",
            "ZMK",
            "ZWD",
            "ADP",
            "NAD",
            "RUB",
            "RYR",
            "BOV"
          ],
          "type": "string",
          "x-sub-format": "Currency Code"
        },
        "error_code": {
          "description": "A standardized error code, independent of the payment provider",
          "enum": [
            "null",
            "incorrect_number",
            "invalid_number",
            "invalid_expiry_date",
            "invalid_cvc",
            "expired_card",
            "incorrect_cvc",
            "incorrect_zip",
            "incorrect_address",
            "card_declined",
            "processing_error",
            "call_issuer",
            "pick_up_card"
          ],
          "type": "string",
          "x-nullable": true,
          "x-sub-format": "Enum"
        },
        "gateway": {
          "description": "The name of the gateway the transaction was issued through",
          "type": "string"
        },
        "id": {
          "description": "A unique numeric identifier for the transaction",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "kind": {
          "description": "The kind of transaction ;'authorization': Money that the customer has agreed to pay. Authorization period lasts for up to 7 to 30 days (depending on your payment service) while a store awaits for a customer's capture;'capture': Transfer of money that was reserved during the authorization of a shop;'sale': The combination of authorization and capture, performed in one single step;'void': The cancellation of a pending authorization or capture;'refund': The partial or full return of the captured money to the customer",
          "enum": [
            "authorization",
            "capture",
            "sale",
            "void",
            "refund"
          ],
          "type": "string",
          "x-sub-format": "Enum"
        },
        "message": {
          "type": "string"
        },
        "payment_details": {
          "description": "An object containing information about the credit card used for this transaction",
          "$ref": "#/definitions/paymentDetails"
        },
        "receipt": {
          "description": "A transaction receipt attached to the transaction by the gateway. The value of this field will vary depending on   which gateway the shop is using",
          "$ref": "#/definitions/paymentsReceipt"
        },
        "status": {
          "description": "The status of the transaction",
          "enum": [
            "pending",
            "failure",
            "success",
            "error"
          ],
          "type": "string",
          "x-sub-format": "Enum"
        },
        "test": {
          "description": "The option to use the transaction for testing purposes",
          "type": "boolean"
        }
      },
      "required": [
        "amount",
        "kind"
      ],
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "transaction",
      "type": "object"
    },
    "OrderCustomerPATCH": {
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "customer",
      "description": "A customer resource instance represents a customer account with the shop.",
      "properties": {
        "accepts_marketing": {
          "type": "boolean",
          "description": "Indicates whether the customer has consented to be sent marketing material via email. Valid values are true or false",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "default_address": {
          "$ref": "#/definitions/Address",
          "description": "The default address for the customer",
          "x-reference-objectname": "addresses",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "email": {
          "type": "string",
          "description": "The unique email address of the customer. Attempting to assign the same email address to multiple customers will return an error",
          "x-sub-format": "Email",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "first_name": {
          "type": "string",
          "x-name": true,
          "description": "The customer's first name",
          "x-sub-format": "First Name",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "A unique numeric identifier for the customer"
        },
        "last_name": {
          "type": "string",
          "description": "The customer's last name",
          "x-sub-format": "Last Name",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "last_order_name": {
          "x-readonly": true,
          "type": "string",
          "description": "The name of the customer's last order. This is directly related to the Order's name field",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "note": {
          "type": "string",
          "description": "A note about the customer",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "orders_count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of orders associated with this customer",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "phone": {
          "type": "string",
          "description": "The unique phone number for this customer. Attempting to assign the same phone number to multiple customers will return an error",
          "x-sub-format": "Phone",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "tax_exempt": {
          "type": "boolean",
          "description": "Indicates whether the customer should be charged taxes when placing orders. Valid values are true or false",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "tags": {
          "type": "string",
          "description": "Tags are additional short descriptors formatted as a string of comma-separated values. For example, if an article has three tags: tag1, tag2, tag3.",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "total_spent": {
          "type": "string",
          "description": "The total amount of money that the customer has spent at the shop",
          "x-sub-format": "Money",
          "x-precision": 2,
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "verified_email": {
          "type": "boolean",
          "description": "States whether or not the email address has been verified",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        }
      },
      "type": "object"
    },
    "prerequisite_shipping_price_range": {
      "properties": {
        "less_than_or_equal_to": {
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "ordersFulfillmentsCount": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer",
          "x-readonly": true
        }
      },
      "x-vendor-objectname": "fulfillments",
      "type": "object"
    },
    "OrderLineItemPOST": {
      "required": [
        "price",
        "title"
      ],
      "x-primary-key": [
        "id"
      ],
      "description": "A line item object contains information about an item in the order",
      "properties": {
        "fulfillment_service": {
          "description": "Service provider who is doing the fulfilment,Valid values are either 'manual' or the name of the provider. eg: 'amazon', 'shipwire', etc",
          "type": "string"
        },
        "gift_card": {
          "type": "boolean",
          "description": "States whether or not the line_item is a gift card. If so, the item is not taxed or considered for shipping charges"
        },
        "grams": {
          "type": "integer",
          "format": "int32",
          "description": "The weight of the item in grams"
        },
        "name": {
          "type": "string",
          "x-name": true,
          "description": "The name of the product variant"
        },
        "price": {
          "type": "string",
          "x-sub-format": "Money",
          "x-precision": 2,
          "description": "The price of the item before discounts have been applied"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "The number of products that were purchased"
        },
        "requires_shipping": {
          "type": "boolean",
          "description": " States whether or not the fulfilment requires shipping"
        },
        "sku": {
          "type": "string",
          "description": "A unique identifier of the item in the fulfilment"
        },
        "tax_lines": {
          "items": {
            "$ref": "#/definitions/LineItemTaxLine"
          },
          "type": "array",
          "description": "An array of tax_line objects, each of which details the total taxes applicable to the order.When creating an order through the API, tax lines may be specified on the order or the line items but not both"
        },
        "taxable": {
          "type": "boolean",
          "description": "States whether or not the product was taxable"
        },
        "title": {
          "type": "string",
          "description": "The title of the product"
        },
        "variant_title": {
          "type": "string",
          "description": "The title of the product variant"
        },
        "variant_id": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the product variant"
        },
        "vendor": {
          "type": "string",
          "description": "The name of the supplier of the item"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the line item",
          "x-readonly": true
        },
        "properties": {
          "items": {
            "$ref": "#/definitions/LineItemProperties"
          },
          "type": "array",
          "description": "An array of custom information for an item that has been added to the cart. Often used to provide product customization options"
        }
      },
      "type": "object"
    },
    "ordersRefundsPOST": {
      "properties": {
        "amount": {
          "type": "string",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "currency": {
          "description": "The three letter code (ISO 4217) for the currency used for the payment",
          "enum": [
            "AFA",
            "ALL",
            "DZD",
            "USD",
            "ESP",
            "AOA",
            "XCD",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZM",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYB",
            "BEF",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BAM",
            "BWP",
            "NOK",
            "BRL",
            "BND",
            "BGL,BGN",
            "BIF",
            "KHR",
            "XAF",
            "CAD",
            "CVE",
            "KYD",
            "CLP",
            "CLF",
            "CNY",
            "HKD",
            "MOP",
            "COP",
            "KMF",
            "CDF",
            "NZD",
            "CRC",
            "HRK",
            "CUP",
            "CYP",
            "CZK",
            "DKK",
            "DJF",
            "DOP",
            "TPE",
            "IDE",
            "ECS",
            "ECV",
            "EGP",
            "SVC",
            "ERN",
            "EEK",
            "ETB",
            "XEU",
            "EUR",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XPF",
            "GMD",
            "GEL",
            "DEM",
            "GHC",
            "GIP",
            "GRD",
            "GTQ",
            "GNF",
            "GWP",
            "GYD",
            "HTG",
            "ITL",
            "HNL",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "XDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KPW",
            "KRW",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LBP",
            "ZAR",
            "LSL",
            "LRD",
            "LYD",
            "CHF",
            "LTL",
            "LUF",
            "MKD",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MTL",
            "MRO",
            "MUR",
            "MXN",
            "MXV",
            "MDL",
            "MNT",
            "MAD",
            "MZM",
            "MMK",
            "NPR",
            "ANG",
            "NLG",
            "NIO",
            "NGN",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "QAR",
            "ROL",
            "RUR",
            "RWF",
            "SHP",
            "WST",
            "STD",
            "SAR",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "LKR",
            "SDP",
            "SRG",
            "SZL",
            "SEK",
            "SYP",
            "TWD",
            "TJR",
            "TZS",
            "THB",
            "TOP",
            "TTD",
            "TND",
            "TRL",
            "TMM",
            "UGX",
            "UAH",
            "AED",
            "GBP",
            "USS",
            "USN",
            "UYU",
            "UZS",
            "VUV",
            "VEB",
            "VND",
            "YER",
            "YUN",
            "ZRN",
            "ZMK",
            "ZWD",
            "ADP",
            "NAD",
            "RUB",
            "RYR",
            "BOV"
          ],
          "type": "string",
          "x-sub-format": "Currency Code"
        },
        "id": {
          "description": "The unique numeric identifier for the refund. This one is used for API purposes",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "kind": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "note": {
          "description": "The optional note attached to a refund",
          "type": "string"
        },
        "refund_line_items": {
          "description": "Details about one returned/refunded item",
          "items": {
            "$ref": "#/definitions/ordersRefundsLineItem"
          },
          "type": "array",
          "x-conditionally-required-description": "Either refund line items or transactions must be present to make a successful POST call"
        },
        "restock": {
          "description": "Whether or not the line items were added back to the store inventory",
          "type": "boolean"
        },
        "test": {
          "description": "The option to use the transaction for testing purposes",
          "type": "boolean"
        },
        "transactions": {
          "items": {
            "$ref": "#/definitions/refundsTransactionPOST"
          },
          "type": "array",
          "x-conditionally-required-description": "Either refund line items or transactions must be present to make a successful POST call"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "refunds",
      "type": "object"
    },
    "ordersFulfillmentsStatusCancel": {
      "description": "A fulfillment represents a shipment of one or more items in an order",
      "properties": {
        "created_at": {
          "description": "The date and time when the fulfillment was created. The API returns this value in ISO 8601 format",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "id": {
          "description": "The unique numeric identifier for the fulfillment",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "line_items": {
          "description": " A historical record of each item in the fulfillment",
          "items": {
            "$ref": "#/definitions/fulfillmentsLineItems"
          },
          "type": "array"
        },
        "notify_customer": {
          "default": true,
          "description": "A flag indicating whether the customer should be notified",
          "type": "boolean"
        },
        "order_id": {
          "description": "The unique numeric identifier for the order",
          "format": "int64",
          "type": "integer",
          "x-readonly": true,
          "x-reference-objectname": "order"
        },
        "receipt": {
          "description": "Text field that provides information about the receipt",
          "$ref": "#/definitions/ordersFulfillmentsReceipt"
        },
        "service": {
          "type": "string"
        },
        "status": {
          "description": "The status of the fulfillment",
          "type": "string"
        },
        "tracking_company": {
          "description": " The name of the shipping company",
          "enum": [
            "4PX",
            "APC",
            "Amazon Logistics UK",
            "Amazon Logistics US",
            "Australia Post",
            "Bluedart",
            "Canada Post",
            "China  Post",
            "Correios",
            "DHL Express",
            "DHL eCommerce",
            "DHL eCommerce Asia",
            "Delhivery",
            "Eagle",
            "FSC",
            "FedEx",
            "FedEx UK",
            "GLS",
            "Globegistics",
            "Japan Post",
            "New Zealand Post",
            "PostNord",
            "Purolator",
            "Royal Mail",
            "Sagawa (EN)",
            "Sagawa (JA)",
            "TNT",
            "TNT Post",
            "UPS",
            "USPS",
            "Yamato (EN)",
            "Yamato (JA)"
          ],
          "type": "string",
          "x-nullable": true,
          "x-sub-format": "Enum"
        },
        "tracking_number": {
          "type": "string"
        },
        "tracking_numbers": {
          "description": "The shipping number, provided by the shipping company",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tracking_url": {
          "type": "string",
          "x-sub-format": "Url"
        },
        "tracking_urls": {
          "description": "The URLs to track the fulfillment",
          "items": {
            "type": "string",
            "x-sub-format": "Url"
          },
          "type": "array"
        },
        "updated_at": {
          "description": "The date and time when the fulfillment was last modified. The API returns this value in ISO 8601 format",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "variant_inventory_management": {
          "description": "States the name of the inventory management service",
          "type": "string"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "fulfillments",
      "type": "object"
    },
    "ordersRefunds": {
      "properties": {
        "amount": {
          "type": "string",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "created_at": {
          "description": "The date and time when the refund was created. The API returns this value in ISO 8601 format",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "currency": {
          "description": "The three letter code (ISO 4217) for the currency used for the payment",
          "enum": [
            "AFA",
            "ALL",
            "DZD",
            "USD",
            "ESP",
            "AOA",
            "XCD",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZM",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYB",
            "BEF",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BAM",
            "BWP",
            "NOK",
            "BRL",
            "BND",
            "BGL,BGN",
            "BIF",
            "KHR",
            "XAF",
            "CAD",
            "CVE",
            "KYD",
            "CLP",
            "CLF",
            "CNY",
            "HKD",
            "MOP",
            "COP",
            "KMF",
            "CDF",
            "NZD",
            "CRC",
            "HRK",
            "CUP",
            "CYP",
            "CZK",
            "DKK",
            "DJF",
            "DOP",
            "TPE",
            "IDE",
            "ECS",
            "ECV",
            "EGP",
            "SVC",
            "ERN",
            "EEK",
            "ETB",
            "XEU",
            "EUR",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XPF",
            "GMD",
            "GEL",
            "DEM",
            "GHC",
            "GIP",
            "GRD",
            "GTQ",
            "GNF",
            "GWP",
            "GYD",
            "HTG",
            "ITL",
            "HNL",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "XDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KPW",
            "KRW",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LBP",
            "ZAR",
            "LSL",
            "LRD",
            "LYD",
            "CHF",
            "LTL",
            "LUF",
            "MKD",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MTL",
            "MRO",
            "MUR",
            "MXN",
            "MXV",
            "MDL",
            "MNT",
            "MAD",
            "MZM",
            "MMK",
            "NPR",
            "ANG",
            "NLG",
            "NIO",
            "NGN",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "QAR",
            "ROL",
            "RUR",
            "RWF",
            "SHP",
            "WST",
            "STD",
            "SAR",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "LKR",
            "SDP",
            "SRG",
            "SZL",
            "SEK",
            "SYP",
            "TWD",
            "TJR",
            "TZS",
            "THB",
            "TOP",
            "TTD",
            "TND",
            "TRL",
            "TMM",
            "UGX",
            "UAH",
            "AED",
            "GBP",
            "USS",
            "USN",
            "UYU",
            "UZS",
            "VUV",
            "VEB",
            "VND",
            "YER",
            "YUN",
            "ZRN",
            "ZMK",
            "ZWD",
            "ADP",
            "NAD",
            "RUB",
            "RYR",
            "BOV"
          ],
          "type": "string",
          "x-sub-format": "Currency Code"
        },
        "gateway": {
          "description": "The name of the gateway the transaction was issued through",
          "type": "string"
        },
        "id": {
          "description": "The unique numeric identifier for the refund. This one is used for API purposes",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "kind": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "note": {
          "description": "The optional note attached to a refund",
          "type": "string"
        },
        "order_adjustments": {
          "items": {
            "$ref": "#/definitions/refundOrderAdjustments"
          },
          "type": "array"
        },
        "order_id": {
          "description": "A unique numeric identifier for the order",
          "format": "int64",
          "type": "integer",
          "x-readonly": true,
          "x-reference-objectname": "order"
        },
        "parent_id": {
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "processed_at": {
          "description": "The date and time when the refund was imported, in ISO 8601 format. This value can be set to dates in the past when importing from other systems. If no value is provided, it will be auto-generated",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "refund_line_items": {
          "description": "Details about one returned/refunded item",
          "items": {
            "$ref": "#/definitions/ordersRefundsLineItem"
          },
          "type": "array"
        },
        "restock": {
          "description": "Whether or not the line items were added back to the store inventory",
          "type": "boolean"
        },
        "source_name": {
          "description": "The origin of the transaction. This is set by Shopify and cannot be overridden",
          "type": "string"
        },
        "status": {
          "description": "The status of the transaction",
          "enum": [
            "pending",
            "failure",
            "success",
            "error"
          ],
          "type": "string",
          "x-sub-format": "Enum"
        },
        "test": {
          "description": "The option to use the transaction for testing purposes",
          "type": "boolean"
        },
        "transactions": {
          "items": {
            "$ref": "#/definitions/refundsTransaction"
          },
          "type": "array"
        },
        "user_id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "refunds",
      "type": "object"
    },
    "Order": {
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "order",
      "description": "An order is a customer's completed request to purchase one or more products from a shop. An order is created when a customer completes the checkout process, during which time they provide an email address or phone number, billing address and payment information",
      "x-searchable": true,
      "properties": {
        "confirmed": {
          "type": "boolean"
        },
        "refunds": {
          "items": {
            "$ref": "#/definitions/OrderRefund"
          },
          "type": "array",
          "description": "The list of refunds applied to the order"
        },
        "test": {
          "type": "boolean"
        },
        "payment_gateway_names": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The list of all payment gateways used for the order"
        },
        "note_attributes": {
          "items": {
            "$ref": "#/definitions/OrderNoteAttribute"
          },
          "type": "array",
          "description": "Extra information that is added to the order. Each array entry must contain a hash with name and value keys"
        },
        "gateway": {
          "type": "string",
          "description": "The payment gateway used"
        },
        "buyer_accepts_marketing": {
          "type": "boolean",
          "description": "Indicates whether the person who placed the order would like to receive email updates from the shop. This is set when the customer selects the Submit to our newsletter checkbox during checkout. The store's settings about email marketing don't affect this value",
          "default": false
        },
        "created_at": {
          "description": "This auto-generated property is the date and time when the order was created in Shopify, in ISO 8601 format",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "currency": {
          "type": "string",
          "description": "The three letter code (ISO 4217) for the currency used for the payment.",
          "x-sub-format": "Currency Code",
          "enum": [
            "AFA",
            "ALL",
            "DZD",
            "USD",
            "ESP",
            "AOA",
            "XCD",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZM",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYB",
            "BEF",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BAM",
            "BWP",
            "NOK",
            "BRL",
            "BND",
            "BGL,BGN",
            "BIF",
            "KHR",
            "XAF",
            "CAD",
            "CVE",
            "KYD",
            "CLP",
            "CLF",
            "CNY",
            "HKD",
            "MOP",
            "COP",
            "KMF",
            "CDF",
            "NZD",
            "CRC",
            "HRK",
            "CUP",
            "CYP",
            "CZK",
            "DKK",
            "DJF",
            "DOP",
            "TPE",
            "IDE",
            "ECS",
            "ECV",
            "EGP",
            "SVC",
            "ERN",
            "EEK",
            "ETB",
            "XEU",
            "EUR",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XPF",
            "GMD",
            "GEL",
            "DEM",
            "GHC",
            "GIP",
            "GRD",
            "GTQ",
            "GNF",
            "GWP",
            "GYD",
            "HTG",
            "ITL",
            "HNL",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "XDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KPW",
            "KRW",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LBP",
            "ZAR",
            "LSL",
            "LRD",
            "LYD",
            "CHF",
            "LTL",
            "LUF",
            "MKD",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MTL",
            "MRO",
            "MUR",
            "MXN",
            "MXV",
            "MDL",
            "MNT",
            "MAD",
            "MZM",
            "MMK",
            "NPR",
            "ANG",
            "NLG",
            "NIO",
            "NGN",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "QAR",
            "ROL",
            "RUR",
            "RWF",
            "SHP",
            "WST",
            "STD",
            "SAR",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "LKR",
            "SDP",
            "SRG",
            "SZL",
            "SEK",
            "SYP",
            "TWD",
            "TJR",
            "TZS",
            "THB",
            "TOP",
            "TTD",
            "TND",
            "TRL",
            "TMM",
            "UGX",
            "UAH",
            "AED",
            "GBP",
            "USS",
            "USN",
            "UYU",
            "UZS",
            "VUV",
            "VEB",
            "VND",
            "YER",
            "YUN",
            "ZRN",
            "ZMK",
            "ZWD",
            "ADP",
            "NAD",
            "RUB",
            "RYR",
            "BOV"
          ]
        },
        "customer": {
          "$ref": "#/definitions/OrderCustomer",
          "description": "An object containing information about the customer. It is important to note that the order may not have a customer and consumers should not depend on the existence of a customer object. This value may be null if the order was created through Shopify POS",
          "x-nullable": true,
          "x-reference-objectname": "customer"
        },
        "discount_codes": {
          "items": {
            "$ref": "#/definitions/AbandonedChkoutDiscount_code"
          },
          "type": "array",
          "description": "Applicable discount codes that can be applied to the order"
        },
        "email": {
          "type": "string",
          "x-sub-format:": "Email",
          "description": "The customer's email address"
        },
        "financial_status": {
          "type": "string",
          "enum": [
            "authorized",
            "pending",
            "paid",
            "partially_paid",
            "refunded",
            "voided",
            "partially_refunded"
          ],
          "x-sub-format": "Enum",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "fulfillment_status": {
          "type": "string",
          "enum": [
            "fulfilled",
            "null",
            "partial"
          ],
          "x-nullable": true,
          "x-sub-format": "Enum"
        },
        "fulfillments": {
          "items": {
            "$ref": "#/definitions/OrderFulfillment"
          },
          "type": "array"
        },
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "The unique numeric identifier for the order. This one is used for API purposes.This is different from the order_number property"
        },
        "line_items": {
          "items": {
            "$ref": "#/definitions/OrderLineItem"
          },
          "type": "array",
          "description": "A list of line item objects, each one containing information about an item in the order"
        },
        "name": {
          "type": "string",
          "description": "The customer's order name as represented by a number.",
          "x-name": true,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "description": "Numerical identifier unique to the shop. A number is sequential and starts at 1000"
        },
        "order_number": {
          "description": "A unique numeric identifier for the order. This one is used by the shop owner and customer. This is different from the id property, which is also a unique numeric identifier for the order, but used for API purposes",
          "type": "integer",
          "format": "int32"
        },
        "processed_at": {
          "description": "The date and time when the order was imported, in ISO 8601 format",
          "format": "date-time",
          "type": "string",
          "x-readOnly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "processing_method": {
          "type": "string",
          "description": "States the type of payment processing method",
          "enum": [
            "checkout",
            "direct",
            "manual",
            "offsite",
            "express"
          ],
          "x-sub-format": "Enum"
        },
        "shipping_lines": {
          "items": {
            "$ref": "#/definitions/OrderShippingLine"
          },
          "type": "array",
          "description": "An array of shipping_line objects, each of which details the shipping methods used."
        },
        "source": {
          "type": "string"
        },
        "source_name": {
          "type": "string",
          "description": "Where the order originated. May only be set during creation, and is not writeable thereafter. Orders created through official Shopify channels have protected values that cannot be assigned by other API clients during order creation."
        },
        "subtotal_price": {
          "type": "string",
          "x-sub-format": "Money",
          "x-precision": 2,
          "description": "Price of the order before shipping and taxes"
        },
        "tags": {
          "type": "string",
          "description": "Tags are additional short descriptors, commonly used for filtering and searching, formatted as a string of comma-separated values",
          "x-length": 40
        },
        "tax_lines": {
          "items": {
            "$ref": "#/definitions/LineItemTaxLine"
          },
          "type": "array",
          "description": "An array of tax_line objects, each of which details the total taxes applicable to the order.When creating an order through the API, tax lines may be specified on the order or the line items but not both"
        },
        "taxes_included": {
          "type": "boolean",
          "description": "States whether or not taxes are included in the order subtotal"
        },
        "token": {
          "description": "Unique identifier for the order.",
          "type": "string"
        },
        "total_discounts": {
          "type": "string",
          "description": "The total amount of the discounts to be applied to the price of the order",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "total_line_items_price": {
          "type": "string",
          "x-sub-format": "Money",
          "x-precision": 2,
          "description": "The sum of all the prices of all the items in the order"
        },
        "total_price": {
          "type": "string",
          "x-sub-format": "Money",
          "x-precision": 2,
          "description": "The sum of all the prices of all the items in the order, taxes and discounts included (must be positive)"
        },
        "total_price_usd": {
          "type": "string",
          "x-sub-format": "Money",
          "x-precision": 2
        },
        "total_tax": {
          "type": "string",
          "x-sub-format": "Money",
          "x-precision": 2,
          "description": "The sum of all the taxes applied to the order (must be positive)"
        },
        "total_weight": {
          "description": "The sum of all the weights of the line items in the order, in grams.",
          "type": "integer",
          "format": "int32"
        },
        "transactions": {
          "items": {
            "$ref": "#/definitions/Transaction"
          },
          "type": "array"
        },
        "updated_at": {
          "description": "Date and time when the order was last modified. The API returns this value in ISO 8601 format",
          "format": "date-time",
          "type": "string",
          "x-readOnly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "url": {
          "type": "string",
          "x-sub-format": "Url"
        },
        "note": {
          "type": "string",
          "description": "The text of an optional note that a shop owner can attach to the order"
        },
        "billing_address": {
          "$ref": "#/definitions/Address",
          "x-reference-objectname": "addresses",
          "description": "The mailing address associated with the payment method. This address is an optional field that will not be available on orders that do not require one"
        },
        "contact_email": {
          "type": "string",
          "x-sub-format": "Email"
        },
        "shipping_address": {
          "$ref": "#/definitions/Address",
          "x-reference-objectname": "addresses",
          "description": "The mailing address to where the order will be shipped. This address is optional and will not be available on orders that do not require one"
        },
        "app_id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier of the app who created the order"
        },
        "order_status_url": {
          "type": "string",
          "x-sub-format": "Url",
          "description": "The URL pointing to the order status web page. The URL will be null unless the order was created from a checkout",
          "x-nullable": true
        },
        "user_id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int32",
          "description": "Only present on orders processed at point of sale. The unique numerical identifier for the user logged into the terminal at the time the order was processed at"
        },
        "cancel_reason": {
          "type": "boolean",
          "x-nullable": true,
          "description": "The reason why the order was cancelled. If the order was not cancelled, this value is null.If the order was cancelled, the value will be one of the customer,fraud,inventory,declined,other",
          "enum": [
            "customer",
            "fraud",
            "inventory",
            "other",
            "declined",
            "null"
          ],
          "x-sub-format": "Enum"
        },
        "browser_ip": {
          "type": "string",
          "description": "The IP address of the browser used by the customer when placing the order",
          "x-sub-format": "IP Address v4"
        },
        "cancelled_at": {
          "description": "The date and time when the order was cancelled. If the order was cancelled, the API returns this value in ISO 8601 format. If the order was not cancelled, this value is null.",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601",
          "x-nullable": true
        },
        "cart_token": {
          "type": "string",
          "description": "Unique identifier for a particular cart that is attached to a particular order"
        },
        "client_details": {
          "$ref": "#/definitions/OrderClientDetails",
          "description": "An object containing information about the client"
        },
        "closed_at": {
          "format": "date-time",
          "type": "string",
          "x-sub-format": "Date Time - ISO 8601",
          "x-readonly": true,
          "description": "The date and time when the order was closed.If the order was not closed, this value is null",
          "x-nullable": true
        },
        "customer_locale": {
          "type": "string",
          "description": "The two or three letter language code, optionally followed by a region modifier"
        },
        "landing_site": {
          "type": "string",
          "x-sub-format": "Url",
          "description": "The URL for the page where the buyer landed when entering the shop"
        },
        "location_id": {
          "type": "integer",
          "format": "int64",
          "description": "Only present on orders processed at point of sale. The unique numeric identifier for the physical location at which the order was processed"
        },
        "phone": {
          "type": "string",
          "description": "The customer's phone number.",
          "x-sub-format": "Phone"
        },
        "referring_site": {
          "type": "string",
          "x-sub-format": "Url",
          "description": "The website that the customer clicked on to come to the shop"
        }
      },
      "type": "object"
    },
    "image": {
      "properties": {
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        },
        "height": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true
        },
        "src": {
          "type": "string"
        },
        "width": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true
        }
      },
      "type": "object"
    },
    "BulkLoad": {
      "description": "BulkLoad response of bulk upload.",
      "properties": {
        "id": {
          "description": "Id of the bulk job",
          "type": "number"
        },
        "status": {
          "description": "Status of the bulk job",
          "type": "string"
        }
      }
    },
    "Receipt": {
      "properties": {
        "authorization": {
          "type": "string"
        },
        "testcase": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "fulfillmentsLineItems": {
      "properties": {
        "applied_discounts": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "destination_location_id": {
          "format": "int64",
          "type": "integer"
        },
        "fulfillable_quantity": {
          "description": "The amount available to fulfill. This is the quantity - max(refunded_quantity, fulfilled_quantity) - pending_fulfilled_quantity - open_fulfilled_quantity",
          "format": "int32",
          "type": "integer"
        },
        "fulfillment_service": {
          "description": "Service provider who is doing the fulfilment,Valid values are either 'manual' or the name of the provider. eg: 'amazon', 'shipwire', etc",
          "type": "string"
        },
        "fulfillment_status": {
          "description": "Status of an order in terms of the line_items being fulfilled",
          "enum": [
            "fulfilled",
            "null",
            "partial"
          ],
          "type": "string",
          "x-nullable": true
        },
        "gift_card": {
          "description": "States whether or not the line_item is a gift card. If so, the item is not taxed or considered for shipping charges",
          "type": "boolean"
        },
        "grams": {
          "description": "The weight of the item in grams",
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "description": "The id of the line item",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "key": {
          "type": "string"
        },
        "line_price": {
          "type": "string"
        },
        "name": {
          "description": "The name of the product variant",
          "type": "string",
          "x-name": true
        },
        "origin_location_id": {
          "format": "int64",
          "type": "integer"
        },
        "price": {
          "description": "The price of the item",
          "type": "string",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "product_exists": {
          "description": "States whether or not the product exists",
          "type": "boolean"
        },
        "product_id": {
          "description": "The unique numeric identifier for the product in the fulfilment",
          "format": "int64",
          "type": "integer",
          "x-readonly": true,
          "x-reference-objectname": "product"
        },
        "properties": {
          "description": "An array of custom information for an item that has been added to the cart. Often used to provide product customization options",
          "items": {
            "$ref": "#/definitions/lineItemProperties"
          },
          "type": "array"
        },
        "quantity": {
          "description": "The number of items in the fulfillment",
          "format": "int32",
          "type": "integer"
        },
        "requires_shipping": {
          "description": "Specifies whether or not a customer needs to provide a shipping address when placing an order for this product variant",
          "type": "boolean"
        },
        "shipment_status": {
          "description": " Returns the fulfillment's shipment status",
          "enum": [
            "confirmed",
            "in_transit",
            "out_for_delivery",
            "delivered",
            "failure"
          ],
          "type": "string"
        },
        "sku": {
          "description": "A unique identifier of the item in the fulfilment",
          "type": "string"
        },
        "tax_lines": {
          "description": "An array of tax_line objects, each of which details the taxes applicable to the order",
          "items": {
            "$ref": "#/definitions/lineItemTaxLine"
          },
          "type": "array"
        },
        "taxable": {
          "description": "States whether or not the product was taxable",
          "type": "boolean"
        },
        "title": {
          "description": "The title of the product",
          "type": "string"
        },
        "total_discount": {
          "description": "The total discount amount applied to this line item. This value is not subtracted in the line item price",
          "type": "string",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "variant_id": {
          "description": "The id of the product variant being fulfilled",
          "format": "int64",
          "type": "integer"
        },
        "variant_inventory_management": {
          "description": "Returns the name of the inventory management system",
          "type": "string"
        },
        "variant_title": {
          "description": "The title of the product variant being fulfilled",
          "type": "string"
        },
        "vendor": {
          "description": "The name of the supplier of the item",
          "type": "string"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "type": "object"
    },
    "ordersRefundsLineItem": {
      "properties": {
        "id": {
          "description": "The unique identifier of the refund line item",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "line_item": {
          "description": "The single line item being returned",
          "$ref": "#/definitions/refundsLineItem"
        },
        "line_item_id": {
          "description": "The id of the related line item",
          "format": "int64",
          "type": "integer"
        },
        "quantity": {
          "description": "The quantity of the associated line item that was returned",
          "format": "int32",
          "type": "integer"
        },
        "subtotal": {
          "format": "int32",
          "type": "integer",
          "x-sub-format": "Money"
        },
        "total_tax": {
          "format": "int32",
          "type": "integer",
          "x-precision": 2,
          "x-sub-format": "Money"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "type": "object"
    },
    "OrderRefundLineItem": {
      "x-primary-key": [
        "id"
      ],
      "properties": {
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "The unique identifier of the refund line item"
        },
        "line_item": {
          "$ref": "#/definitions/AbandonedChkoutLineItem",
          "description": "The single line item being returned"
        },
        "line_item_id": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the related line item"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "The quantity of the associated line item that was returned"
        },
        "subtotal": {
          "type": "integer",
          "format": "int32",
          "x-sub-format": "Money"
        },
        "total_tax": {
          "type": "integer",
          "format": "int32",
          "x-sub-format": "Money",
          "x-precision": 2
        }
      },
      "type": "object"
    },
    "refundsTransactionPOST": {
      "description": " An object containing information about the payment",
      "properties": {
        "amount": {
          "description": "The amount of money that the transaction was for",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "authorization": {
          "description": "The authorization code associated with the transaction",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "x-nullable": true
        },
        "currency": {
          "description": "The three letter code (ISO 4217) for the currency used for the payment",
          "enum": [
            "AFA",
            "ALL",
            "DZD",
            "USD",
            "ESP",
            "AOA",
            "XCD",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZM",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYB",
            "BEF",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BAM",
            "BWP",
            "NOK",
            "BRL",
            "BND",
            "BGL,BGN",
            "BIF",
            "KHR",
            "XAF",
            "CAD",
            "CVE",
            "KYD",
            "CLP",
            "CLF",
            "CNY",
            "HKD",
            "MOP",
            "COP",
            "KMF",
            "CDF",
            "NZD",
            "CRC",
            "HRK",
            "CUP",
            "CYP",
            "CZK",
            "DKK",
            "DJF",
            "DOP",
            "TPE",
            "IDE",
            "ECS",
            "ECV",
            "EGP",
            "SVC",
            "ERN",
            "EEK",
            "ETB",
            "XEU",
            "EUR",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XPF",
            "GMD",
            "GEL",
            "DEM",
            "GHC",
            "GIP",
            "GRD",
            "GTQ",
            "GNF",
            "GWP",
            "GYD",
            "HTG",
            "ITL",
            "HNL",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "XDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KPW",
            "KRW",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LBP",
            "ZAR",
            "LSL",
            "LRD",
            "LYD",
            "CHF",
            "LTL",
            "LUF",
            "MKD",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MTL",
            "MRO",
            "MUR",
            "MXN",
            "MXV",
            "MDL",
            "MNT",
            "MAD",
            "MZM",
            "MMK",
            "NPR",
            "ANG",
            "NLG",
            "NIO",
            "NGN",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "QAR",
            "ROL",
            "RUR",
            "RWF",
            "SHP",
            "WST",
            "STD",
            "SAR",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "LKR",
            "SDP",
            "SRG",
            "SZL",
            "SEK",
            "SYP",
            "TWD",
            "TJR",
            "TZS",
            "THB",
            "TOP",
            "TTD",
            "TND",
            "TRL",
            "TMM",
            "UGX",
            "UAH",
            "AED",
            "GBP",
            "USS",
            "USN",
            "UYU",
            "UZS",
            "VUV",
            "VEB",
            "VND",
            "YER",
            "YUN",
            "ZRN",
            "ZMK",
            "ZWD",
            "ADP",
            "NAD",
            "RUB",
            "RYR",
            "BOV"
          ],
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "x-sub-format": "Currency Code"
        },
        "error_code": {
          "description": "A standardized error code, independent of the payment provider",
          "enum": [
            "null",
            "incorrect_number",
            "invalid_number",
            "invalid_expiry_date",
            "invalid_cvc",
            "expired_card",
            "incorrect_cvc",
            "incorrect_zip",
            "incorrect_address",
            "card_declined",
            "processing_error",
            "call_issuer",
            "pick_up_card"
          ],
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "x-nullable": true,
          "x-sub-format": "Enum"
        },
        "gateway": {
          "description": "The name of the gateway the transaction was issued through",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call"
        },
        "id": {
          "description": "A unique numeric identifier for the transaction",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "kind": {
          "description": "The kind of transaction ;'authorization': Money that the customer has agreed to pay. Authorization period lasts for up to 7 to 30 days (depending on your payment service) while a store awaits for a customer's capture;'capture': Transfer of money that was reserved during the authorization of a shop;'sale': The combination of authorization and capture, performed in one single step;'void': The cancellation of a pending authorization or capture;'refund': The partial or full return of the captured money to the customer",
          "enum": [
            "authorization",
            "capture",
            "sale",
            "void",
            "refund"
          ],
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call.Also if amount is present kind should also be present",
          "x-sub-format": "Enum"
        },
        "message": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call"
        },
        "payment_details": {
          "description": "An object containing information about the credit card used for this transaction",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "$ref": "#/definitions/refundsPaymentDetails"
        },
        "receipt": {
          "description": "A transaction receipt attached to the transaction by the gateway. The value of this field will vary depending on   which gateway the shop is using",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "$ref": "#/definitions/refundsTransactionReceipt"
        },
        "source_name": {
          "description": "The origin of the transaction. This is set by Shopify and cannot be overridden",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call"
        },
        "status": {
          "description": "The status of the transaction",
          "enum": [
            "pending",
            "failure",
            "success",
            "error"
          ],
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "x-sub-format": "Enum"
        },
        "test": {
          "description": "The option to use the transaction for testing purposes",
          "type": "boolean",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "transaction",
      "type": "object"
    },
    "collectsPOST": {
      "properties": {
        "collection_id": {
          "format": "int64",
          "type": "integer"
        },
        "featured": {
          "type": "boolean",
          "x-readOnly": true
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "position": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true
        },
        "product_id": {
          "format": "int64",
          "type": "integer"
        },
        "sort_value": {
          "type": "string",
          "x-readOnly": true
        }
      },
      "required": [
        "product_id",
        "collection_id"
      ],
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "collects",
      "type": "object"
    },
    "metafields-POST": {
      "properties": {
        "description": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "value_type": {
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "key",
        "value",
        "value_type"
      ],
      "x-vendor-objectname": "metafields",
      "type": "object"
    },
    "customCollections": {
      "properties": {
        "body_html": {
          "type": "string"
        },
        "handle": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "image": {
          "$ref": "#/definitions/image"
        },
        "products_count": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true
        },
        "published_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        },
        "published_scope": {
          "type": "string",
          "x-readOnly": true
        },
        "sort_order": {
          "type": "string"
        },
        "template_suffix": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "custom_collections",
      "type": "object"
    },
    "OrderCustomerPOST": {
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "customer",
      "description": "A customer resource instance represents a customer account with the shop.",
      "properties": {
        "accepts_marketing": {
          "type": "boolean",
          "description": "Indicates whether the customer has consented to be sent marketing material via email. Valid values are true or false"
        },
        "default_address": {
          "$ref": "#/definitions/Address",
          "description": "The default address for the customer",
          "x-reference-objectname": "addresses"
        },
        "email": {
          "type": "string",
          "description": "The unique email address of the customer. Attempting to assign the same email address to multiple customers will return an error",
          "x-sub-format": "Email",
          "x-conditionally-required-description": "At least one of the four fields email,first_name,last_name or phone must be present in the request body"
        },
        "first_name": {
          "type": "string",
          "x-name": true,
          "description": "The customer's first name",
          "x-sub-format": "First Name",
          "x-conditionally-required-description": "At least one of the four fields email,first_name,last_name or phone must be present in the request body"
        },
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "A unique numeric identifier for the customer"
        },
        "last_name": {
          "type": "string",
          "description": "The customer's last name",
          "x-sub-format": "Last Name",
          "x-conditionally-required-description": "At least one of the four fields email,first_name,last_name or phone must be present in the request body"
        },
        "last_order_name": {
          "x-readonly": true,
          "type": "string",
          "description": "The name of the customer's last order. This is directly related to the Order's name field"
        },
        "note": {
          "type": "string",
          "description": "A note about the customer"
        },
        "orders_count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of orders associated with this customer"
        },
        "phone": {
          "type": "string",
          "description": "The unique phone number for this customer. Attempting to assign the same phone number to multiple customers will return an error",
          "x-sub-format": "Phone",
          "x-conditionally-required-description": "At least one of the four fields email,first_name,last_name or phone must be present in the request body"
        },
        "tax_exempt": {
          "type": "boolean",
          "description": "Indicates whether the customer should be charged taxes when placing orders. Valid values are true or false"
        },
        "tags": {
          "type": "string",
          "description": "Tags are additional short descriptors formatted as a string of comma-separated values. For example, if an article has three tags: tag1, tag2, tag3."
        },
        "total_spent": {
          "type": "string",
          "description": "The total amount of money that the customer has spent at the shop",
          "x-sub-format": "Money",
          "x-precision": 2
        },
        "verified_email": {
          "type": "boolean",
          "description": "States whether or not the email address has been verified"
        }
      },
      "type": "object"
    },
    "fulfillmentEvents": {
      "description": "A FulfillmentEvent represents a tracking event belonging to a fulfillment of one or more items in an order",
      "properties": {
        "address1": {
          "description": "The fulfillment event's street address",
          "type": "string",
          "x-sub-format": "Street Number"
        },
        "city": {
          "description": "The city in which the fulfillment event occurred",
          "type": "string",
          "x-sub-format": "City"
        },
        "country": {
          "description": "The country in which the fulfillment event occurred",
          "type": "string",
          "x-sub-format": "Country"
        },
        "created_at": {
          "description": "The date and time when the fulfillment event was created",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "fulfillment_id": {
          "description": "The id of the order the fulfillment event belongs to",
          "format": "int64",
          "type": "integer",
          "x-readonly": true,
          "x-reference-objectname": "fulfillments"
        },
        "happened_at": {
          "description": "The date and time when the fulfillment event occurred",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "id": {
          "description": "A numeric unique identifier for the fulfillment event",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "latitude": {
          "description": "Geographic coordinate specifying the north/south location of a fulfillment event",
          "format": "double",
          "type": "number",
          "x-precision": 4,
          "x-sub-format": "Latitude"
        },
        "longitude": {
          "description": "Geographic coordinate specifying the east/west location of a fulfillment event",
          "format": "double",
          "type": "number",
          "x-precision": 4,
          "x-sub-format": "Longitude"
        },
        "message": {
          "description": "An arbitrary message describing the status. Can be provided by a shipping carrier",
          "type": "string"
        },
        "order_id": {
          "description": "The id of the order the fulfillment event belongs to",
          "format": "int64",
          "type": "integer",
          "x-readonly": true,
          "x-reference-objectname": "order"
        },
        "province": {
          "description": "The province in which the fulfillment event occurred",
          "type": "string",
          "x-sub-format": "State"
        },
        "shop_id": {
          "description": "A numeric unique identifier for the shop to which the fulfillment event belongs",
          "format": "int64",
          "type": "integer",
          "x-readonly": true,
          "x-reference-objectname": "shop"
        },
        "status": {
          "description": "The status of the fulfillment event",
          "enum": [
            "confirmed",
            "in_transit",
            "out_for_delivery",
            "delivered",
            "failure"
          ],
          "type": "string",
          "x-sub-format": "Enum"
        },
        "updated_at": {
          "description": "The date and time when the fulfillment event was updated",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "zip": {
          "description": "The zip code in the location in which the fulfillment event occurred",
          "type": "string",
          "x-sub-format": "Postal Code"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "events",
      "type": "object"
    },
    "smartCollections": {
      "properties": {
        "body_html": {
          "type": "string"
        },
        "disjunctive": {
          "type": "boolean"
        },
        "handle": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "image": {
          "$ref": "#/definitions/image"
        },
        "published": {
          "type": "boolean"
        },
        "published_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        },
        "published_scope": {
          "type": "string",
          "x-readOnly": true
        },
        "rules": {
          "items": {
            "$ref": "#/definitions/rules"
          },
          "type": "array"
        },
        "sort_order": {
          "type": "string"
        },
        "template_suffix": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "smart_collections",
      "type": "object"
    },
    "collectsCount": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true
        }
      },
      "type": "object"
    },
    "Transaction": {
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "transaction",
      "description": " An object containing information about the payment",
      "x-searchable": true,
      "properties": {
        "amount": {
          "type": "string",
          "description": "The amount of money that the transaction was for",
          "x-sub-format": "Money",
          "x-precision": 2
        },
        "authorization": {
          "type": "string",
          "description": "The authorization code associated with the transaction"
        },
        "created_at": {
          "description": "The date and time when the transaction was created. The API returns this value in ISO 8601 format",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "currency": {
          "type": "string",
          "description": "The three letter code (ISO 4217) for the currency used for the payment",
          "x-sub-format": "Currency Code",
          "enum": [
            "AFA",
            "ALL",
            "DZD",
            "USD",
            "ESP",
            "AOA",
            "XCD",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZM",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYB",
            "BEF",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BAM",
            "BWP",
            "NOK",
            "BRL",
            "BND",
            "BGL,BGN",
            "BIF",
            "KHR",
            "XAF",
            "CAD",
            "CVE",
            "KYD",
            "CLP",
            "CLF",
            "CNY",
            "HKD",
            "MOP",
            "COP",
            "KMF",
            "CDF",
            "NZD",
            "CRC",
            "HRK",
            "CUP",
            "CYP",
            "CZK",
            "DKK",
            "DJF",
            "DOP",
            "TPE",
            "IDE",
            "ECS",
            "ECV",
            "EGP",
            "SVC",
            "ERN",
            "EEK",
            "ETB",
            "XEU",
            "EUR",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XPF",
            "GMD",
            "GEL",
            "DEM",
            "GHC",
            "GIP",
            "GRD",
            "GTQ",
            "GNF",
            "GWP",
            "GYD",
            "HTG",
            "ITL",
            "HNL",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "XDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KPW",
            "KRW",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LBP",
            "ZAR",
            "LSL",
            "LRD",
            "LYD",
            "CHF",
            "LTL",
            "LUF",
            "MKD",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MTL",
            "MRO",
            "MUR",
            "MXN",
            "MXV",
            "MDL",
            "MNT",
            "MAD",
            "MZM",
            "MMK",
            "NPR",
            "ANG",
            "NLG",
            "NIO",
            "NGN",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "QAR",
            "ROL",
            "RUR",
            "RWF",
            "SHP",
            "WST",
            "STD",
            "SAR",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "LKR",
            "SDP",
            "SRG",
            "SZL",
            "SEK",
            "SYP",
            "TWD",
            "TJR",
            "TZS",
            "THB",
            "TOP",
            "TTD",
            "TND",
            "TRL",
            "TMM",
            "UGX",
            "UAH",
            "AED",
            "GBP",
            "USS",
            "USN",
            "UYU",
            "UZS",
            "VUV",
            "VEB",
            "VND",
            "YER",
            "YUN",
            "ZRN",
            "ZMK",
            "ZWD",
            "ADP",
            "NAD",
            "RUB",
            "RYR",
            "BOV"
          ]
        },
        "device_id": {
          "type": "string",
          "x-readonly": true,
          "description": "The unique identifier for the device"
        },
        "error_code": {
          "type": "string",
          "description": "A standardized error code, independent of the payment provider",
          "enum": [
            "null",
            "incorrect_number",
            "invalid_number",
            "invalid_expiry_date",
            "invalid_cvc",
            "expired_card",
            "incorrect_cvc",
            "incorrect_zip",
            "incorrect_address",
            "card_declined",
            "processing_error",
            "call_issuer",
            "pick_up_card"
          ],
          "x-nullable": true,
          "x-sub-format": "Enum"
        },
        "gateway": {
          "type": "string",
          "description": "The name of the gateway the transaction was issued through"
        },
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "A unique numeric identifier for the transaction",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ],
          "x-searchable-name": [
            "since_id"
          ]
        },
        "kind": {
          "type": "string",
          "description": "The kind of transaction ;'authorization': Money that the customer has agreed to pay. Authorization period lasts for up to 7 to 30 days (depending on your payment service) while a store awaits for a customer's capture;'capture': Transfer of money that was reserved during the authorization of a shop;'sale': The combination of authorization and capture, performed in one single step;'void': The cancellation of a pending authorization or capture;'refund': The partial or full return of the captured money to the customer",
          "enum": [
            "authorization",
            "capture",
            "sale",
            "void",
            "refund"
          ],
          "x-sub-format": "Enum"
        },
        "order_id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "x-reference-objectname": "order",
          "description": "A unique numeric identifier for the order"
        },
        "payment_details": {
          "$ref": "#/definitions/TransactionPaymentDetails",
          "description": "An object containing information about the credit card used for this transaction"
        },
        "receipt": {
          "$ref": "#/definitions/TransactionReceipt",
          "description": "A transaction receipt attached to the transaction by the gateway. The value of this field will vary depending on   which gateway the shop is using"
        },
        "source_name": {
          "type": "string",
          "description": "The origin of the transaction. This is set by Shopify and cannot be overridden"
        },
        "status": {
          "type": "string",
          "description": "The status of the transaction",
          "enum": [
            "pending",
            "failure",
            "success",
            "error"
          ],
          "x-sub-format": "Enum"
        },
        "user_id": {
          "x-readonly": true,
          "type": "string",
          "description": "The unique identifier for the user"
        },
        "test": {
          "type": "boolean",
          "description": "The option to use the transaction for testing purposes"
        },
        "parent_id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "smartCollectionsPOST": {
      "properties": {
        "body_html": {
          "type": "string"
        },
        "disjunctive": {
          "type": "boolean"
        },
        "handle": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "image": {
          "$ref": "#/definitions/image-POST"
        },
        "published": {
          "type": "boolean"
        },
        "published_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        },
        "published_scope": {
          "type": "string",
          "x-readOnly": true
        },
        "rules": {
          "items": {
            "$ref": "#/definitions/rules"
          },
          "type": "array"
        },
        "sort_order": {
          "type": "string"
        },
        "template_suffix": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        }
      },
      "required": [
        "title",
        "published"
      ],
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "smart_collections",
      "type": "object"
    },
    "Option": {
      "x-primary-key": [
        "id"
      ],
      "description": "Custom product property names like Size, Color, and Material. Products are based on permutations of these options",
      "properties": {
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64"
        },
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "position": {
          "type": "integer",
          "format": "int32"
        },
        "product_id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "x-reference-objectname": "product"
        }
      },
      "type": "object"
    },
    "PaymentDetails": {
      "properties": {
        "avs_result_code": {
          "type": "string"
        },
        "credit_card_bin": {
          "type": "string"
        },
        "credit_card_company": {
          "type": "string"
        },
        "credit_card_number": {
          "type": "string"
        },
        "cvv_result_code": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ordersFulfillments": {
      "description": "A fulfillment represents a shipment of one or more items in an order",
      "properties": {
        "created_at": {
          "description": "The date and time when the fulfillment was created. The API returns this value in ISO 8601 format",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "id": {
          "description": "The unique numeric identifier for the fulfillment",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "line_items": {
          "description": " A historical record of each item in the fulfillment",
          "items": {
            "$ref": "#/definitions/fulfillmentsLineItems"
          },
          "type": "array"
        },
        "notify_customer": {
          "default": true,
          "description": "A flag indicating whether the customer should be notified",
          "type": "boolean"
        },
        "order_id": {
          "description": "The unique numeric identifier for the order",
          "format": "int64",
          "type": "integer",
          "x-readonly": true,
          "x-reference-objectname": "order"
        },
        "receipt": {
          "description": "Text field that provides information about the receipt",
          "$ref": "#/definitions/ordersFulfillmentsReceipt"
        },
        "service": {
          "type": "string"
        },
        "status": {
          "description": "The status of the fulfillment",
          "type": "string"
        },
        "tracking_company": {
          "description": " The name of the shipping company",
          "enum": [
            "4PX",
            "APC",
            "Amazon Logistics UK",
            "Amazon Logistics US",
            "Australia Post",
            "Bluedart",
            "Canada Post",
            "China  Post",
            "Correios",
            "DHL Express",
            "DHL eCommerce",
            "DHL eCommerce Asia",
            "Delhivery",
            "Eagle",
            "FSC",
            "FedEx",
            "FedEx UK",
            "GLS",
            "Globegistics",
            "Japan Post",
            "New Zealand Post",
            "PostNord",
            "Purolator",
            "Royal Mail",
            "Sagawa (EN)",
            "Sagawa (JA)",
            "TNT",
            "TNT Post",
            "UPS",
            "USPS",
            "Yamato (EN)",
            "Yamato (JA)"
          ],
          "type": "string",
          "x-nullable": true,
          "x-sub-format": "Enum"
        },
        "tracking_numbers": {
          "description": "The shipping number, provided by the shipping company",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tracking_url": {
          "type": "string",
          "x-sub-format": "Url"
        },
        "tracking_urls": {
          "description": "The URLs to track the fulfillment",
          "items": {
            "type": "string",
            "x-sub-format": "Url"
          },
          "type": "array"
        },
        "updated_at": {
          "description": "The date and time when the fulfillment was last modified. The API returns this value in ISO 8601 format",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "variant_inventory_management": {
          "description": "States the name of the inventory management service",
          "type": "string"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "fulfillments",
      "type": "object"
    },
    "refundsTransactionReceipt": {
      "properties": {},
      "type": "object"
    },
    "priceRulesPOST": {
      "properties": {
        "allocation_method": {
          "type": "string"
        },
        "customer_selection": {
          "type": "string"
        },
        "ends_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        },
        "entitled_collection_ids": {
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "entitled_country_ids": {
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "entitled_product_ids": {
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "entitled_variant_ids": {
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "once_per_customer": {
          "type": "boolean"
        },
        "prerequisite_saved_search_ids": {
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "prerequisite_shipping_price_range": {
          "$ref": "#/definitions/prerequisite_shipping_price_range"
        },
        "prerequisite_subtotal_range": {
          "$ref": "#/definitions/prerequisite_subtotal_range"
        },
        "starts_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        },
        "target_selection": {
          "type": "string"
        },
        "target_type": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "usage_limit": {
          "format": "int32",
          "type": "integer"
        },
        "value": {
          "format": "int32",
          "type": "integer"
        },
        "value_type": {
          "type": "string"
        }
      },
      "required": [
        "starts_at",
        "title",
        "target_type",
        "target_selection",
        "allocation_method",
        "value_type",
        "value",
        "once_per_customer",
        "customer_selection"
      ],
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "price_rules",
      "type": "object"
    },
    "objectsMetadata": {
      "properties": {
        "fields": {
          "items": {
            "$ref": "#/definitions/objectsMetadataFields"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "refundsLineItem": {
      "properties": {
        "applied_discounts": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "destination_location_id": {
          "format": "int64",
          "type": "integer"
        },
        "fulfillable_quantity": {
          "description": "The amount available to fulfill. This is the quantity - max(refunded_quantity, fulfilled_quantity) - pending_fulfilled_quantity - open_fulfilled_quantity",
          "format": "int32",
          "type": "integer"
        },
        "fulfillment_service": {
          "description": "Service provider who is doing the fulfilment,Valid values are either 'manual' or the name of the provider. eg: 'amazon', 'shipwire', etc",
          "type": "string"
        },
        "fulfillment_status": {
          "description": " How far along an order is in terms line items fulfilled",
          "enum": [
            "fulfilled",
            "null",
            "partial"
          ],
          "type": "string",
          "x-nullable": true,
          "x-sub-format": "Enum"
        },
        "gift_card": {
          "description": "States whether or not the line_item is a gift card. If so, the item is not taxed or considered for shipping charges",
          "type": "boolean"
        },
        "grams": {
          "description": "The weight of the item in grams",
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "description": "The id of the line item",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "key": {
          "type": "string"
        },
        "line_price": {
          "type": "string"
        },
        "name": {
          "description": "The name of the product variant",
          "type": "string",
          "x-name": true
        },
        "origin_location_id": {
          "format": "int64",
          "type": "integer"
        },
        "price": {
          "description": "The price of the item before discounts have been applied",
          "type": "string",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "product_exists": {
          "type": "boolean"
        },
        "product_id": {
          "description": "The unique numeric identifier for the product in the fulfilment.Can be null if the original product associated with the order is deleted at a later date",
          "format": "int64",
          "type": "integer",
          "x-nullable": true,
          "x-readonly": true,
          "x-reference-objectname": "product"
        },
        "properties": {
          "description": "An array of custom information for an item that has been added to the cart. Often used to provide product customization options",
          "items": {
            "$ref": "#/definitions/lineItemProperties"
          },
          "type": "array"
        },
        "quantity": {
          "description": "The number of products that were purchased",
          "format": "int32",
          "type": "integer"
        },
        "requires_shipping": {
          "description": " States whether or not the fulfilment requires shipping",
          "type": "boolean"
        },
        "sku": {
          "description": "A unique identifier of the item in the fulfilment",
          "type": "string"
        },
        "tax_lines": {
          "description": "An array of tax_line objects, each of which details the taxes applicable to the order",
          "items": {
            "$ref": "#/definitions/refundsTaxLine"
          },
          "type": "array"
        },
        "taxable": {
          "description": "States whether or not the product was taxable",
          "type": "boolean"
        },
        "title": {
          "description": "The title of the product",
          "type": "string"
        },
        "total_discount": {
          "description": "The total discount amount applied to this line item. This value is not subtracted in the line item price",
          "type": "string",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "variant_id": {
          "description": "The id of the product variant",
          "format": "int64",
          "type": "integer"
        },
        "variant_inventory_management": {
          "type": "string"
        },
        "variant_title": {
          "description": "The title of the product variant",
          "type": "string"
        },
        "vendor": {
          "description": "The name of the supplier of the item",
          "type": "string"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "type": "object"
    },
    "refundCalculatetransactionsPOST": {
      "properties": {
        "amount": {
          "description": "The amount of money that the transaction was for",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "authorization": {
          "description": "The authorization code associated with the transaction",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "x-nullable": true
        },
        "currency": {
          "description": "The three letter code (ISO 4217) for the currency used for the payment",
          "enum": [
            "AFA",
            "ALL",
            "DZD",
            "USD",
            "ESP",
            "AOA",
            "XCD",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZM",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYB",
            "BEF",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BAM",
            "BWP",
            "NOK",
            "BRL",
            "BND",
            "BGL,BGN",
            "BIF",
            "KHR",
            "XAF",
            "CAD",
            "CVE",
            "KYD",
            "CLP",
            "CLF",
            "CNY",
            "HKD",
            "MOP",
            "COP",
            "KMF",
            "CDF",
            "NZD",
            "CRC",
            "HRK",
            "CUP",
            "CYP",
            "CZK",
            "DKK",
            "DJF",
            "DOP",
            "TPE",
            "IDE",
            "ECS",
            "ECV",
            "EGP",
            "SVC",
            "ERN",
            "EEK",
            "ETB",
            "XEU",
            "EUR",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XPF",
            "GMD",
            "GEL",
            "DEM",
            "GHC",
            "GIP",
            "GRD",
            "GTQ",
            "GNF",
            "GWP",
            "GYD",
            "HTG",
            "ITL",
            "HNL",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "XDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KPW",
            "KRW",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LBP",
            "ZAR",
            "LSL",
            "LRD",
            "LYD",
            "CHF",
            "LTL",
            "LUF",
            "MKD",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MTL",
            "MRO",
            "MUR",
            "MXN",
            "MXV",
            "MDL",
            "MNT",
            "MAD",
            "MZM",
            "MMK",
            "NPR",
            "ANG",
            "NLG",
            "NIO",
            "NGN",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "QAR",
            "ROL",
            "RUR",
            "RWF",
            "SHP",
            "WST",
            "STD",
            "SAR",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "LKR",
            "SDP",
            "SRG",
            "SZL",
            "SEK",
            "SYP",
            "TWD",
            "TJR",
            "TZS",
            "THB",
            "TOP",
            "TTD",
            "TND",
            "TRL",
            "TMM",
            "UGX",
            "UAH",
            "AED",
            "GBP",
            "USS",
            "USN",
            "UYU",
            "UZS",
            "VUV",
            "VEB",
            "VND",
            "YER",
            "YUN",
            "ZRN",
            "ZMK",
            "ZWD",
            "ADP",
            "NAD",
            "RUB",
            "RYR",
            "BOV"
          ],
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "x-sub-format": "Currency Code"
        },
        "error_code": {
          "description": "A standardized error code, independent of the payment provider",
          "enum": [
            "null",
            "incorrect_number",
            "invalid_number",
            "invalid_expiry_date",
            "invalid_cvc",
            "expired_card",
            "incorrect_cvc",
            "incorrect_zip",
            "incorrect_address",
            "card_declined",
            "processing_error",
            "call_issuer",
            "pick_up_card"
          ],
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "x-nullable": true,
          "x-sub-format": "Enum"
        },
        "gateway": {
          "description": "The name of the gateway the transaction was issued through",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call"
        },
        "id": {
          "description": "A unique numeric identifier for the transaction",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "kind": {
          "description": "The kind of transaction ;'authorization': Money that the customer has agreed to pay. Authorization period lasts for up to 7 to 30 days (depending on your payment service) while a store awaits for a customer's capture;'capture': Transfer of money that was reserved during the authorization of a shop;'sale': The combination of authorization and capture, performed in one single step;'void': The cancellation of a pending authorization or capture;'refund': The partial or full return of the captured money to the customer",
          "enum": [
            "authorization",
            "capture",
            "sale",
            "void",
            "refund"
          ],
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call.Also if amount is present kind should also be present",
          "x-sub-format": "Enum"
        },
        "message": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call"
        },
        "payment_details": {
          "description": "An object containing information about the credit card used for this transaction",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "$ref": "#/definitions/refundsPaymentDetails"
        },
        "receipt": {
          "description": "A transaction receipt attached to the transaction by the gateway. The value of this field will vary depending on   which gateway the shop is using",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "$ref": "#/definitions/refundsTransactionReceipt"
        },
        "source_name": {
          "description": "The origin of the transaction. This is set by Shopify and cannot be overridden",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call"
        },
        "status": {
          "description": "The status of the transaction",
          "enum": [
            "pending",
            "failure",
            "success",
            "error"
          ],
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call",
          "x-sub-format": "Enum"
        },
        "test": {
          "description": "The option to use the transaction for testing purposes",
          "type": "boolean",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST call"
        }
      },
      "x-vendor-objectname": "transaction",
      "type": "object"
    },
    "refundsTaxLine": {
      "properties": {
        "compare_at": {
          "type": "string"
        },
        "position": {
          "description": "The rate of tax to be applied",
          "format": "int32",
          "type": "integer"
        },
        "price": {
          "description": " The amount of tax to be charged",
          "type": "string",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "rate": {
          "description": "The rate of tax to be applied",
          "format": "float",
          "type": "number"
        },
        "source": {
          "type": "string"
        },
        "title": {
          "description": "The name of the tax",
          "type": "string",
          "x-name": true
        },
        "zone": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ModelDate": {
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "TaxLine": {
      "required": [
        "title",
        "price",
        "rate"
      ],
      "properties": {
        "price": {
          "type": "string"
        },
        "rate": {
          "format": "double",
          "type": "number"
        },
        "title": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "objectmetafields": {
      "properties": {
        "created_at": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "key": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "owner_id": {
          "format": "int64",
          "type": "integer"
        },
        "owner_resource": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "value": {
          "format": "int32",
          "type": "integer"
        },
        "value_type": {
          "type": "string"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "type": "object"
    },
    "AbandonedChkoutShippingLine": {
      "x-primary-key": [
        "id"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "A reference to the shipping method"
        },
        "price": {
          "type": "string",
          "x-sub-format": "Money",
          "description": "The price of this shipping method"
        },
        "source": {
          "type": "string"
        },
        "tax_lines": {
          "items": {
            "$ref": "#/definitions/LineItemTaxLine"
          },
          "type": "array"
        },
        "title": {
          "type": "string"
        },
        "markup": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "applied_discounts": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "OrderPOST": {
      "x-primary-key": [
        "id"
      ],
      "required": [
        "line_items"
      ],
      "x-vendor-objectname": "order",
      "description": "An order is a customer's completed request to purchase one or more products from a shop. An order is created when a customer completes the checkout process, during which time they provide an email address or phone number, billing address and payment information",
      "properties": {
        "note_attributes": {
          "items": {
            "$ref": "#/definitions/OrderNoteAttribute"
          },
          "type": "array",
          "description": "Extra information that is added to the order. Each array entry must contain a hash with name and value keys"
        },
        "gateway": {
          "type": "string",
          "description": "The payment gateway used"
        },
        "buyer_accepts_marketing": {
          "type": "boolean",
          "description": "Indicates whether the person who placed the order would like to receive email updates from the shop. This is set when the customer selects the Submit to our newsletter checkbox during checkout. The store's settings about email marketing don't affect this value",
          "default": false
        },
        "currency": {
          "type": "string",
          "description": "The three letter code (ISO 4217) for the currency used for the payment.",
          "x-sub-format": "Currency Code",
          "enum": [
            "AFA",
            "ALL",
            "DZD",
            "USD",
            "ESP",
            "AOA",
            "XCD",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZM",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYB",
            "BEF",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BAM",
            "BWP",
            "NOK",
            "BRL",
            "BND",
            "BGL,BGN",
            "BIF",
            "KHR",
            "XAF",
            "CAD",
            "CVE",
            "KYD",
            "CLP",
            "CLF",
            "CNY",
            "HKD",
            "MOP",
            "COP",
            "KMF",
            "CDF",
            "NZD",
            "CRC",
            "HRK",
            "CUP",
            "CYP",
            "CZK",
            "DKK",
            "DJF",
            "DOP",
            "TPE",
            "IDE",
            "ECS",
            "ECV",
            "EGP",
            "SVC",
            "ERN",
            "EEK",
            "ETB",
            "XEU",
            "EUR",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XPF",
            "GMD",
            "GEL",
            "DEM",
            "GHC",
            "GIP",
            "GRD",
            "GTQ",
            "GNF",
            "GWP",
            "GYD",
            "HTG",
            "ITL",
            "HNL",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "XDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KPW",
            "KRW",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LBP",
            "ZAR",
            "LSL",
            "LRD",
            "LYD",
            "CHF",
            "LTL",
            "LUF",
            "MKD",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MTL",
            "MRO",
            "MUR",
            "MXN",
            "MXV",
            "MDL",
            "MNT",
            "MAD",
            "MZM",
            "MMK",
            "NPR",
            "ANG",
            "NLG",
            "NIO",
            "NGN",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "QAR",
            "ROL",
            "RUR",
            "RWF",
            "SHP",
            "WST",
            "STD",
            "SAR",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "LKR",
            "SDP",
            "SRG",
            "SZL",
            "SEK",
            "SYP",
            "TWD",
            "TJR",
            "TZS",
            "THB",
            "TOP",
            "TTD",
            "TND",
            "TRL",
            "TMM",
            "UGX",
            "UAH",
            "AED",
            "GBP",
            "USS",
            "USN",
            "UYU",
            "UZS",
            "VUV",
            "VEB",
            "VND",
            "YER",
            "YUN",
            "ZRN",
            "ZMK",
            "ZWD",
            "ADP",
            "NAD",
            "RUB",
            "RYR",
            "BOV"
          ]
        },
        "customer": {
          "$ref": "#/definitions/OrderCustomerPOST",
          "description": "An object containing information about the customer. It is important to note that the order may not have a customer and consumers should not depend on the existence of a customer object. This value may be null if the order was created through Shopify POS",
          "x-nullable": true,
          "x-reference-objectname": "customer"
        },
        "discount_codes": {
          "items": {
            "$ref": "#/definitions/AbandonedChkoutDiscount_code"
          },
          "type": "array",
          "description": "Applicable discount codes that can be applied to the order"
        },
        "email": {
          "type": "string",
          "x-sub-format:": "Email",
          "description": "The customer's email address"
        },
        "financial_status": {
          "type": "string",
          "enum": [
            "authorized",
            "pending",
            "paid",
            "partially_paid",
            "refunded",
            "voided",
            "partially_refunded"
          ],
          "x-sub-format": "Enum"
        },
        "fulfillment_status": {
          "type": "string",
          "enum": [
            "fulfilled",
            "null",
            "partial"
          ],
          "x-nullable": true,
          "x-sub-format": "Enum"
        },
        "fulfillments": {
          "items": {
            "$ref": "#/definitions/OrderFulfillment"
          },
          "type": "array"
        },
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "The unique numeric identifier for the order. This one is used for API purposes.This is different from the order_number property"
        },
        "line_items": {
          "items": {
            "$ref": "#/definitions/OrderLineItemPOST"
          },
          "type": "array",
          "description": "A list of line item objects, each one containing information about an item in the order"
        },
        "name": {
          "type": "string",
          "description": "The customer's order name as represented by a number.",
          "x-name": true
        },
        "shipping_lines": {
          "items": {
            "$ref": "#/definitions/OrderShippingLine"
          },
          "type": "array",
          "description": "An array of shipping_line objects, each of which details the shipping methods used."
        },
        "tags": {
          "type": "string",
          "description": "Tags are additional short descriptors, commonly used for filtering and searching, formatted as a string of comma-separated values",
          "x-length": 40
        },
        "tax_lines": {
          "items": {
            "$ref": "#/definitions/LineItemTaxLine"
          },
          "type": "array",
          "description": "An array of tax_line objects, each of which details the total taxes applicable to the order.When creating an order through the API, tax lines may be specified on the order or the line items but not both"
        },
        "taxes_included": {
          "type": "boolean",
          "description": "States whether or not taxes are included in the order subtotal"
        },
        "total_discounts": {
          "type": "string",
          "description": "The total amount of the discounts to be applied to the price of the order",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "total_tax": {
          "type": "string",
          "x-sub-format": "Money",
          "x-precision": 2,
          "description": "The sum of all the taxes applied to the order (must be positive)"
        },
        "total_weight": {
          "description": "The sum of all the weights of the line items in the order, in grams.",
          "type": "integer",
          "format": "int32"
        },
        "transactions": {
          "items": {
            "$ref": "#/definitions/TransactionPOST"
          },
          "type": "array"
        },
        "note": {
          "type": "string",
          "description": "The text of an optional note that a shop owner can attach to the order"
        },
        "billing_address": {
          "$ref": "#/definitions/Address",
          "x-reference-objectname": "addresses",
          "description": "The mailing address associated with the payment method. This address is an optional field that will not be available on orders that do not require one"
        },
        "contact_email": {
          "type": "string",
          "x-sub-format": "Email"
        },
        "shipping_address": {
          "$ref": "#/definitions/Address",
          "x-reference-objectname": "addresses",
          "description": "The mailing address to where the order will be shipped. This address is optional and will not be available on orders that do not require one"
        },
        "phone": {
          "type": "string",
          "description": "The customer's phone number.",
          "x-sub-format": "Phone"
        },
        "send_receipt": {
          "type": "boolean",
          "description": "Determines whether an order confirmation will be sent to the customer",
          "default": false
        },
        "inventory_behaviour": {
          "description": "Determines which inventory updating behaviour is used",
          "type": "string",
          "enum": [
            "bypass",
            "decrement_ignoring_policy",
            "decrement_obeying_policy"
          ],
          "default": "bypass",
          "x-sub-format": "Enum"
        }
      },
      "type": "object"
    },
    "refundCalculatetransactions": {
      "properties": {
        "amount": {
          "description": "The amount of money that the transaction was for",
          "type": "string",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "authorization": {
          "description": "The authorization code associated with the transaction",
          "type": "string",
          "x-nullable": true
        },
        "created_at": {
          "description": "The date and time when the transaction was created. The API returns this value in ISO 8601 format",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "currency": {
          "description": "The three letter code (ISO 4217) for the currency used for the payment",
          "enum": [
            "AFA",
            "ALL",
            "DZD",
            "USD",
            "ESP",
            "AOA",
            "XCD",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZM",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYB",
            "BEF",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BAM",
            "BWP",
            "NOK",
            "BRL",
            "BND",
            "BGL,BGN",
            "BIF",
            "KHR",
            "XAF",
            "CAD",
            "CVE",
            "KYD",
            "CLP",
            "CLF",
            "CNY",
            "HKD",
            "MOP",
            "COP",
            "KMF",
            "CDF",
            "NZD",
            "CRC",
            "HRK",
            "CUP",
            "CYP",
            "CZK",
            "DKK",
            "DJF",
            "DOP",
            "TPE",
            "IDE",
            "ECS",
            "ECV",
            "EGP",
            "SVC",
            "ERN",
            "EEK",
            "ETB",
            "XEU",
            "EUR",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XPF",
            "GMD",
            "GEL",
            "DEM",
            "GHC",
            "GIP",
            "GRD",
            "GTQ",
            "GNF",
            "GWP",
            "GYD",
            "HTG",
            "ITL",
            "HNL",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "XDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KPW",
            "KRW",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LBP",
            "ZAR",
            "LSL",
            "LRD",
            "LYD",
            "CHF",
            "LTL",
            "LUF",
            "MKD",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MTL",
            "MRO",
            "MUR",
            "MXN",
            "MXV",
            "MDL",
            "MNT",
            "MAD",
            "MZM",
            "MMK",
            "NPR",
            "ANG",
            "NLG",
            "NIO",
            "NGN",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "QAR",
            "ROL",
            "RUR",
            "RWF",
            "SHP",
            "WST",
            "STD",
            "SAR",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "LKR",
            "SDP",
            "SRG",
            "SZL",
            "SEK",
            "SYP",
            "TWD",
            "TJR",
            "TZS",
            "THB",
            "TOP",
            "TTD",
            "TND",
            "TRL",
            "TMM",
            "UGX",
            "UAH",
            "AED",
            "GBP",
            "USS",
            "USN",
            "UYU",
            "UZS",
            "VUV",
            "VEB",
            "VND",
            "YER",
            "YUN",
            "ZRN",
            "ZMK",
            "ZWD",
            "ADP",
            "NAD",
            "RUB",
            "RYR",
            "BOV"
          ],
          "type": "string",
          "x-sub-format": "Currency Code"
        },
        "device_id": {
          "description": "The unique identifier for the device",
          "type": "string",
          "x-readonly": true
        },
        "error_code": {
          "description": "A standardized error code, independent of the payment provider",
          "enum": [
            "null",
            "incorrect_number",
            "invalid_number",
            "invalid_expiry_date",
            "invalid_cvc",
            "expired_card",
            "incorrect_cvc",
            "incorrect_zip",
            "incorrect_address",
            "card_declined",
            "processing_error",
            "call_issuer",
            "pick_up_card"
          ],
          "type": "string",
          "x-nullable": true,
          "x-sub-format": "Enum"
        },
        "gateway": {
          "description": "The name of the gateway the transaction was issued through",
          "type": "string"
        },
        "id": {
          "description": "A unique numeric identifier for the transaction",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "kind": {
          "description": "Note that returned transactions are of the kind 'suggested_refund', which must to be changed to 'refund' in order for them to be accepted",
          "type": "string"
        },
        "maximum_refundable": {
          "type": "string",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "message": {
          "type": "string"
        },
        "order_id": {
          "description": "A unique numeric identifier for the order",
          "format": "int64",
          "type": "integer",
          "x-readonly": true,
          "x-reference-objectname": "order"
        },
        "parent_id": {
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "payment_details": {
          "description": "An object containing information about the credit card used for this transaction",
          "$ref": "#/definitions/refundsPaymentDetails"
        },
        "receipt": {
          "description": "A transaction receipt attached to the transaction by the gateway. The value of this field will vary depending on   which gateway the shop is using",
          "$ref": "#/definitions/refundsTransactionReceipt"
        },
        "source_name": {
          "description": "The origin of the transaction. This is set by Shopify and cannot be overridden",
          "type": "string"
        },
        "status": {
          "description": "The status of the transaction",
          "enum": [
            "pending",
            "failure",
            "success",
            "error"
          ],
          "type": "string",
          "x-sub-format": "Enum"
        },
        "test": {
          "description": "The option to use the transaction for testing purposes",
          "type": "boolean"
        },
        "user_id": {
          "description": "The unique identifier for the user",
          "type": "string",
          "x-readonly": true
        }
      },
      "x-vendor-objectname": "transaction",
      "type": "object"
    },
    "paymentDetails": {
      "properties": {
        "avs_result_code": {
          "description": "The Response code from AVS the address verification system. The code is a single letter",
          "type": "string"
        },
        "credit_card_bin": {
          "description": "The issuer identification number (IIN), formerly known as bank identification number (BIN) ] of the customer's credit card. This is made up of the first few digits of the credit card number",
          "type": "string"
        },
        "credit_card_company": {
          "description": "The name of the company who issued the customer's credit card",
          "type": "string"
        },
        "credit_card_number": {
          "description": "The customer's credit card number, with most of the leading digits redacted with Xs",
          "type": "string"
        },
        "cvv_result_code": {
          "description": " The Response code from the credit card company indicating whether the customer entered the card security code, a.k.a. card verification value, correctly. The code is a single letter or empty string",
          "type": "string"
        }
      },
      "type": "object"
    },
    "collects": {
      "properties": {
        "collection_id": {
          "format": "int64",
          "type": "integer"
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        },
        "featured": {
          "type": "boolean",
          "x-readOnly": true
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "position": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true
        },
        "product_id": {
          "format": "int64",
          "type": "integer"
        },
        "sort_value": {
          "type": "string",
          "x-readOnly": true
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-readOnly": true
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "collects",
      "type": "object"
    },
    "imagePOST": {
      "properties": {
        "height": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true
        },
        "src": {
          "type": "string"
        },
        "width": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true
        }
      },
      "required": [
        "src"
      ],
      "type": "object"
    },
    "customCollectionsCount": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true
        }
      },
      "type": "object"
    },
    "prerequisite_subtotal_range": {
      "properties": {
        "greater_than_or_equal_to": {
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "ProductPATCH": {
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "product",
      "description": "The Product resource lets you update and create products in a merchant's store",
      "properties": {
        "metafields": {
          "items": {
            "$ref": "#/definitions/MetaField"
          },
          "type": "array",
          "description": "Metafields allow you to attach metadata, which is additional information, to a store's resources",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "metafields_global_description_tag": {
          "type": "string",
          "description": "Description of the product used for SEO purposes",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "metafields_global_title_tag": {
          "type": "string",
          "description": "Name of the product used for SEO purposes",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "body_html": {
          "type": "string",
          "description": "Description of the product. Supports HTML formatting",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "handle": {
          "type": "string",
          "description": "Human-friendly unique string for the product. Automatically generated from the product's title",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "Unique numeric identifier for the product"
        },
        "image": {
          "$ref": "#/definitions/ImagePATCH",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "images": {
          "items": {
            "$ref": "#/definitions/ImagePATCH"
          },
          "type": "array",
          "description": "List of image objects, each one representing an image associated with the product",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "options": {
          "items": {
            "$ref": "#/definitions/OptionPATCH"
          },
          "type": "array",
          "description": "Custom product property names like Size, Color, and Material. Products are based on permutations of these options. (maximum: 3 options, 255 characters each)",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "product_type": {
          "type": "string",
          "description": "Categorization that a product can be tagged with, commonly used for filtering and searching",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "published": {
          "type": "boolean",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "published_scope": {
          "type": "string",
          "description": "Indicates whether the product is published to the Point of Sale channel",
          "enum": [
            "web",
            "global"
          ],
          "x-sub-format": "Enum",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "tags": {
          "type": "string",
          "description": "Categorization that a product can be tagged with. Commonly used for filtering and searching",
          "x-length": 255,
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "template_suffix": {
          "type": "string",
          "description": "Suffix of the Liquid template being used",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "title": {
          "type": "string",
          "description": "Name of the product",
          "x-name": true,
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "variants": {
          "items": {
            "$ref": "#/definitions/Variant"
          },
          "type": "array",
          "description": "List of variant objects, each one representing a slightly different version of the product",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "vendor": {
          "type": "string",
          "description": "Name of the vendor of the product",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        }
      },
      "type": "object"
    },
    "refundsPaymentDetails": {
      "properties": {
        "avs_result_code": {
          "description": "The Response code from AVS the address verification system. The code is a single letter",
          "type": "string"
        },
        "credit_card_bin": {
          "description": "The issuer identification number (IIN), formerly known as bank identification number (BIN) ] of the customer's credit card. This is made up of the first few digits of the credit card number",
          "type": "string"
        },
        "credit_card_company": {
          "description": "The name of the company who issued the customer's credit card",
          "type": "string"
        },
        "credit_card_number": {
          "description": "The customer's credit card number, with most of the leading digits redacted with Xs",
          "type": "string"
        },
        "cvv_result_code": {
          "description": " The Response code from the credit card company indicating whether the customer entered the card security code, a.k.a. card verification value, correctly. The code is a single letter or empty string",
          "type": "string"
        }
      },
      "type": "object"
    },
    "smartCollectionsPATCH": {
      "properties": {
        "body_html": {
          "type": "string"
        },
        "disjunctive": {
          "type": "boolean"
        },
        "handle": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "image": {
          "$ref": "#/definitions/image-POST"
        },
        "published": {
          "type": "boolean"
        },
        "published_scope": {
          "type": "string",
          "x-readOnly": true
        },
        "rules": {
          "items": {
            "$ref": "#/definitions/rules"
          },
          "type": "array"
        },
        "sort_order": {
          "type": "string"
        },
        "template_suffix": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "required": [
        "title",
        "published"
      ],
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "smart_collections",
      "type": "object"
    },
    "OrderShippingLine": {
      "x-primary-key": [
        "id"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "A reference to the shipping method"
        },
        "price": {
          "type": "string",
          "x-sub-format": "Money",
          "description": "The price of this shipping method"
        },
        "source": {
          "type": "string",
          "description": "The source of the shipping method"
        },
        "tax_lines": {
          "items": {
            "$ref": "#/definitions/LineItemTaxLine"
          },
          "type": "array",
          "description": "A list of tax_line objects, each of which details the taxes applicable to this shipping_line"
        },
        "title": {
          "type": "string",
          "description": "The title of the shipping method.",
          "x-name": true
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-readonly": true
        },
        "discounted_price": {
          "type": "string",
          "x-sub-format": "Money"
        },
        "carrier_identifier": {
          "type": "string",
          "description": " A reference to the carrier service that provided the rate. Present if the rate was computed by a third party carrier service; null otherwise",
          "x-nullable": true
        },
        "requested_fulfillment_service_id": {
          "type": "string",
          "description": "A reference to the fulfillment service that is being requested for the shipping method. Present if shipping method requires processing by a third party fulfillment service; null otherwise",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "LineItem": {
      "properties": {
        "applied_discounts": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "key": {
          "type": "string"
        },
        "fulfillment_service": {
          "description": "Valid value is 'manual'.",
          "type": "string"
        },
        "fulfillment_status": {
          "description": "Valid values are: fulfilled, null or partial.",
          "type": "string"
        },
        "gift_card": {
          "type": "boolean"
        },
        "grams": {
          "type": "integer"
        },
        "line_price": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "price": {
          "type": "string"
        },
        "product_id": {
          "x-readOnly": true,
          "type": "integer"
        },
        "quantity": {
          "type": "integer"
        },
        "requires_shipping": {
          "type": "boolean"
        },
        "sku": {
          "type": "string"
        },
        "tax_lines": {
          "items": {
            "$ref": "#/definitions/TaxLine"
          },
          "type": "array"
        },
        "taxable": {
          "type": "boolean"
        },
        "title": {
          "type": "string"
        },
        "variant_id": {
          "type": "integer"
        },
        "variant_title": {
          "type": "string"
        },
        "vendor": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ordersPayments": {
      "description": " An object containing information about the payment",
      "properties": {
        "amount": {
          "description": "The amount of money that the transaction was for",
          "type": "string",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "authorization": {
          "description": "The authorization code associated with the transaction",
          "type": "string"
        },
        "created_at": {
          "description": "The date and time when the transaction was created. The API returns this value in ISO 8601 format",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "currency": {
          "description": "The three letter code (ISO 4217) for the currency used for the payment",
          "enum": [
            "AFA",
            "ALL",
            "DZD",
            "USD",
            "ESP",
            "AOA",
            "XCD",
            "ARS",
            "AMD",
            "AWG",
            "AUD",
            "ATS",
            "AZM",
            "BSD",
            "BHD",
            "BDT",
            "BBD",
            "BYB",
            "BEF",
            "BZD",
            "BMD",
            "BTN",
            "BOB",
            "BAM",
            "BWP",
            "NOK",
            "BRL",
            "BND",
            "BGL,BGN",
            "BIF",
            "KHR",
            "XAF",
            "CAD",
            "CVE",
            "KYD",
            "CLP",
            "CLF",
            "CNY",
            "HKD",
            "MOP",
            "COP",
            "KMF",
            "CDF",
            "NZD",
            "CRC",
            "HRK",
            "CUP",
            "CYP",
            "CZK",
            "DKK",
            "DJF",
            "DOP",
            "TPE",
            "IDE",
            "ECS",
            "ECV",
            "EGP",
            "SVC",
            "ERN",
            "EEK",
            "ETB",
            "XEU",
            "EUR",
            "FKP",
            "FJD",
            "FIM",
            "FRF",
            "XPF",
            "GMD",
            "GEL",
            "DEM",
            "GHC",
            "GIP",
            "GRD",
            "GTQ",
            "GNF",
            "GWP",
            "GYD",
            "HTG",
            "ITL",
            "HNL",
            "HUF",
            "ISK",
            "INR",
            "IDR",
            "XDR",
            "IRR",
            "IQD",
            "IEP",
            "ILS",
            "JMD",
            "JPY",
            "JOD",
            "KZT",
            "KES",
            "KPW",
            "KRW",
            "KWD",
            "KGS",
            "LAK",
            "LVL",
            "LBP",
            "ZAR",
            "LSL",
            "LRD",
            "LYD",
            "CHF",
            "LTL",
            "LUF",
            "MKD",
            "MGF",
            "MWK",
            "MYR",
            "MVR",
            "MTL",
            "MRO",
            "MUR",
            "MXN",
            "MXV",
            "MDL",
            "MNT",
            "MAD",
            "MZM",
            "MMK",
            "NPR",
            "ANG",
            "NLG",
            "NIO",
            "NGN",
            "OMR",
            "PKR",
            "PAB",
            "PGK",
            "PYG",
            "PEN",
            "PHP",
            "PLN",
            "PTE",
            "QAR",
            "ROL",
            "RUR",
            "RWF",
            "SHP",
            "WST",
            "STD",
            "SAR",
            "SCR",
            "SLL",
            "SGD",
            "SKK",
            "SIT",
            "SBD",
            "SOS",
            "LKR",
            "SDP",
            "SRG",
            "SZL",
            "SEK",
            "SYP",
            "TWD",
            "TJR",
            "TZS",
            "THB",
            "TOP",
            "TTD",
            "TND",
            "TRL",
            "TMM",
            "UGX",
            "UAH",
            "AED",
            "GBP",
            "USS",
            "USN",
            "UYU",
            "UZS",
            "VUV",
            "VEB",
            "VND",
            "YER",
            "YUN",
            "ZRN",
            "ZMK",
            "ZWD",
            "ADP",
            "NAD",
            "RUB",
            "RYR",
            "BOV"
          ],
          "type": "string",
          "x-sub-format": "Currency Code"
        },
        "device_id": {
          "description": "The unique identifier for the device",
          "type": "string",
          "x-readonly": true
        },
        "error_code": {
          "description": "A standardized error code, independent of the payment provider",
          "enum": [
            "null",
            "incorrect_number",
            "invalid_number",
            "invalid_expiry_date",
            "invalid_cvc",
            "expired_card",
            "incorrect_cvc",
            "incorrect_zip",
            "incorrect_address",
            "card_declined",
            "processing_error",
            "call_issuer",
            "pick_up_card"
          ],
          "type": "string",
          "x-nullable": true,
          "x-sub-format": "Enum"
        },
        "gateway": {
          "description": "The name of the gateway the transaction was issued through",
          "type": "string"
        },
        "id": {
          "description": "A unique numeric identifier for the transaction",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "kind": {
          "description": "The kind of transaction ;'authorization': Money that the customer has agreed to pay. Authorization period lasts for up to 7 to 30 days (depending on your payment service) while a store awaits for a customer's capture;'capture': Transfer of money that was reserved during the authorization of a shop;'sale': The combination of authorization and capture, performed in one single step;'void': The cancellation of a pending authorization or capture;'refund': The partial or full return of the captured money to the customer",
          "enum": [
            "authorization",
            "capture",
            "sale",
            "void",
            "refund"
          ],
          "type": "string",
          "x-sub-format": "Enum"
        },
        "message": {
          "type": "string"
        },
        "order_id": {
          "description": "A unique numeric identifier for the order",
          "format": "int64",
          "type": "integer",
          "x-readOnly": true,
          "x-reference-objectname": "order"
        },
        "parent_id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "payment_details": {
          "description": "An object containing information about the credit card used for this transaction",
          "$ref": "#/definitions/paymentDetails"
        },
        "receipt": {
          "description": "A transaction receipt attached to the transaction by the gateway. The value of this field will vary depending on   which gateway the shop is using",
          "$ref": "#/definitions/paymentsReceipt"
        },
        "source_name": {
          "description": "The origin of the transaction. This is set by Shopify and cannot be overridden",
          "type": "string"
        },
        "status": {
          "description": "The status of the transaction",
          "enum": [
            "pending",
            "failure",
            "success",
            "error"
          ],
          "type": "string",
          "x-sub-format": "Enum"
        },
        "test": {
          "description": "The option to use the transaction for testing purposes",
          "type": "boolean"
        },
        "user_id": {
          "description": "The unique identifier for the user",
          "type": "string",
          "x-readonly": true
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "transaction",
      "type": "object"
    },
    "ordersFulfillmentsPATCH": {
      "description": "A fulfillment represents a shipment of one or more items in an order",
      "properties": {
        "id": {
          "description": "The unique numeric identifier for the fulfillment",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "line_items": {
          "description": " A historical record of each item in the fulfillment",
          "items": {
            "$ref": "#/definitions/fulfillmentsLineItems"
          },
          "type": "array",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "notify_customer": {
          "default": true,
          "description": "A flag indicating whether the customer should be notified",
          "type": "boolean",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "receipt": {
          "description": "Text field that provides information about the receipt",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call",
          "$ref": "#/definitions/ordersFulfillmentsReceipt"
        },
        "service": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "status": {
          "description": "The status of the fulfillment",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "tracking_company": {
          "description": " The name of the shipping company",
          "enum": [
            "4PX",
            "APC",
            "Amazon Logistics UK",
            "Amazon Logistics US",
            "Australia Post",
            "Bluedart",
            "Canada Post",
            "China  Post",
            "Correios",
            "DHL Express",
            "DHL eCommerce",
            "DHL eCommerce Asia",
            "Delhivery",
            "Eagle",
            "FSC",
            "FedEx",
            "FedEx UK",
            "GLS",
            "Globegistics",
            "Japan Post",
            "New Zealand Post",
            "PostNord",
            "Purolator",
            "Royal Mail",
            "Sagawa (EN)",
            "Sagawa (JA)",
            "TNT",
            "TNT Post",
            "UPS",
            "USPS",
            "Yamato (EN)",
            "Yamato (JA)"
          ],
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call",
          "x-nullable": true,
          "x-sub-format": "Enum"
        },
        "tracking_number": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "tracking_numbers": {
          "description": "The shipping number, provided by the shipping company",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "tracking_url": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call",
          "x-sub-format": "Url"
        },
        "tracking_urls": {
          "description": "The URLs to track the fulfillment",
          "items": {
            "type": "string",
            "x-sub-format": "Url"
          },
          "type": "array",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "variant_inventory_management": {
          "description": "States the name of the inventory management service",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "fulfillments",
      "type": "object"
    },
    "CustomerPOST": {
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "customer",
      "description": "A customer resource instance represents a customer account with the shop",
      "properties": {
        "accepts_marketing": {
          "type": "boolean",
          "description": "Indicates whether the customer has consented to be sent marketing material via email. Valid values are true or false"
        },
        "addresses": {
          "items": {
            "$ref": "#/definitions/Address",
            "x-reference-objectname": "addresses"
          },
          "type": "array",
          "description": "A list of the ten most recently updated addresses for the customer"
        },
        "default_address": {
          "$ref": "#/definitions/Address",
          "description": "The default address for the customer",
          "x-reference-objectname": "addresses"
        },
        "email": {
          "type": "string",
          "description": "The unique email address of the customer. Attempting to assign the same email address to multiple customers will return an error",
          "x-sub-format": "Email",
          "x-conditionally-required-description": "At least one of the four fields email,first_name,last_name or phone must be present in the request body"
        },
        "metafields": {
          "items": {
            "$ref": "#/definitions/MetaFieldPOST",
            "x-reference-objectname": "metafields"
          },
          "type": "array",
          "description": "Attaches additional metadata to a shop's resources"
        },
        "first_name": {
          "type": "string",
          "description": "The customer's first name",
          "x-name": true,
          "x-sub-format": "First Name",
          "x-conditionally-required-description": "At least one of the four fields email,first_name,last_name or phone must be present in the request body"
        },
        "id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "A unique numeric identifier for the customer"
        },
        "last_name": {
          "type": "string",
          "description": "The customer's last name",
          "x-sub-format": "Last Name",
          "x-conditionally-required-description": "At least one of the four fields email,first_name,last_name or phone must be present in the request body"
        },
        "note": {
          "type": "string",
          "description": "A note about the customer",
          "x-nullable": true
        },
        "multipass_identifier": {
          "type": "string",
          "description": "The customer's identifier used with Multipass login",
          "x-nullable": true
        },
        "phone": {
          "type": "string",
          "description": "The unique phone number for this customer. Attempting to assign the same phone number to multiple customers will return an error",
          "x-sub-format": "Phone",
          "x-conditionally-required-description": "At least one of the four fields email,first_name,last_name or phone must be present in the request body"
        },
        "tax_exempt": {
          "type": "boolean",
          "description": "Indicates whether the customer should be charged taxes when placing orders. Valid values are true or false"
        },
        "tags": {
          "type": "string",
          "description": "Tags are additional short descriptors formatted as a string of comma-separated values. For example, if an article has three tags: tag1, tag2, tag3.",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "weight_based_shipping_rates": {
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "price": {
          "type": "string"
        },
        "shipping_zone_id": {
          "format": "int64",
          "type": "integer"
        },
        "weight_high": {
          "format": "double",
          "type": "number"
        },
        "weight_low": {
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "shippingZonesListObject": {
      "x-vendor-objectname": "shipping_zones",
      "properties": {
        "carrier_shipping_rate_providers": {
          "items": {
            "$ref": "#/definitions/carrier_shipping_rate_providers"
          },
          "type": "array"
        },
        "countries": {
          "items": {
            "$ref": "#/definitions/countries-custom"
          },
          "type": "array"
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "name": {
          "type": "string"
        },
        "price_based_shipping_rates": {
          "items": {
            "$ref": "#/definitions/price_based_shipping_rates"
          },
          "type": "array"
        },
        "weight_based_shipping_rates": {
          "items": {
            "$ref": "#/definitions/weight_based_shipping_rates"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "productsVariants": {
      "description": "A product variant is a different version of a product, such as differing sizes or differing colors",
      "properties": {
        "barcode": {
          "description": "The barcode, UPC or ISBN number for the product",
          "type": "string"
        },
        "compare_at_price": {
          "description": "The competitors prices for the same item",
          "type": "string",
          "x-nullable": true,
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "created_at": {
          "description": "The date and time when the product variant was created. The API returns this value in ISO 8601 format",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "fulfillment_service": {
          "description": "Service which is doing the fulfillment",
          "type": "string"
        },
        "grams": {
          "description": "The weight of the product variant in grams",
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "description": "The unique numeric identifier for the product variant",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "image_id": {
          "description": "The unique numeric identifier for a product's image. Image must be associated to the same product as the variant",
          "format": "int64",
          "type": "integer",
          "x-readonly": true,
          "x-reference-objectname": "images"
        },
        "inventory_item_id": {
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "inventory_management": {
          "description": "Specifies whether Shopify tracks the number of items in stock for this product variant",
          "type": "string"
        },
        "inventory_policy": {
          "default": "deny",
          "description": "Specifies whether or not customers are allowed to place an order for a product variant when it's out of stock",
          "enum": [
            "deny",
            "continue"
          ],
          "type": "string",
          "x-sub-format": "Enum"
        },
        "inventory_quantity": {
          "default": 1,
          "description": "The number of items in stock for this product variant",
          "format": "int32",
          "type": "integer"
        },
        "inventory_quantity_adjustment": {
          "description": "Instead of sending a new and old value for inventory an adjustment value can be sent. If an adjustment value is sent it will take priority",
          "format": "int32",
          "type": "integer"
        },
        "metafields": {
          "description": "Attaches additional information to a shop's resources",
          "items": {
            "$ref": "#/definitions/metaField"
          },
          "type": "array"
        },
        "old_inventory_quantity": {
          "description": "The original stock level the client believes the product variant has",
          "format": "int32",
          "type": "integer"
        },
        "option1": {
          "default": "Default Title",
          "description": "Custom properties that a shop owner can use to define product variants",
          "type": "string"
        },
        "option2": {
          "default": "Default Title",
          "description": "Custom properties that a shop owner can use to define product variants",
          "type": "string"
        },
        "option3": {
          "default": "Default Title",
          "description": "Custom properties that a shop owner can use to define product variants",
          "type": "string"
        },
        "position": {
          "description": "The order of the product variant in the list of product variants. 1 is the first position",
          "format": "int32",
          "type": "integer"
        },
        "price": {
          "description": "The price of the product variant",
          "type": "string",
          "x-precision": 2,
          "x-sub-format": "Money"
        },
        "product_id": {
          "description": "The unique numeric identifier for the product",
          "format": "int64",
          "type": "integer",
          "x-readonly": true,
          "x-reference-objectname": "product"
        },
        "requires_shipping": {
          "description": "Specifies whether or not a customer needs to provide a shipping address when placing an order for this product variant",
          "type": "boolean"
        },
        "sku": {
          "description": "A unique identifier for the product in the shop",
          "type": "string"
        },
        "taxable": {
          "description": "Specifies whether or not a tax is charged when the product variant is sold",
          "type": "boolean"
        },
        "title": {
          "description": "The title of the product variant",
          "type": "string",
          "x-name": true
        },
        "updated_at": {
          "description": "The date and time when the product variant was last modified. The API returns this value in ISO 8601 format",
          "format": "date-time",
          "type": "string",
          "x-readonly": true,
          "x-sub-format": "Date Time - ISO 8601"
        },
        "weight": {
          "description": "The weight of the product variant in the unit system specified with weight_unit",
          "format": "double",
          "type": "number"
        },
        "weight_unit": {
          "description": "The unit of measurement that applies to the product variant's weight",
          "enum": [
            "g",
            "kg",
            "oz",
            "lb"
          ],
          "type": "string",
          "x-sub-format": "Enum"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "variants",
      "type": "object"
    },
    "fulfillmentEventsPOST": {
      "description": "A FulfillmentEvent represents a tracking event belonging to a fulfillment of one or more items in an order",
      "properties": {
        "address1": {
          "description": "The fulfillment event's street address",
          "type": "string",
          "x-sub-format": "Street Number"
        },
        "city": {
          "description": "The city in which the fulfillment event occurred",
          "type": "string",
          "x-sub-format": "City"
        },
        "country": {
          "description": "The country in which the fulfillment event occurred",
          "type": "string",
          "x-sub-format": "Country"
        },
        "id": {
          "description": "A numeric unique identifier for the fulfillment event",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "latitude": {
          "description": "Geographic coordinate specifying the north/south location of a fulfillment event",
          "format": "double",
          "type": "number",
          "x-precision": 4,
          "x-sub-format": "Latitude"
        },
        "longitude": {
          "description": "Geographic coordinate specifying the east/west location of a fulfillment event",
          "format": "double",
          "type": "number",
          "x-precision": 4,
          "x-sub-format": "Longitude"
        },
        "message": {
          "description": "An arbitrary message describing the status. Can be provided by a shipping carrier",
          "type": "string"
        },
        "province": {
          "description": "The province in which the fulfillment event occurred",
          "type": "string",
          "x-sub-format": "State"
        },
        "status": {
          "description": "The status of the fulfillment event",
          "enum": [
            "confirmed",
            "in_transit",
            "out_for_delivery",
            "delivered",
            "failure"
          ],
          "type": "string",
          "x-sub-format": "Enum"
        },
        "zip": {
          "description": "The zip code in the location in which the fulfillment event occurred",
          "type": "string",
          "x-sub-format": "Postal Code"
        }
      },
      "required": [
        "status"
      ],
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "events",
      "type": "object"
    },
    "ordersRefundsCalculatePOST": {
      "description": "Calculate refund transactions based on line items and shipping. The returned response can be used to create a Refund",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "refund_line_items": {
          "description": "Array of line item IDs and quantities to refund",
          "items": {
            "$ref": "#/definitions/refundCalculatelineitem"
          },
          "type": "array",
          "x-conditionally-required-description": "Either refund_line_items or transactions or shipping must be present to make a successful POST call"
        },
        "shipping": {
          "description": "Object to specify how much shipping to refund",
          "x-conditionally-required-description": "Either refund_line_items or transactions or shipping must be present to make a successful POST call",
          "$ref": "#/definitions/ordersRefundsCalculateShipping"
        },
        "transactions": {
          "items": {
            "$ref": "#/definitions/refundCalculatetransactionsPOST"
          },
          "type": "array",
          "x-conditionally-required-description": "Either refund_line_items or transactions or shipping must be present to make a successful POST call"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "refunds",
      "type": "object"
    },
    "FulfillmentLineItem": {
      "properties": {
        "applied_discounts": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "key": {
          "type": "string"
        },
        "fulfillment_service": {
          "description": "Service provider who is doing the fulfilment,Valid values are either 'manual' or the name of the provider. eg: 'amazon', 'shipwire', etc",
          "type": "string"
        },
        "fulfillment_status": {
          "description": "Status of an order in terms of the line_items being fulfilled",
          "type": "string",
          "enum": [
            "fulfilled",
            "null",
            "partial"
          ],
          "x-nullable": true,
          "x-sub-format": "Enum"
        },
        "gift_card": {
          "type": "boolean",
          "description": "States whether or not the line_item is a gift card. If so, the item is not taxed or considered for shipping charges"
        },
        "grams": {
          "type": "integer",
          "format": "int32",
          "description": "The weight of the item in grams"
        },
        "line_price": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "x-name": true,
          "description": "The name of the product variant"
        },
        "price": {
          "type": "string",
          "x-sub-format": "Money",
          "x-precision": 2,
          "description": "The price of the item"
        },
        "product_id": {
          "x-readonly": true,
          "type": "integer",
          "format": "int64",
          "description": "The unique numeric identifier for the product in the fulfilment",
          "x-reference-objectname": "product"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items in the fulfillment"
        },
        "requires_shipping": {
          "type": "boolean",
          "description": "Specifies whether or not a customer needs to provide a shipping address when placing an order for this product variant"
        },
        "sku": {
          "type": "string",
          "description": "A unique identifier of the item in the fulfilment"
        },
        "tax_lines": {
          "items": {
            "$ref": "#/definitions/LineItemTaxLine"
          },
          "type": "array",
          "description": "An array of tax_line objects, each of which details the taxes applicable to the order"
        },
        "taxable": {
          "type": "boolean",
          "description": "States whether or not the product was taxable"
        },
        "title": {
          "type": "string",
          "description": "The title of the product"
        },
        "variant_id": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the product variant being fulfilled"
        },
        "variant_title": {
          "type": "string",
          "description": "The title of the product variant being fulfilled"
        },
        "vendor": {
          "type": "string",
          "description": "The name of the supplier of the item"
        },
        "origin_location_id": {
          "type": "integer",
          "format": "int64"
        },
        "destination_location_id": {
          "type": "integer",
          "format": "int64"
        },
        "fulfillable_quantity": {
          "type": "integer",
          "format": "int32",
          "description": "The amount available to fulfill. This is the quantity - max(refunded_quantity, fulfilled_quantity) - pending_fulfilled_quantity - open_fulfilled_quantity"
        },
        "total_discount": {
          "type": "string",
          "x-sub-format": "Money",
          "x-precision": 2,
          "description": "The total discount amount applied to this line item. This value is not subtracted in the line item price"
        },
        "product_exists": {
          "type": "boolean",
          "description": "States whether or not the product exists"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the line item",
          "x-readonly": true
        },
        "properties": {
          "items": {
            "$ref": "#/definitions/LineItemProperties"
          },
          "type": "array",
          "description": "An array of custom information for an item that has been added to the cart. Often used to provide product customization options"
        },
        "variant_inventory_management": {
          "type": "string",
          "description": "Returns the name of the inventory management system"
        },
        "shipment_status": {
          "type": "string",
          "description": " Returns the fulfillment's shipment status",
          "enum": [
            "confirmed",
            "in_transit",
            "out_for_delivery",
            "delivered",
            "failure"
          ],
          "x-sub-format": "Enum"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "type": "object"
    },
    "OrderNoteAttribute": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "carrier_shipping_rate_providers": {
      "properties": {
        "carrier_service_id": {
          "format": "int64",
          "type": "integer"
        },
        "flat_modifier": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        },
        "percent_modifier": {
          "format": "int32",
          "type": "integer"
        },
        "shipping_zone_id": {
          "format": "int64",
          "type": "integer",
          "x-readOnly": true
        }
      },
      "type": "object"
    },
    "image-POST": {
      "properties": {
        "created_at": {
          "type": "string",
          "x-readOnly": true
        },
        "height": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true
        },
        "src": {
          "type": "string"
        },
        "width": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true
        }
      },
      "required": [
        "src"
      ],
      "type": "object"
    },
    "customersAddressPATCH": {
      "description": "A customer address resource instance represents one of the many addresses a customer may have",
      "properties": {
        "address1": {
          "description": "The customer's mailing address",
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the address1, address2,city,company,country,country_code,country_name,default,first_name,last_name,name,phone,province,province_code,zip fields is required for successful PATCH request.",
          "x-nullable": true,
          "x-sub-format": "Street Number"
        },
        "address2": {
          "description": "An additional field for the customer's mailing address",
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the address1, address2,city,company,country,country_code,country_name,default,first_name,last_name,name,phone,province,province_code,zip fields is required for successful PATCH request",
          "x-nullable": true,
          "x-sub-format": "Street Name"
        },
        "city": {
          "description": " The customer's city",
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the address1, address2,city,company,country,country_code,country_name,default,first_name,last_name,name,phone,province,province_code,zip fields is required for successful PATCH request.",
          "x-nullable": true,
          "x-sub-format": "City"
        },
        "company": {
          "description": "The customer's company",
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the address1, address2,city,company,country,country_code,country_name,default,first_name,last_name,name,phone,province,province_code,zip fields is required for successful PATCH request.",
          "x-nullable": true,
          "x-sub-format": "Company Name"
        },
        "country": {
          "description": "The customer's country",
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the address1, address2,city,company,country,country_code,country_name,default,first_name,last_name,name,phone,province,province_code,zip fields is required for successful PATCH request.Additionally If we want to update province or province_code,valid country  should already be present in record or must be provided along with province or province_code",
          "x-nullable": true,
          "x-sub-format": "Country"
        },
        "country_code": {
          "description": "The two-letter country code corresponding to the customer's country",
          "enum": [
            "AD",
            "AE",
            "AF",
            "AG",
            "AI",
            "AL",
            "AM",
            "AO",
            "AQ",
            "AR",
            "AS",
            "AT",
            "AU",
            "AW",
            "AX",
            "AZ",
            "BA",
            "BB",
            "BD",
            "BE",
            "BF",
            "BG",
            "BH",
            "BI",
            "BJ",
            "BL",
            "BM",
            "BN",
            "BO",
            "BQ",
            "BR",
            "BS",
            "BT",
            "BV",
            "BW",
            "BY",
            "BZ",
            "CA",
            "CC",
            "CD",
            "CF",
            "CG",
            "CH",
            "CI",
            "CK",
            "CL",
            "CM",
            "CN",
            "CO",
            "CR",
            "CU",
            "CV",
            "CW",
            "CX",
            "CY",
            "CZ",
            "DE",
            "DJ",
            "DK",
            "DM",
            "DO",
            "DZ",
            "EC",
            "EE",
            "EG",
            "EH",
            "ER",
            "ES",
            "ET",
            "FI",
            "FJ",
            "FK",
            "FM",
            "FO",
            "FR",
            "GA",
            "GB",
            "GD",
            "GE",
            "GF",
            "GG",
            "GH",
            "GI",
            "GL",
            "GM",
            "GN",
            "GP",
            "GQ",
            "GR",
            "GS",
            "GT",
            "GU",
            "GW",
            "GY",
            "HK",
            "HM",
            "HN",
            "HR",
            "HT",
            "HU",
            "ID",
            "IE",
            "IL",
            "IM",
            "IN",
            "IO",
            "IQ",
            "IR",
            "IS",
            "IT",
            "JE",
            "JM",
            "JO",
            "JP",
            "KE",
            "KG",
            "KH",
            "KI",
            "KM",
            "KN",
            "KP",
            "KR",
            "KW",
            "KY",
            "KZ",
            "LA",
            "LB",
            "LC",
            "LI",
            "LK",
            "LR",
            "LS",
            "LT",
            "LU",
            "LV",
            "LY",
            "MA",
            "MC",
            "MD",
            "ME",
            "MF",
            "MG",
            "MH",
            "MK",
            "ML",
            "MM",
            "MN",
            "MO",
            "MP",
            "MQ",
            "MR",
            "MS",
            "MT",
            "MU",
            "MV",
            "MW",
            "MX",
            "MY",
            "MZ",
            "NA",
            "NC",
            "NE",
            "NF",
            "NG",
            "NI",
            "NL",
            "NO",
            "NP",
            "NR",
            "NU",
            "NZ",
            "OM",
            "PA",
            "PE",
            "PF",
            "PG",
            "PH",
            "PK",
            "PL",
            "PM",
            "PN",
            "PR",
            "PS",
            "PT",
            "PW",
            "PY",
            "QA",
            "RE",
            "RO",
            "RS",
            "RU",
            "RW",
            "SA",
            "SB",
            "SC",
            "SD",
            "SE",
            "SG",
            "SH",
            "SI",
            "SJ",
            "SK",
            "SL",
            "SM",
            "SN",
            "SO",
            "SR",
            "SS",
            "ST",
            "SV",
            "SX",
            "SY",
            "SZ",
            "TC",
            "TD",
            "TF",
            "TG",
            "TH",
            "TJ",
            "TK",
            "TL",
            "TM",
            "TN",
            "TO",
            "TR",
            "TT",
            "TV",
            "TW",
            "TZ",
            "UA",
            "UG",
            "UM",
            "US",
            "UY",
            "UZ",
            "VA",
            "VC",
            "VE",
            "VG",
            "VI",
            "VN",
            "VU",
            "WF",
            "WS",
            "YE",
            "YT",
            "ZA",
            "ZM",
            "ZW"
          ],
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the address1, address2,city,company,country,country_code,country_name,default,first_name,last_name,name,phone,province,province_code,zip fields is required for successful PATCH request.Additionally If we want to update province or province_code,valid country code should already be present in record or must be provided along with province or province_code.",
          "x-nullable": true,
          "x-sub-format": "Country Code"
        },
        "country_name": {
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the address1, address2,city,company,country,country_code,country_name,default,first_name,last_name,name,phone,province,province_code,zip fields is required for successful PATCH request.",
          "x-nullable": true,
          "x-sub-format": "Country"
        },
        "default": {
          "type": "boolean",
          "x-conditionally-required-description": "Atleast one of the address1, address2,city,company,country,country_code,country_name,default,first_name,last_name,name,phone,province,province_code,zip fields is required for successful PATCH request."
        },
        "first_name": {
          "description": "The customer's first name",
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the address1, address2,city,company,country,country_code,country_name,default,first_name,last_name,name,phone,province,province_code,zip fields is required for successful PATCH request.",
          "x-nullable": true,
          "x-sub-format": "First Name"
        },
        "id": {
          "description": "A unique numeric identifier for the address",
          "format": "int64",
          "type": "integer",
          "x-readonly": true
        },
        "last_name": {
          "description": "The customer's last name",
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the address1, address2,city,company,country,country_code,country_name,default,first_name,last_name,name,phone,province,province_code,zip fields is required for successful PATCH request.",
          "x-nullable": true,
          "x-sub-format": "Last Name"
        },
        "name": {
          "description": "The customer's name",
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the address1, address2,city,company,country,country_code,country_name,default,first_name,last_name,name,phone,province,province_code,zip fields is required for successful PATCH request.",
          "x-nullable": true,
          "x-sub-format": "Full Name"
        },
        "phone": {
          "description": "The customer's phone number for this mailing address",
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the address1, address2,city,company,country,country_code,country_name,default,first_name,last_name,name,phone,province,province_code,zip fields is required for successful PATCH request.",
          "x-nullable": true,
          "x-sub-format": "Phone"
        },
        "province": {
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the address1, address2,city,company,country,country_code,country_name,default,first_name,last_name,name,phone,province,province_code,zip fields is required for successful PATCH request.Additionally if we want to update country or country_code,valid province should already be present in record or must be provided along with country or country_code",
          "x-nullable": true,
          "x-sub-format": "State"
        },
        "province_code": {
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the address1, address2,city,company,country,country_code,country_name,default,first_name,last_name,name,phone,province,province_code,zip fields is required for successful PATCH request.Additionally if we want to update country or country_code,valid province_code should already be present in record or must be provided along with country or country_code",
          "x-nullable": true,
          "x-sub-format": "State (abbrev)"
        },
        "zip": {
          "description": "The customer's zip or postal code",
          "type": "string",
          "x-conditionally-required-description": "Atleast one of the address1, address2,city,company,country,country_code,country_name,default,first_name,last_name,name,phone,province,province_code,zip fields is required for successful PATCH request.",
          "x-nullable": true,
          "x-sub-format": "State (abbrev)"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "addresses",
      "type": "object"
    }
  },
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "support@cloud-elements.com"
    },
    "title": "shopify",
    "version": "api-v2"
  },
  "tags": [
    {
      "name": "ping"
    },
    {
      "name": "query"
    },
    {
      "name": "objects"
    },
    {
      "name": "variants"
    },
    {
      "name": "countries"
    },
    {
      "name": "products"
    },
    {
      "name": "metafields"
    },
    {
      "name": "metafields-count"
    },
    {
      "name": "collects-count"
    },
    {
      "name": "price-rules"
    },
    {
      "name": "abandoned-checkouts"
    },
    {
      "name": "custom-collections"
    },
    {
      "name": "discount-codes"
    },
    {
      "name": "shops"
    },
    {
      "name": "objectName"
    },
    {
      "name": "shipping-zones"
    },
    {
      "name": "orders"
    },
    {
      "name": "customers"
    },
    {
      "name": "smart-collections"
    },
    {
      "name": "bulk"
    },
    {
      "name": "collects"
    },
    {
      "name": "custom-collections-count"
    }
  ]
}
